% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cyclicaltrajectories.R
\encoding{UTF-8}
\name{cyclicaltrajectories}
\alias{cyclicaltrajectories}
\alias{cycleBuild}
\alias{fdtrajBuild}
\alias{cycleSmoothness}
\alias{cycleShift}
\alias{trajectorysectionBuild}
\alias{interpolateEcolStates}
\title{Functions for Cyclical Ecological Trajectory Analysis}
\usage{
cycleBuild(
  d,
  sites,
  times,
  DurC,
  dates = times\%\%DurC,
  startdate = min(dates),
  extBound = "end",
  minEcolStates = 3
)

fdtrajBuild(
  d,
  sites,
  times,
  DurC,
  dates = times\%\%DurC,
  fixed_dates = unique(dates\%\%DurC),
  names_fixed_dates = as.character(round(fixed_dates, 2)),
  minEcolStates = 2
)

cycleShift(
  d,
  sites,
  times,
  DurC,
  dates = times\%\%DurC,
  datesCS = unique(dates),
  centering = T,
  minEcolStates = 3
)

cycleSmoothness(
  d,
  sites,
  times,
  DurC,
  dates = times\%\%DurC,
  startdate = min(dates),
  extBound = "end",
  minEcolStates = 3
)

trajectorysectionBuild(
  d,
  sites,
  times,
  Traj,
  tstart,
  tend,
  BCstart,
  BCend,
  namesTS = 1:length(Traj)
)

interpolateEcolStates(d, ToInterpolate)
}
\arguments{
\item{d}{A symmetric \code{\link{matrix}} or an object of class \code{\link{dist}} containing the distance values between pairs of ecosystem states.}

\item{sites}{A vector indicating the site corresponding to each ecosystem state.}

\item{times}{A vector indicating the times corresponding to each ecosystem state (equivalent to "surveys" in other ETA function but more time-explicit).}

\item{DurC}{A value indicating the duration of a cycle. Must be in the same units as times.}

\item{dates}{An optional vector indicating the dates (< \code{DurC}) corresponding to each ecosystem state. Must be in the same units as times. Defaults to times modulo DurC (see details).}

\item{startdate}{An optional value indicating at which date the cycles must begin. Must be in the same units as times. Defaults to \code{min(dates)}.}

\item{extBound}{An optional value, either \code{"end"} or \code{"start"}, indicating whether the start or end of the cycles must be considered "external". Defaults to \code{"end"}.}

\item{minEcolStates}{An optional integer indicating the minimum number of ecological states to return a cycle. Cycle comprising less ecological states than minEcolStates are discarded and do not appear in the output of the function. Defaults to 3.}

\item{fixed_dates}{An optional vector of dates for which fixed-dates trajectories must be computed. Defaults to \code{unique(dates)}, resulting in returning all possible fixed-dates trajectories.}

\item{names_fixed_dates}{An optional vector of names associated to each \code{fixed_dates}. Defaults to round(fixed_dates,2).}

\item{datesCS}{An optional vector indicating the dates for which a cyclical shift must be computed. Default to unique(dates) resulting in the computation of all possible cyclical shifts.}

\item{centering}{An optional boolean. Should the cycles be centered before computing cyclical shifts? Defaults to \code{T}.}

\item{Traj}{A vector of length equal to the number of desired trajectory sections indicating the trajectories from which trajectory sections must be build (see details).}

\item{tstart}{A vector of start times for each of the desired trajectory sections (see details).}

\item{tend}{A vector of end times for each of the desired trajectory sections (see details).}

\item{BCstart}{A vector of start boundary conditions (either \code{"internal"} or \code{"external"}) for each of the desired trajectory sections (see details).}

\item{BCend}{A vector of end boundary conditions (either \code{"internal"} or \code{"external"}) for each of the desired trajectory sections (see details).}

\item{namesTS}{An optional vector giving a name for each of the desired trajectory sections (by default trajectory sections are simply numbered).}

\item{ToInterpolate}{a matrix with three columns: 1) the positions of ecosystem states A in d; 2) the positions of ecosystem states B in d; 3) an interpolation coefficient (i.e. at what proportion of directed segment AB the interpolate ecosystem state X needs to be).}
}
\description{
The Cyclical extension of Ecological Trajectory Analysis (CETA) aims at allowing ETA to describe ecological trajectories presenting cyclical dynamics such as seasonal or day/night cycles.
CETA operates by subdividing a trajectory presenting cyclical dynamics into two types of sub-trajectories of interest: cycles and fixed-dates trajectories
}
\details{
CETA functions achieve one of two goals:
\enumerate{
\item Reformating data to analyse either cycles or fixed-dates trajectories. The reformated data can then be fed into existing ETA functions to obtain desired metrics.
\item Providing new metrics relevant to cycles complementing other ETA functions
}

CETA functions:
\itemize{
\item{Function \code{cycleBuild} reformates a dataset describing one or more trajectories with cyclical dynamics for the analysis of their cycles.}
\item{Function \code{fdtrajBuild} reformates a dataset describing one or more trajectories with cyclical dynamics for the analysis of their fixed-dates trajectories.}
\item{Function \code{cycleSmoothness} computes the "smoothness" of the cycles embedded in one or more cyclical trajectories.}
\item{Function \code{cycleShift} computes the cyclical shifts (i.e. advances and delays) that can be obtain from one or more cyclical trajectories.}
\item{Function \code{trajectorysectionBuild} reformates a dataset describing one or more trajectories into specified trajectory sections. Trajectory sections represent a way to subset trajectories flexibly. Cycles are a particular case of trajectory sections.}
\item{Function \code{interpolateEcolStates} compute interpolated ecological states and the new distance matrix associated (used in trajectorysectionBuild).}
}

CETA is a little more time-expicit than the rest of ETA. Hence the parameters "surveys" having only an ordinal meaning in other ETA functions is replaced by "times".
CETA also distinguishes between times and dates. Times represent linear time whereas dates represent circular time (e.g. the month of year). Dates are circular variables, coming back to zero when reaching their maximum value DurC corresponding to the duration of a cycle.
In CETA, dates are by default assumed to be times modulo DurC. This should fit many applications but if this is not the case (i.e. if there is an offset between times and dates), dates can be specified. Dates however need to remain compatible with times and DurC (i.e. (times modulo DurC) - (dates modulo DurC) needs to be a constant).

Trajectory sections can be obtained using trajectorysectionBuild. Trajectory sections allow to cut a longer trajectory into parts for further analyses. Cycles are specical case of trajectory sections.
A trajectory section TS(Traj,(tstart, BCstart),(tend, BCend)) is defined by the trajectory (Traj) it is obtained from, by an start and end times (tstart and tend) and start and end boundary conditions (BCstart, BCend).
The function trajectorysectionBuild builds trajectory sections as a function of its arguments \code{Traj}, \code{tstart}, \code{tend}, \code{BCstart}, \code{BCend}.
}
\author{
Nicolas Djeghri, UBO

Miquel De \enc{CÃ¡ceres}{Caceres}, CREAF
}
