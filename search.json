[{"path":"https://emf-creaf.github.io/ecotraj/articles/Dissimilarities.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Dissimilarities in community data","text":"dissimilarity coefficients popular community ecology, percentage difference (alias Bray-Curtis), drawback non-Euclidean (dissimilarity matrices allow representation Cartesian space), even semi-metric (.e. triangle inequality ensured). order use coefficients multivariate analyses require properties transformation original space normally order. section, compare different alternatives provide recommendations issue.","code":"library(ecotraj) ## Loading required package: Rcpp"},{"path":"https://emf-creaf.github.io/ecotraj/articles/Dissimilarities.html","id":"effect-of-square-root-on-a-simple-directional-trajectory","dir":"Articles","previous_headings":"","what":"2. Effect of square root on a simple directional trajectory","title":"Dissimilarities in community data","text":", use example single synthetic community illustrate effect square root transformation community trajectory. begin defining species data trajectory . dataset consists four rows (.e. surveys) four columns (species). dynamics example consist constant increase number individuals first species corresponding decrease others, keeping total abundance 100 individuals: now use function vegdist package vegan calculate Bray-Curtis coefficient: dissimilarity matrix metric, one need transformation trajectory analysis. However, good example illustrate effect square root transformation. start defining trajectories: draw resemblance space corresponding dissimilarity matrix see straight trajectory: see Bray-Curtis dissimilarity responds linearly proposed sequence community dynamics. confirm geometry, can calculate geometric properties trajectory (.e. length, angle consecutive segments overall directionality): Angles 0 degrees overall directionality maximum (.e. 1), accordance plot data. now proceed take square root dissimilarity values, necessary achieve metric (Euclidean) space complex data set: redefine trajectories new dissimilarity matrix: transformation increases dissimilarity values (original values smaller 1), increase larger smaller values, ratio large dissimilarities small dissimilarities decreases. effect overall shape trajectory, surprisingly now looks like:  addition distortion observed, number dimensions data increased (.e sum variance explained two axes 88% < 100%), sure angles well represented. re-calculate properties trajectory taking account dimensions obtain: length segments trajectory increased, segments length, agreement original trajectory. contrast, angles now 90 degrees overall directionality decreased substantially.","code":"sites <- as.character(rep(1,4)) surveys <- 1:4 spdata <- rbind(c(35,30,20,15),                 c(50,25,15,10),                 c(65,20,10,5),                 c(80,15,5,0)) D = vegan::vegdist(spdata, \"bray\") is.metric(D) ## [1] TRUE D ##      1    2    3 ## 2 0.15           ## 3 0.30 0.15      ## 4 0.45 0.30 0.15 x <- defineTrajectories(D,sites,surveys) trajectoryPCoA(x, survey.labels = TRUE) trajectoryLengths(x) ##     S1   S2   S3 Path ## 1 0.15 0.15 0.15 0.45 trajectoryAngles(x) ##   S1-S2 S2-S3 mean sd rho ## 1     0     0    0  0   1 trajectoryDirectionality(x) ## 1  ## 1 sqrtD = sqrt(D) sqrtD ##           1         2         3 ## 2 0.3872983                     ## 3 0.5477226 0.3872983           ## 4 0.6708204 0.5477226 0.3872983 x_sqrt <- defineTrajectories(sqrtD,sites,surveys) trajectoryPCoA(x_sqrt, survey.labels = TRUE) trajectoryLengths(x_sqrt) ##          S1        S2        S3     Path ## 1 0.3872983 0.3872983 0.3872983 1.161895 trajectoryAngles(x_sqrt) ##   S1-S2 S2-S3 mean sd rho ## 1    90    90   90  0   1 trajectoryAngles(x_sqrt, all=TRUE) ##   A1 A2 A3 A4 mean sd rho ## 1 90 90 90 90   90  0   1 trajectoryDirectionality(x_sqrt) ##   1  ## 0.5"},{"path":"https://emf-creaf.github.io/ecotraj/articles/Dissimilarities.html","id":"effect-of-different-transformations-on-more-complex-trajectories","dir":"Articles","previous_headings":"","what":"3. Effect of different transformations on more complex trajectories","title":"Dissimilarities in community data","text":"use simulated data compare four transformation approaches: Local transformation semi-metric dissimilarities (percentage difference) every triplet triangle inequality required. done default ETA functions. Global transformation dissimilarities, using square root. Global transformation dissimilarities using Principal Coordinates Analysis (classical multidimensional scaling) eigenvalue correction. Global transformation dissimilarities using metric multidimensional scaling (metric MDS). use simulated dynamics build another trajectory species (20) time steps. begin setting number time steps (50) size community (50 individuals): Nreplace number individuals replaced time step (5%). Now define initial community vector vector probabilities offspring species according ecological conditions: can now simulate dynamics sequentially applying stochastic deaths recruitment: decide frequently (respect simulated step) sample community taken, every four steps: Now ready calculate Bray-Curtis dissimilarity: complex trajectory, triangles may obey triangle inequality (depending simulation). can inspected using function .metric: Deviations metric space, exist, small, local transformation triangles small. Local transformations possible display trajectories. plot trajectory using function trajectoryPCoA() global transformation principal coordinates analysis (PCoA) negative eigenvalue correction performed. fine display trajectories, problems measuring angular properties, see.  trajectory twists derived stochasticity death recruitment. Let’s now look square root Bray-Curtis dissimilarity:  Finally, also transform dissimilarities using metric multidimensional scaling (mMDS), provided package smacof:  three plots look different, differences striking (besides rotation issues). can compare stress global solutions: see square root leads strongest alteration original dissimilarities. calculate geometric properties limited ordination plots can take account dimensions. first call trajectoryAngles() matrix D represents default strategy transforming triangles locally, involves weakest transformation can taken reference. square root PCoA negative eigenvalue correction induce strong transformation trajectory angles. global solution metric MDS leads angles similar local transformation strategy. inspect overall directionality, global solution metric MDS provides value closer local transformation, compared PCoA square root:","code":"Nsteps <- 50 CC <- 50 Nreplace <- CC*0.05 x <- c(0, 1, 0, 67, 1, 3, 0, 2, 2, 2, 1, 6, 2, 0, 0, 2, 5, 1, 6, 0) poffspring <- c(0, 0, 0.002, 0.661 ,0 ,0, 0.037, 0.281, 0, 0, 0, 0.008, 0, 0, 0.005, 0.003, 0, 0, 0, 0) m <- matrix(0, nrow=Nsteps+1, ncol=length(x)) m[1, ] = x for(k in 1:Nsteps) {   pdeath <-x/sum(x) #Equal probability of dying   deaths<-rmultinom(1,Nreplace, pdeath)   x <- pmax(x - deaths,0)   offspring = rmultinom(1,Nreplace, as.vector(poffspring))   x <- x + offspring   m[k+1, ]<-x } Sj <- seq(1,Nsteps+1, by=4) #Sample every four steps mj <- m[Sj,] surveys <- 1:length(Sj) sites <- as.character(rep(1,length(Sj))) D <- vegan::vegdist(mj,\"bray\") is.metric(D, tol=0.0000001) ## [1] TRUE x <- defineTrajectories(D,sites,surveys) pcoa<-trajectoryPCoA(subsetTrajectories(x, \"1\"),                      length=0.1, axes=c(1,2), survey.labels = TRUE) ## Warning in cmdscale(d, eig = TRUE, add = TRUE, k = nrow(as.matrix(d)) - : only ## 11 of the first 12 eigenvalues are > 0 ## Warning in arrows(x[niini], y[niini], x[nifin], y[nifin], ...): zero-length ## arrow is of indeterminate angle and so skipped pcoaD <- dist(pcoa$points) x_pcoa <- defineTrajectories(pcoaD,sites,surveys) sqrtD <- sqrt(D) x_sqrt <- defineTrajectories(sqrtD,sites,surveys) pcoaSqrt <- trajectoryPCoA(subsetTrajectories(x_sqrt, \"1\"),                           length=0.1, axes=c(1,2), survey.labels = T) ## Warning in arrows(x[niini], y[niini], x[nifin], y[nifin], ...): zero-length ## arrow is of indeterminate angle and so skipped res <- smacof::mds(D, ndim = length(Sj)-1, type = \"interval\") mmdsD <- dist(res$conf) trajectoryPlot(res$conf, sites, surveys,                length=0.1, axes=c(1,2), survey.labels = T) ## Warning in arrows(xp[niini], yp[niini], xp[nifin], yp[nifin], ...): zero-length ## arrow is of indeterminate angle and so skipped x_mmds <- defineTrajectories(mmdsD,sites,surveys) smacof::stress0(D,pcoaSqrt$points, type=\"interval\") ##  ## Call: ## smacof::stress0(delta = D, init = pcoaSqrt$points, type = \"interval\") ##  ## Model: Symmetric SMACOF  ## Number of objects: 13  ## Stress-1 value: 0.077  ## Number of iterations: 0 smacof::stress0(D,pcoa$points, type=\"interval\") ##  ## Call: ## smacof::stress0(delta = D, init = pcoa$points, type = \"interval\") ##  ## Model: Symmetric SMACOF  ## Number of objects: 13  ## Stress-1 value: 0.007  ## Number of iterations: 0 smacof::stress0(D,res$conf, type=\"interval\") ##  ## Call: ## smacof::stress0(delta = D, init = res$conf, type = \"interval\") ##  ## Model: Symmetric SMACOF  ## Number of objects: 13  ## Stress-1 value: 0.013  ## Number of iterations: 0 anglesD <- trajectoryAngles(x) anglesSqrtD <- trajectoryAngles(x_sqrt) anglesPcoaD <- trajectoryAngles(x_pcoa) anglesmmdsD <- trajectoryAngles(x_mmds)  df<-as.data.frame(rbind(anglesD, anglesSqrtD, anglesPcoaD, anglesmmdsD)) row.names(df)<-c(\"local\", \"global.sqrt\", \"global.pcoa\", \"global.mmds\") round(df,2) ##             S1-S2  S2-S3  S3-S4 S4-S5  S5-S6  S6-S7 S7-S8 S8-S9 S9-S10 S10-S11 ## local        0.00  75.52  82.82  0.00  97.18 104.48  0.00  0.00    NaN     NaN ## global.sqrt 90.00 101.78 104.48 90.00 104.48 110.70 90.00 90.00    NaN     NaN ## global.pcoa 80.72  98.29 103.57 77.78 104.99 112.42 91.92 91.92 105.24  102.26 ## global.mmds 54.83  95.78  95.60 44.20  97.89 119.23 72.23 49.85  93.77   92.68 ##             S11-S12  mean   sd  rho ## local          0.00 38.10 0.83 0.71 ## global.sqrt   90.00 96.81 0.14 0.99 ## global.pcoa   80.72 95.46 0.19 0.98 ## global.mmds   21.88 76.70 0.50 0.88 trajectoryDirectionality(x) ##         1  ## 0.8770056 trajectoryDirectionality(x_sqrt) ##         1  ## 0.4810576 trajectoryDirectionality(x_pcoa) ##         1  ## 0.5927582 trajectoryDirectionality(x_mmds) ##         1  ## 0.7532264"},{"path":"https://emf-creaf.github.io/ecotraj/articles/Dissimilarities.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"4. Conclusions","title":"Dissimilarities in community data","text":"small study compared effect different solutions violation triangle inequality. function .metric returns TRUE given data set one worry violations triangle inequality. Local solutions imply smallest number changes, consistent across triplets, users may desire apply global transformation produces euclidean spaces. done care. shown square root transformation distorts angles overall directionality trajectories space defined percentage difference (alias Bray-Curtis) dissimilarity index. suspect negative effect square root transformation angles happens matter coefficient used derive initial distance matrix. Therefore, advocate avoiding use conducting trajectory analysis (particular angles). global transformation consisting application PCoA negative eigenvalue correction less strong square root, still strongly change angles segments. Perhaps, less harmful global transformation provided metric Multidimensional Scaling, need embed distances Euclidean space three transformations implies stronger requirement metric, results distortions.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"going-round-in-cycles-but-go-somewhere-what-ceta-does-and-where-it-sits","dir":"Articles","previous_headings":"1. Introduction","what":"1.1 Going round in cycles, but go somewhere! What CETA does, and where it sits","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"Cyclical Ecological Trajectory Analysis (CETA) extension Ecological Trajectory Analysis (ETA) allowing handle trajectories presenting regular cyclical dynamics (e.g. seasons, day-night cycle): Djeghri et al. (preparation) Going round cycles, going somewhere: Ecological Trajectory Analysis tool decipher seasonality cyclical dynamics. starting, important clarify CETA , well mean regular cyclical dynamics. Unlike many statistical procedures dedicated time series, CETA aims detect cyclicity. Rather, CETA aims describing gaining insights long-term changes cyclical dynamics. Cyclicity must known priori knowledge system study another statistical analysis (e.g. eigenvector maps). “regular cyclical dynamics” mean cycles ‒ often ‒ product regularly paced astronomic forcings (seasons, day-night cycles, tides). Describing seasonal dynamics fact prime motivation designing CETA. CETA therefore designed address many dynamics ecologists refer “cyclical” disturbance-recovery cycles, time duration cycles fixed (.e. periodic). may better addressed clever use general ETA framework. primary research field envision CETA lies middle ground phenology, community, ecosystem ecology.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"about-this-vignette","dir":"Articles","previous_headings":"1. Introduction","what":"1.2 About this vignette","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"vignette learn use specific functions designed CETA, combine wider ETA framework obtain metrics describing cyclical trajectories. Let’s first call package:","code":"library(ecotraj) ## Loading required package: Rcpp"},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"the-vocabulary-of-ceta","dir":"Articles","previous_headings":"2. General approach of CETA","what":"2.1 The vocabulary of CETA","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"CETA perhaps bit heavy-handed vocabulary. two words time recognize less three different types trajectories! Let’s start way refer time: CETA distinguishes “times”, representing linear time, “dates” representing circular time. instance, 17th December recurs every year, sense, call date. However, 17th December 2009 occurred (BBC radio grateful). , three types trajectories CETA distinguishes characterizes: Cyclical trajectories: Long trajectories presenting cyclical dynamics given periodicity (e.g. annual). basis CETA. also constitute inputs two types trajectories derived. Cycles: Sub-divisions cyclical trajectory duration equal periodicity. Fixed-date trajectories: Trajectories joining ecological states sampled date given cyclical trajectory (instance, multi-annual monthly sampled time series, trajectory joining ecological states obtained March year 1, March year 2, etc…). vocabulary helps CETA little time-explicit regular ETA. Let’s build toy dataset one cyclical trajectory composed three cycles make visual: classical ETA, define cyclical trajectory using defineTrajectories(): Note define surveys, added survey times defined timesToy. can visualize cyclical trajectory using function trajectoryPCoA(), trajectory within ETA.  see cyclical trajectory composed three cycles yet explicitly identified. Similarly, fixed-date trajectories isolated. goal “extract” functions CETA.","code":"#Let's define our toy sampling times: timesToy <- 0:30 #The sampling times of the time series cycleDurationToy <- 10 #The duration of the cycles (i.e. the periodicity of the time series) datesToy <- timesToy%%cycleDurationToy #The dates associated to each times  #And state where the sampling occurred, for now let's only use one site \"A\" sitesToy <- rep(c(\"A\"),length(timesToy))  #Then prepare some toy data: #Prepare a noise and trend term to make the data more interesting noise <- 0.05 trend <- 0.05  #Make cyclical data (note that we apply the trend only to x): x <- sin((timesToy*2*pi)/cycleDurationToy)+rnorm(length(timesToy),mean=0,sd=noise)+trend*timesToy y <- cos((timesToy*2*pi)/cycleDurationToy)+rnorm(length(timesToy),mean=0,sd=noise) matToy <- cbind(x,y)  #And express it as a distance matrix (ETA is based on distances, increasing its generality) dToy <- dist(matToy) xToy <- defineTrajectories(dToy, sites = sitesToy, times = timesToy) trajectoryPCoA(xToy,                 lwd = 2,length = 0.2)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"extracting-cycles-and-fixed-date-trajectories","dir":"Articles","previous_headings":"2. General approach of CETA","what":"2.2 Extracting cycles and fixed-date trajectories","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"CETA “extract” functions take one cyclical trajectories return distance matrix d associated descriptors allowing isolate cycles fixed-date trajectories (respectively functions extractCycles() extractFixedDateTrajectories()) analysis.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"fixed-date-trajectories","dir":"Articles","previous_headings":"2. General approach of CETA > 2.2 Extracting cycles and fixed-date trajectories","what":"2.2.1 Fixed-date trajectories","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"Let’s start extractFixedDateTrajectories() simplest one handle: Note haven’t specified datesToy value argument dates. CETA functions assume default values times%%cycleDuration means taking modulo cycle duration works perfectly fine . cases offset dates times (e.g. times = 0 correspond dates = 0), different dates argument must provided. Let’s look output given extractFixedDateTrajectories(): class fd.trajectories identifies object subclass trajectories. elements usual ones: d distance matrix metadata data frame containing information necessary read descriptor fixed-date trajectories. column fdT (fixed-date trajectories) indicates fixed-date trajectories different ecological states d belong. names fdT built concatenating site (especially useful several cyclical trajectories studied parallel) string fdT name given argument extractFixedDateTrajectories() (provided, date used default). Using combination new distance matrix d descriptors metadata, output extractFixedDateTrajectories() can fed ETA functions study fixed-date trajectories. Whenever ETA functions identify input object one class fd.trajectories, use values fdT column substitute sites. instance can compute directionality fixed-date trajectories using: distances fixed-date trajectories using: visualization, possible use general trajectoryPCoA() function :  CETA provides plotting function dedicated fixed date trajectories uses circular color palette fixed dates trajectories can represent original cyclical trajectory:  Note find, expected, 10 fixed-date trajectories (one date cycle). linear pretty much parallel, expect given trend put toy dataset.","code":"fdtrajToy <- extractFixedDateTrajectories(xToy,                                           cycleDuration = cycleDurationToy,                                           namesFixedDate = paste(\"M\",1:10)) class(fdtrajToy) ## [1] \"fd.trajectories\" \"trajectories\"    \"list\" names(fdtrajToy) ## [1] \"d\"        \"metadata\" head(fdtrajToy$metadata) ##   sites       fdT surveys times dates ## 1     A A_fdT_M 1       1     0     0 ## 2     A A_fdT_M 2       1     1     1 ## 3     A A_fdT_M 3       1     2     2 ## 4     A A_fdT_M 4       1     3     3 ## 5     A A_fdT_M 5       1     4     4 ## 6     A A_fdT_M 6       1     5     5 trajectoryDirectionality(fdtrajToy) ##  A_fdT_M 1  A_fdT_M 2  A_fdT_M 3  A_fdT_M 4  A_fdT_M 5  A_fdT_M 6  A_fdT_M 7  ##  0.9789766  0.9960968  0.9460855  0.9766767  0.8485723  0.8511184  0.9552937  ##  A_fdT_M 8  A_fdT_M 9 A_fdT_M 10  ##  0.9713379  0.8373815  0.9803382 trajectoryDistances(fdtrajToy) ##            A_fdT_M 1 A_fdT_M 2 A_fdT_M 3 A_fdT_M 4 A_fdT_M 5 A_fdT_M 6 ## A_fdT_M 2  0.3180005                                                   ## A_fdT_M 3  0.8994350 0.6030857                                         ## A_fdT_M 4  1.4196563 1.1605444 0.6752462                               ## A_fdT_M 5  1.8338956 1.6139284 1.1303706 0.5616614                     ## A_fdT_M 6  2.0920368 1.9366669 1.5511119 1.0166316 0.5902681           ## A_fdT_M 7  1.8289310 1.7852622 1.6034532 1.2871889 0.9288005 0.5353211 ## A_fdT_M 8  1.4378364 1.5341818 1.6299085 1.4657928 1.2942500 1.0355476 ## A_fdT_M 9  0.9246206 1.1213243 1.4635933 1.5414729 1.5853991 1.5146532 ## A_fdT_M 10 0.3281008 0.6247820 1.2423826 1.5646013 1.8388043 1.9713595 ##            A_fdT_M 7 A_fdT_M 8 A_fdT_M 9 ## A_fdT_M 2                                ## A_fdT_M 3                                ## A_fdT_M 4                                ## A_fdT_M 5                                ## A_fdT_M 6                                ## A_fdT_M 7                                ## A_fdT_M 8  0.5581547                     ## A_fdT_M 9  1.0941022 0.6654062           ## A_fdT_M 10 1.6362000 1.2111657 0.6680331 trajectoryPCoA(fdtrajToy,                lwd = 2,length = 0.2,                traj.colors = c(\"blue\",\"red\",\"black\",\"grey\",\"orange\",\"green3\",\"brown\",\"purple\",\"pink\",\"yellow\")) fixedDateTrajectoryPCoA(fdtrajToy,                         lwd = 2, length = 0.2)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"cycles","dir":"Articles","previous_headings":"2. General approach of CETA > 2.2 Extracting cycles and fixed-date trajectories","what":"2.2.2 Cycles","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"Let’s now look extraction works cycles. function extractCycles() works similarly extractFixedDateTrajectories(). differences : allows specify names cycles (default concatenation site names “C1”, “C2” etc…); allows change startdate cycles (instance allowing flexibly choose cycle start: e.g. annual cycle always need start January). Just like extractFixedDateTrajectories(), extractCycles() outputs d metadata: inspecting metadata, find column cycles, containing unique names cycles, analogously column fdT output extractFixedDateTrajectories(). addition importantly, extractCycles() returns column named internal, analog extractFixedDateTrajectories(): internal column gives information internal vs external ecological states. important distinction solve call “December--January segment problem” imposes peculiar handling internal external ecological states (generally handled automatically within ETA CETA functions).","code":"cycleToy <- extractCycles(xToy,                           cycleDuration = cycleDurationToy) names(cycleToy) ## [1] \"d\"        \"metadata\" head(cycleToy$metadata) ##   sites cycles surveys times dates internal ## 1     A   A_C1       1     0     0     TRUE ## 2     A   A_C1       2     1     1     TRUE ## 3     A   A_C1       3     2     2     TRUE ## 4     A   A_C1       4     3     3     TRUE ## 5     A   A_C1       5     4     4     TRUE ## 6     A   A_C1       6     5     5     TRUE"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"beware-of-the-external-ecological-states-the-december-to-january-segment-problem","dir":"Articles","previous_headings":"2. General approach of CETA > 2.2 Extracting cycles and fixed-date trajectories","what":"2.2.3 Beware of the external ecological states: the “December-to-January segment problem”","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"Let’s imagine sampled site monthly (Jan, Feb, …, Dec) many years (YY, Y+1Y+1 …). cut cyclical trajectory cycles? One possibility make cycles segments joining months year YY, January December (12 ecological states, joined 11 segments). problem segment joining December year YY January year Y+1Y+1 ignored. can extend cycles first ecological state next cycle (January year Y+1Y+1, 13 ecological states 12 segments). correctly includes 12 segments cycle implies cycle contains twice month January. refer “December--January segment problem”. CETA, solve issue distinguishing internal external ecological states. case , January year Y+1Y+1 considered external whereas ecological states internal. Broadly speaking, external ecological states included computations relying cycle segments, excluded computations relying cycle ecological states. specifically metrics operations CETA require remove, apply special treatment external ecological states : Centering, internal states used determining cycle center centering operation applies external states well. PCoA visualization (several cycles studied, ecological states duplicated need removed prior PCoA). Computation trajectory variability, external ecological states must removed. readily handled functions centerTrajectories(), cyclePCoA(), trajectoryInternalVariation()respectively, ’s always good aware ’s going hood! addition, might ideas study cycles outside CETA/ETA framework. , please go ahead! remember approaches rely concept points, segments, external ecological states probably removed beforehand. Let’s explore outputs extractCycles() make clearer: Note , example, distance matrix returned extractCycles() describes two ecological states original distance matrix. extractCycles() duplicates ecological states shared two cycles (coming back example , January year Y+1Y+1 belongs cycle describing year YY cycle describing year Y+1Y+1). duplicated ecological states exist always internal external version. duplication allows easily, correctly, compute ETA metrics cycles , instance, distances. Whenever identify input object one class cycles, ETA functions use values cycles column substitute sites, allowing compute metrics cycles. instance distances: However, visualizing PCoA, duplicated ecological states must removed. handled dedicated function cyclePCoA(): default, function applies color gradients cycles represent time: darker cycles start time series clearer ones end. possible center cycles (instance compare shapes, irrespective positions). function centerTrajectory() recognizes cycleToyas object class cycles performs centering appropriate handling external ecological states: course centering,distances cycles go : visualization, cycles centered, duplicated ecological states longer overlap, must retained PCoA. also handled function cyclePCoA()user MUST state cycles centered:","code":"#Number of ecological states in the original distance matrix: nrow(as.matrix(dToy)) ## [1] 31 #Number of ecological states in the matrix returned by extractCycles(): nrow(as.matrix(cycleToy$d)) ## [1] 33 trajectoryDistances(cycleToy) ##           A_C1      A_C2 ## A_C2 0.5231294           ## A_C3 0.8695007 0.5047277 cyclePCoA(cycleToy,sites.colors=\"orangered\") cycleToy_cent <- centerTrajectories(cycleToy) trajectoryDistances(cycleToy_cent) ##            A_C1       A_C2 ## A_C2 0.14729156            ## A_C3 0.09448688 0.12116359 cyclePCoA(x = cycleToy_cent, sites.colors = \"orangered\", centered = TRUE)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"assessing-the-degree-of-convexity-in-cycles","dir":"Articles","previous_headings":"2. General approach of CETA","what":"2.3 Assessing the degree of convexity in cycles","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"Cycle convexity estimated using function cycleConvexity(). metric cyclical equivalent directionality non-cyclical trajectories. cycle high convexity interpreted simpler cycle low convexity. Low convexity due concavities “bends” two dimension indicative complex (nosier) cyclical dynamic. Importantly, function cycleConvexity() uses outputs extractCycles(). original full cyclical trajectory needed computation. Instead, cycleConvexity() take inputs extractCycles(): Note function returns NA first cycle. function needs associate angle internal ecological states cycles. Since first cycle starts first ecological state whole time series, associated angle computed, neither convexity cycle.","code":"cycleConvexity(xToy,                cycleDuration = cycleDurationToy) ##      A_C1      A_C2      A_C3  ##        NA 0.9914019 0.9915258"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"computing-cyclical-shifts-phenological-advances-and-delays","dir":"Articles","previous_headings":"2. General approach of CETA","what":"2.4 Computing cyclical shifts: phenological advances and delays","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"last novelty CETA provide way generalize concept phenological advances delays multidimensional data used community ecology. function computes cyclical shifts cycleShifts(). default, estimate shifts possible compute given cyclical trajectory. computation relies geometrical projection comparison ecological states interest reference cycles. computation time can long large datasets. function takes inputs extractCycles(): output gives cycleShifts() computed units input time, positive values indicating advance negative values indicating delay. columns give information exactly compared. come back output real example .","code":"cycleShifts(xToy, cycleDuration = cycleDurationToy) ##    sites dateCS timeCS timeRef timeScale cyclicalShift ## 1      A      0     20      10        10    0.06323295 ## 2      A      1     21      11        10   -0.05501887 ## 3      A      2     22      12        10   -0.21375250 ## 4      A      3     23      13        10   -0.04636286 ## 5      A      4     24      14        10    0.00000000 ## 6      A      5     15       5        10    0.25169988 ## 7      A      5     25       5        20    0.08723782 ## 8      A      5     25      15        10   -0.03541132 ## 9      A      6     16       6        10   -0.04901553 ## 10     A      7     17       7        10    0.01198407 ## 11     A      8     18       8        10   -0.24314511 ## 12     A      9     19       9        10   -0.00196457"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"summary-of-the-ceta-approach","dir":"Articles","previous_headings":"2. General approach of CETA","what":"2.5 Summary of the CETA approach","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"visual summary CETA approach:","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"about-the-data","dir":"Articles","previous_headings":"3. Real data example: Zooplankton of the North Sea 1958-2021","what":"3.1 About the data","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"data present describes zooplankton community North Sea sampled Continuous Plankton Recorder (CPR) survey. re-worked raw data provided CPR survey (DOI: 10.17031/66f12be296d70) two monthly-resolved time series commonest zooplankton taxa Northern North Sea (NNS) Southern North Sea (SNS). data processing, performed smoothing taking rolling average (month, averaged 5 values: 3 months window + corresponding month previous next years). finally Hellinger-transformed abundance data make amenable ecological diversity study. Hellinger transformation implies relative variations abundances studied . Let’s call data: northseaZoo contains three elements: Hellinger Hellinger-transformed abundances, times time expressed years (decimals actually correspond way encoding months fractions years: 1:12/12-1/24), sites describing whether community sample Northern NNS Southern SNS North Sea.","code":"data(\"northseaZoo\") names(northseaZoo) ## [1] \"Hellinger\" \"times\"     \"sites\" head(northseaZoo$times) ## [1] 1958.042 1958.125 1958.208 1958.292 1958.375 1958.458"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"get-a-dissimilarity-matrix-and-define-cyclical-trajectories","dir":"Articles","previous_headings":"3. Real data example: Zooplankton of the North Sea 1958-2021","what":"3.2 Get a dissimilarity matrix and define cyclical trajectories","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"ETA works dissimilarity matrices. first step analyzing North Sea zooplankton data go Hellinger matrix distance matrix. Luckily us, euclidean distances computed Hellinger-transformed community data yield Hellinger distances communities. can therefore use dist function base R. analyzed using ETA, distance matrix complemented information regarding sites surveys get object class trajectories using defineTrajectories().","code":"northseaZoo$Dist <- dist(northseaZoo$Hellinger) x_northseaZoo <- defineTrajectories(d = northseaZoo$Dist,                                     sites = northseaZoo$sites,                                     times = northseaZoo$times)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"visualize-the-cyclical-trajectories","dir":"Articles","previous_headings":"3. Real data example: Zooplankton of the North Sea 1958-2021","what":"3.3 Visualize the cyclical trajectories","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"now , executing code live, bear us little bit time series rather long, computer may need time display graphics compute metrics. , can use trajectoryPCoA() function display two cyclical trajectories: Things indeed seem turn present clear cycles: surprising seasonality prominent factor driving temperate zooplankton community dynamics. representation hard distinguish clear patterns. Let’s use CETA!","code":"trajectoryPCoA(x_northseaZoo,                traj.colors = c(\"blue\",\"red\"),                length = 0.05) legend(x=\"topleft\",col=c(\"blue\",\"red\"),pch=15,unique(northseaZoo$sites))"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"seasonal-cycles","dir":"Articles","previous_headings":"3. Real data example: Zooplankton of the North Sea 1958-2021","what":"3.4 Seasonal cycles","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"can use function extractCycles() get data format describing seasonal cycles: Let’s visualize cycles! still busy graph note data points anymore (outlier SNS far PCoA axis 2). asked extractCycles() take complete years (minEcolStates = 12). can nonetheless see recent years (clearer lines) seem moving towards negative values PCoA axis 2 suggesting shift zooplankton community composition across whole time series parts North Sea. points (printed argument print.init.points) show cycles’ starts (case January months) help interpretation: winters towards negative values PCoA 1, summers towards positive values PCoA 1. can use outputs extractCycles() contained cycleNSZoo inputs ETA function assess interesting characteristics seasonal cycles North Sea zooplankton. instance one can obtain cycle length: cycle convexity, remembering metric obtained using output extractCycles(), using inputs extractCycles(): Cycle length cycle convexity help describing shapes cycles way mirroring trajectory length directionality non-cyclical ETA. Let’s graph outputs:   Cycle lengths seems decreased 1980s convexity seems present “jump” around year 2000. previous studies CPR time series, known regime shifts occurred plankton community two periods. instance, around 2000, echinoderm larvae became seasonally dominant North Sea. possible “jump” convexity linked event, large dominance one taxa given season indeed pull cycles towards one dimension , possibly increasing cycle convexity. Let’s now look distances cycles: Just like distances ecological states, distances cycles can visualized principal coordinates analysis (PCoA) putting us “space cycles”:  can see graph Northern Southern North Sea present parallel changes seasonal dynamics maintaining differences whole time series. important change seem occurred around year 2000 agreement previous studies detected regime shift around time. know ’s fun? now two sets time-ordered “ecological states” (ecological dynamics fair) defined distance matrix. need trajectory analysis. can thus perform call “second-stage” trajectory analysis using distance cycles distance matrix:  However, perhaps best use concept second-stage trajectory analysis. Indeed trajectories fact similar trajectories obtained simply joining center cycles cycles (shown ). second-stage trajectory analysis may precious used dissimilarities centered cycles : centering cycles trajectories describe change seasonal dynamics irrespective position (.e. average community composition cycles), focusing analysis change shape size cycles.","code":"cyclesNSZoo <- extractCycles(x_northseaZoo,                              cycleDuration = 1,                              minEcolStates = 12) #Note that we use here a cycleDuration of 1 (everything is expressed in years), #we also use the minEcolStates argument to say that we want to only keep cycles that #have at least 12 ecological states: In our case this is as complete as it gets cyclePCoA(cyclesNSZoo,           sites.colors = c(\"blue\",\"red\"),           length = 0.05,           print.init.points = TRUE) legend(x=\"topleft\",col=c(\"blue\",\"red\"),pch=15,unique(northseaZoo$sites)) cyclesZooLengths <- trajectoryLengths(cyclesNSZoo) cyclesZooConv <- cycleConvexity(x_northseaZoo,                                   cycleDuration = 1,                                   minEcolStates = 12) #First let's build some broad descriptive statistics for individual cycles: what year, and what site? yearCycles <- floor(tapply(cyclesNSZoo$metadata$times,cyclesNSZoo$metadata$cycles,min)) sitesCycles <- tapply(cyclesNSZoo$metadata$sites,cyclesNSZoo$metadata$cycles,unique)  #Doing some reordering yearCycles <- yearCycles[unique(cyclesNSZoo$metadata$cycles)] sitesCycles <- sitesCycles[unique(cyclesNSZoo$metadata$cycles)]  #put all descriptors together StatCyclesZoo <- data.frame(sitesCycles,yearCycles,cyclesZooLengths$Path,cyclesZooConv) SNScycles <- subset(StatCyclesZoo,sitesCycles==\"SNS\") NNScycles <- subset(StatCyclesZoo,sitesCycles==\"NNS\")  #put that in the format of a complete time serie (recreating the holes if any) rownames(SNScycles) <- SNScycles$yearCycles rownames(NNScycles) <- NNScycles$yearCycles  SNScycles <- SNScycles[as.character(1958:2021),] NNScycles <- NNScycles[as.character(1958:2021),] #First figure: Lengths plot(SNScycles$yearCycles,SNScycles$cyclesZooLengths.Path,type=\"l\",las=1,ylab=\"Cycle lengths\",xlab=\"Years\",ylim=c(2.5,5),col=\"red\") points(NNScycles$yearCycles,NNScycles$cyclesZooLengths.Path,type=\"l\",col=\"blue\") #Second figure: Convexity plot(SNScycles$yearCycles,SNScycles$cyclesZooConv,type=\"l\",las=1,ylab=\"Cycle convexity\",xlab=\"Years\",ylim=c(0.25,0.5),col=\"red\") points(NNScycles$yearCycles,NNScycles$cyclesZooConv,type=\"l\",col=\"blue\") cyclesZooDistances <- trajectoryDistances(cyclesNSZoo) library(ape) PCoAZoo <- pcoa(cyclesZooDistances) colPoints <- c(\"red\",\"blue\") names(colPoints) <- c(\"SNS\",\"NNS\") plot(PCoAZoo$vectors[,1:2],asp=1,col=NA,      xlab=paste(\"PCoA 1 (\",round(PCoAZoo$values$Relative_eig[1]*100,2),\" %)\",sep=\"\"),      ylab=paste(\"PCoA 2 (\",round(PCoAZoo$values$Relative_eig[2]*100,2),\" %)\",sep=\"\")) text(PCoAZoo$vectors[,1:2],as.character(yearCycles),col=colPoints[sitesCycles]) legend(x=\"topleft\",col=c(\"blue\",\"red\"),pch=15,unique(northseaZoo$sites)) x_second_stage <- defineTrajectories(d = cyclesZooDistances,                                      sites = sitesCycles,                                      surveys = yearCycles) trajectoryPCoA(x_second_stage,                traj.colors=c(\"blue\",\"red\"),                length=0.05) legend(x=\"topleft\",col=c(\"blue\",\"red\"),pch=15,unique(northseaZoo$sites)) #we first center the cycles centered_cyclesNSZoo <- centerTrajectories(cyclesNSZoo)  #then compute distances between centered cycles centered_cyclesZooDistances <- trajectoryDistances(centered_cyclesNSZoo)  #before finally making it a trajectory object x_second_stage_centered <- defineTrajectories(d = centered_cyclesZooDistances,                                               sites = sitesCycles,                                               surveys = yearCycles) #and make a plot: trajectoryPCoA(x_second_stage_centered,                traj.colors=c(\"blue\",\"red\"),                length=0.05) legend(x=\"topleft\",col=c(\"blue\",\"red\"),pch=15,unique(northseaZoo$sites))"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"fixed-date-trajectories-1","dir":"Articles","previous_headings":"3. Real data example: Zooplankton of the North Sea 1958-2021","what":"3.5 Fixed-date trajectories","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"Let’s now look fixed-date trajectories. First prepare data using extractFixedDateTrajectories(): can visualize fixed date trajectories using dedicated function fixedDateTrajectoryPCoA(): Hum, big dataset, clearest graph! Let’s look summary metrics instead. cycles, can compute shape metrics fixed-date trajectories: put convenient dataframe: graphing :   tendency fixed-date trajectories high directionality low length summer months conversely winter. likely sampling effect. Although sampling effort rather continuous throughout year CPR data, winter zooplankton communities less abundant making measured composition stochastic. reflected noisier fixed-date trajectories winter. Nonetheless, metric peculiar interest fixed-date trajectories might convergence: Let’s now visualize SNS: NNS: graphs, blue indicates divergence red indicates convergence fixed date tajectories. part North Sea, see convergence spring summer months divergence winter month summer months. One possible interpretation summers winters getting contrasted.","code":"fdtrajNSZoo <- extractFixedDateTrajectories(x_northseaZoo,                                             cycleDuration = 1,                                             namesFixedDate =                              c(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\")) fixedDateTrajectoryPCoA(fdtrajNSZoo,                         sites.lty=c(1,2)) fdtrajZooLengths <- trajectoryLengths(fdtrajNSZoo) fdtrajZooDir <- trajectoryDirectionality(fdtrajNSZoo) #descriptive stats monthFDT <- tapply(fdtrajNSZoo$metadata$dates,fdtrajNSZoo$metadata$fdT,min) sitesFDT <- tapply(fdtrajNSZoo$metadata$sites,fdtrajNSZoo$metadata$fdT,unique)  #reordering monthFDT <- monthFDT[unique(fdtrajNSZoo$metadata$fdT)] sitesFDT <- sitesFDT[unique(fdtrajNSZoo$metadata$fdT)]  #put all descriptors together StatFDTZoo <- data.frame(sitesFDT,monthFDT,fdtrajZooLengths$Path,fdtrajZooDir) SNSfdT <- subset(StatFDTZoo,sitesFDT==\"SNS\") NNSfdT <- subset(StatFDTZoo,sitesFDT==\"NNS\")  #put them in month order SNSfdT <- SNSfdT[order(SNSfdT$monthFDT),] NNSfdT <- NNSfdT[order(NNSfdT$monthFDT),]  #and put the month in a convenient format: SNSfdT$monthFDT <- SNSfdT$monthFDT*12+0.5 NNSfdT$monthFDT <- NNSfdT$monthFDT*12+0.5 #First figure: Lengths plot(SNSfdT$monthFDT,SNSfdT$fdtrajZooLengths.Path,type=\"l\",las=1,ylab=\"Fixed-date trajectory lengths\",xlab=\"Month\",ylim=c(8,25),col=\"red\") points(NNSfdT$monthFDT,NNSfdT$fdtrajZooLengths.Path,type=\"l\",col=\"blue\") #Second figure: Directionality plot(SNSfdT$monthFDT,SNSfdT$fdtrajZooDir,type=\"l\",las=1,ylab=\"Fixed-date trajectory directionality\",xlab=\"Years\",ylim=c(0.36,0.45),col=\"red\") points(NNSfdT$monthFDT,NNSfdT$fdtrajZooDir,type=\"l\",col=\"blue\") #We will do it for the two sites (NNS and SNS) separately, so lets pull them apart SNSfdtraj <- subsetTrajectories(fdtrajNSZoo,site_selection = \"SNS\") NNSfdtraj <- subsetTrajectories(fdtrajNSZoo,site_selection = \"NNS\")  #Then we need to keep only the years during which the fixed-date trajectories all have associated ecological states (this is because we want to perform a symmetric convergence test) selecSNS <- as.numeric(names(which(table(SNSfdtraj$metadata$times-SNSfdtraj$metadata$dates)==12))) selecNNS <- as.numeric(names(which(table(NNSfdtraj$metadata$times-NNSfdtraj$metadata$dates)==12)))  #change the distance matrices SNSfdtraj$d <- as.dist(as.matrix(SNSfdtraj$d)[floor(SNSfdtraj$metadata$times)%in%selecSNS,floor(SNSfdtraj$metadata$times)%in%selecSNS]) NNSfdtraj$d <- as.dist(as.matrix(NNSfdtraj$d)[floor(NNSfdtraj$metadata$times)%in%selecNNS,floor(NNSfdtraj$metadata$times)%in%selecNNS])  # and change metadata SNSfdtraj$metadata <- SNSfdtraj$metadata[floor(SNSfdtraj$metadata$times)%in%selecSNS,] NNSfdtraj$metadata <- NNSfdtraj$metadata[floor(NNSfdtraj$metadata$times)%in%selecNNS,]  #Now we can compute the convergence! SNSfdtrajConv <- trajectoryConvergence(SNSfdtraj,                                        type = \"pairwise.symmetric\") NNSfdtrajConv <- trajectoryConvergence(NNSfdtraj,                                        type = \"pairwise.symmetric\")  library(corrplot) ## corrplot 0.95 loaded corrplot(matrix(as.vector(SNSfdtrajConv$tau)*as.numeric(SNSfdtrajConv$p.value<0.05),12,12)) corrplot(matrix(as.vector(NNSfdtrajConv$tau)*as.numeric(NNSfdtrajConv$p.value<0.05),12,12))"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionCETA.html","id":"advances-and-delays-in-community-composition","dir":"Articles","previous_headings":"3. Real data example: Zooplankton of the North Sea 1958-2021","what":"3.6 Advances and delays in community composition","title":"Introduction to Cyclical Ecological Trajectory Analysis (CETA)","text":"last aspect CETA allows investigate cyclical shifts (e.g. advances delays similar approaches phenology). function cycleShifts(). one take bit long compute, works lot! Broadly, cycleShifts() works compute cyclicalShift comparing position ecological state interest cycle (date dateCS,time timeCS) position ecological state date reference cycle (time timeRef). two ecological states separated amount time timeScale. cycles choose compute cyclical shift can rather arbitrary instead can simply use possible comparison extract trend graph cyclicalShift timeScale. dates (.e. months year) display one graphs example:  Let’s now show trends, first SNS:  NNS:  two regions North Sea exhibit similar pattern cyclical shift: maximal advance (positive shift) spring autumn. advance computed negligible, communities take around 6 12 days advance every decade months (least term composition)!","code":"CSNSZoo <- cycleShifts(x_northseaZoo,                        cycleDuration = 1) head(CSNSZoo) ##   sites     dateCS   timeCS  timeRef timeScale cyclicalShift ## 1   NNS 0.04166667 1960.042 1959.042         1   0.025631729 ## 2   NNS 0.04166667 1961.042 1959.042         2   0.021382801 ## 3   NNS 0.04166667 1962.042 1959.042         3   0.061321501 ## 4   NNS 0.04166667 1963.042 1959.042         4   0.020736485 ## 5   NNS 0.04166667 1964.042 1959.042         5  -0.001200648 ## 6   NNS 0.04166667 1965.042 1959.042         6  -0.017846575 slopes <- integer(0) for (i in c(\"SNS\",\"NNS\")){   for (j in unique(CSNSZoo$dateCS)){     #prepare the relevant subset     subsetCS <- subset(CSNSZoo,sites==i)|>subset(dateCS==j)          #compute a slope     model <- lm((subsetCS$cyclicalShift*365)~subsetCS$timeScale)     #Note that we multiply the shift by 365 to get in days     sum <- summary(model)     slopes <- rbind(slopes,data.frame(i,j,model$coefficients[2]))          if (i==\"NNS\"&j==unique(CSNSZoo$dateCS)[5]){       plot(x=subsetCS$timeScale,y=subsetCS$cyclicalShift*365,ylim=c(-182.5,182.5),        col=rgb(0,0,0,0.2),        las=1,        pch=16,        xlab=\"Time scale (Years)\",        ylab=\"Seasonal offset (days)\",        main=\"Cyclical shifts for May in NNS\")       abline(h=0)       abline(model,lwd=2,col=\"orangered\")       moys <- tapply(subsetCS$cyclicalShift*365,subsetCS$timeScale,mean)       points(x=as.numeric(names(moys)),y=moys,pch=21,type=\"b\",bg=\"dodgerblue2\",cex=1.2)     }   } } colnames(slopes) <- c(\"sites\",\"month\",\"slope\") plot(x=slopes$month[slopes$sites==\"SNS\"]*12+0.5,      y=slopes$slope[slopes$sites==\"SNS\"]*10,      las=1,type=\"b\",      ylab=\"Cyclical shift in SNS (days/decade)\",      xlab=\"Month\") #note the multiplication by ten to get a slope in days per decade abline(h=0) plot(x=slopes$month[slopes$sites==\"NNS\"]*12+0.5,      y=slopes$slope[slopes$sites==\"NNS\"]*10,      las=1,type=\"b\",      ylab=\"Cyclical shift in NNS (days/decade)\",      xlab=\"Month\") #note the multiplication by ten to get a slope in days per decade abline(h=0)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"1. About this vignette","title":"Introduction to Ecological Quality Assessment (EQA)","text":"vignette illustrates ecological applications included Sturbois et al. (2023) presentation Ecological Quality Assessment (EQA) framework. vignette illustrates conduct Ecological Quality Assessment state-based trajectory-based variants, display results graphically. two data sets used vignette included ecotraj package reproducibility.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"loading-libraries","dir":"Articles","previous_headings":"","what":"2. Loading libraries","title":"Introduction to Ecological Quality Assessment (EQA)","text":"First , load libraries required examples, including ecotraj:","code":"library(ecotraj) ## Loading required package: Rcpp library(vegan) ## Loading required package: permute library(vegclust) library(ape) library(ggplot2) library(reshape2)"},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"context","dir":"Articles","previous_headings":"3. Heathland conservation status in Landes et Marais de Glomel","what":"3.1 Context","title":"Introduction to Ecological Quality Assessment (EQA)","text":"nature reserve Landes et Marais de Glomel (Brittany, France) composed temperate Atlantic wet heaths whose reference state commonly considered dominated plant communities associated acid, nutrient poor soils least seasonally water logged dominated Erica tetralix E. ciliaris. habitat considered community interest part European directive conservation natural habitats wild fauna flora (97/62/CEE). definition reference envelope, surveys integrated variability reference states youngest early senescent stages, based expert assessment respect European Directive (97/62/CEE) requirements.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"loading-data","dir":"Articles","previous_headings":"3. Heathland conservation status in Landes et Marais de Glomel","what":"3.2 Loading data","title":"Introduction to Ecological Quality Assessment (EQA)","text":"data set consists 23 rows (stations) 46 columns (species). percent cover values derived Braun-Blanquet ordinal scale estimated 43 species vascular plants. first five stations (rows) used define reference envelope, next 18 stations (rows) conservation status assessed.","code":"data(glomel) #Showing a first lines /columns subset head(glomel[,1:8]) ##    ID   Ref Calluna vulgaris Erica ciliaris Erica tetralix Ulex gallii ## 2  1A  TRUE             17.5              1           37.5        17.5 ## 4  1B  TRUE              5.0              0           37.5         5.0 ## 6  1C  TRUE              0.0              0           17.5        37.5 ## 8  5A  TRUE             37.5              0           17.5         5.0 ## 10 13  TRUE             37.5              0           17.5         1.0 ## 12  2 FALSE              5.0              0           37.5         5.0 ##    Molinia caerulea Betula pubescens ## 2              37.5              1.0 ## 4              37.5              0.0 ## 6              37.5              0.0 ## 8              37.5              0.5 ## 10             37.5              5.0 ## 12             37.5              1.0"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"ecological-quality-assessment","dir":"Articles","previous_headings":"3. Heathland conservation status in Landes et Marais de Glomel","what":"3.3 Ecological Quality Assessment","title":"Introduction to Ecological Quality Assessment (EQA)","text":"first create compositional data matrix, extracting species data initial data table: Using compositional data, can use function vegdist() package vegan calculate Bray Curtis distances ecological (community) states: distance matrix glomel_bc defines multivariate space represents resemblance ecological states. conduct EQA, also need define conservation targets. Column Ref glomel identifies stations considered reference. define state reference envelope using reference station IDs follows: now ready compare assessed stations respect state reference envelope using function compareToStateEnvelope(): Function compareToStateEnvelope() returns SquaredDist, squared distance envelope’s centroid. squared distances envelope averaged reference points defines variability envelope: value equal call function stateEnvelopeVariability() : Function compareToStateEnvelope() also returns Q statistic, defines quality tested stations according resemblance set stations used reference. Q comprised 0 (lowest quality) 1 (highest quality). can transform Q values qualitative assessment using: assessment 18 tested stations :","code":"glomel_comp <- as.matrix(glomel[,!(names(glomel) %in% c(\"ID\", \"Ref\"))]) rownames(glomel_comp) <- glomel$ID  dim(glomel_comp) ## [1] 23 43 glomel_bc <- vegan::vegdist(glomel_comp, method = \"bray\") glomel_env <- glomel$ID[glomel$Ref] glomel_assess <- compareToStateEnvelope(glomel_bc, glomel_env, m=1.7, distances_to_envelope = TRUE) head(glomel_assess) ##   Observation Envelope SquaredDist         Q ## 1          1A     TRUE  0.02104178 1.0000000 ## 2          1B     TRUE  0.05446580 0.8639151 ## 3          1C     TRUE  0.07191196 0.6766241 ## 4          5A     TRUE  0.02678193 1.0000000 ## 5          13     TRUE  0.05061912 0.9155838 ## 6           2    FALSE  0.07102358 0.6845973 mean(glomel_assess$SquaredDist[glomel_assess$Envelope]) ## [1] 0.04496412 stateEnvelopeVariability(glomel_bc, glomel_env) ## [1] 0.04496412 glomel_assess$Status<-c(ifelse(glomel_assess$Q>=0.5,\"Inside\", \"Outside\")) glomel_assess[!glomel_assess$Envelope,] ##    Observation Envelope SquaredDist          Q  Status ## 6            2    FALSE  0.07102358 0.68459732  Inside ## 7           3A    FALSE  0.09004209 0.54102739  Inside ## 8           3B    FALSE  0.01507552 1.00000000  Inside ## 9           3C    FALSE  0.08679386 0.56199052  Inside ## 10          5B    FALSE  0.10952585 0.43788104 Outside ## 11          6A    FALSE  0.30475266 0.12202019 Outside ## 12          6C    FALSE  0.09839341 0.49249490 Outside ## 13          6D    FALSE  0.37376291 0.09258589 Outside ## 14          7A    FALSE  0.28640532 0.13258805 Outside ## 15          8A    FALSE  0.15700422 0.28705464 Outside ## 16          8B    FALSE  0.18477585 0.23445116 Outside ## 17          8C    FALSE  0.44104160 0.07380889 Outside ## 18           9    FALSE  0.19654729 0.21679845 Outside ## 19          10    FALSE  0.05418610 0.86752635  Inside ## 20          11    FALSE  0.07143566 0.68088087  Inside ## 21          12    FALSE  0.01703895 1.00000000  Inside ## 22         14A    FALSE  0.06365289 0.75670696  Inside ## 23         14B    FALSE  0.19611040 0.21741369 Outside"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"representing-eqa-results-graphically","dir":"Articles","previous_headings":"3. Heathland conservation status in Landes et Marais de Glomel","what":"3.4 Representing EQA results graphically","title":"Introduction to Ecological Quality Assessment (EQA)","text":"represent results graphical way, start conducting Principal Coordinates Analysis (PCoA) using package ape: can use function biplot() package ape show ordination stations species projected arrows:  generate different representation, first get coordinates stations two first dimensions PCoA copy assessment data frame: use package ggplot achieve nicer representation assessment. Symbol colors used illustrate stations achieve conservation objectives (green) achieve (red). size dots represents squared distance centroid state reference envelope:","code":"pcoa_glom<-ape::pcoa(glomel_bc) biplot(pcoa_glom, glomel_comp) PCOA_DIM1_2 <- pcoa_glom[[\"vectors\"]][,1:2] glomel_assess$Dim1<-PCOA_DIM1_2[,1] glomel_assess$Dim2<-PCOA_DIM1_2[,2]  head(glomel_assess) ##   Observation Envelope SquaredDist         Q Status       Dim1        Dim2 ## 1          1A     TRUE  0.02104178 1.0000000 Inside -0.2185262  0.05500827 ## 2          1B     TRUE  0.05446580 0.8639151 Inside -0.1897143  0.19276850 ## 3          1C     TRUE  0.07191196 0.6766241 Inside -0.1123913  0.02290741 ## 4          5A     TRUE  0.02678193 1.0000000 Inside -0.1842064 -0.14315651 ## 5          13     TRUE  0.05061912 0.9155838 Inside -0.1594965 -0.17397305 ## 6           2    FALSE  0.07102358 0.6845973 Inside -0.1840068  0.20520893 p<-ggplot(glomel_assess,           mapping=aes(x=Dim1,y=Dim2,size=SquaredDist, color=Status, shape=Status))+   geom_point()+   scale_colour_manual(values=c(\"#00BFC4\", \"#F8766D\"))+   geom_text(glomel_assess,              mapping=aes(x=Dim1,y=Dim2,label=Observation),             hjust=-0.3, vjust=-0.3,size=2.5, color=\"Black\")+   xlab(expression(\"PCoA1 (27.7%)\"))+   ylab(expression(\"PCoA2 (13.7%)\"))  p<-p + theme_minimal()+   theme(     # Hide some graphical elements     panel.border = element_blank(),     panel.grid.major = element_blank(),     panel.grid.minor = element_blank(),     axis.line = element_line(colour = \"black\"))  p"},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"context-1","dir":"Articles","previous_headings":"4. Impact of fishing activities on marine habitats","what":"4.1 Context","title":"Introduction to Ecological Quality Assessment (EQA)","text":"used experimental data set built Tauran et al. (2020) study impact fishing dredges varying fishing pressures maerl beds, bay Brest (Brittany, France). study follows --Control-Impact design (Stewart-Oaten et al., 1986). Briefly, three control stations surveyed compared five treatment stations characterized different fishing dredges pressure levels (Tauran et al., 2020). Three fishing dredges compared: (1) clam dredge (CD), 70 90 kg, 1.5 m wide, 40 teeth 11 cm ; (2) queen scallop dredge (QSD), 120 kg,1.8 m wide, blade; (3) king scallop dredge (KSD), 190 kg, 1.8 m wide, 18 teeth 10 cm every 9 cm. Pressure levels measured number dredge tows performed zone experimental dredging session: 0 (.e. control), 10, 30 dredge tows. Samples collected April 2016 April2017. Session 1 sampled just experimental dredging (t0); session 2 t0 + 1 week; session 3 t0 + 1 month session 4 t0 + 12 months. Nine replicates sampled treatments sessions Smith-McIntyre grab (0.1m2). Abundance data pooled treatment levels (.e. CTRL1, CTRL2, CTRL3, KSD_10, CD_10, CD_30, QSD_10 QSD_30; Appendix_D).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"loading-data-1","dir":"Articles","previous_headings":"4. Impact of fishing activities on marine habitats","what":"4.2 Loading data","title":"Introduction to Ecological Quality Assessment (EQA)","text":"data set 32 observations (.e. treatments*surveys) 250 species. begin loading data:","code":"data(glenan) #Showing a first lines /columns subset head(glenan[,1:6]) ##          Abundance.Abludomelita gladiosa Abundance.Abra alba ## CD_10-S1                              60                  15 ## CD_10-S2                              54                  14 ## CD_10-S3                              42                  15 ## CD_10-S4                              45                   8 ## CD_30-S1                              58                  18 ## CD_30-S2                              39                  19 ##          Abundance.Acanthochitona fascicularis Abundance.Achelia hispida ## CD_10-S1                                     2                         0 ## CD_10-S2                                     1                         0 ## CD_10-S3                                     0                         0 ## CD_10-S4                                     0                         0 ## CD_30-S1                                     4                         0 ## CD_30-S2                                     3                         0 ##          Abundance.Alcyonidium diaphanum Abundance.Alentia gelatinosa ## CD_10-S1                               0                            1 ## CD_10-S2                               0                            0 ## CD_10-S3                               0                            0 ## CD_10-S4                               0                            0 ## CD_30-S1                               0                            0 ## CD_30-S2                               0                            0"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"definition-of-the-ressemblance-space","dir":"Articles","previous_headings":"4. Impact of fishing activities on marine habitats","what":"4.3 Definition of the ressemblance space","title":"Introduction to Ecological Quality Assessment (EQA)","text":"separate columns identify treatment surveys. also extract compositional data log-transform initially performed Tauran et al. (2020). Using compositional data, can use function vegdist() package vegan calculate Bray Curtis distances ecological (community) states: Like first example, distance matrix grab_bc defines multivariate space represents resemblance ecological states maerl beds.","code":"#vector Treatment Treatment<-glenan$Treatment  #vector Surveys Surveys<-glenan$Surveys #log transformation grab_comp<-log1p(glenan[,-c(251:252)]) grab_bc <- vegan::vegdist(grab_comp, method = \"bray\")"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"state-based-eqa","dir":"Articles","previous_headings":"4. Impact of fishing activities on marine habitats","what":"4.4 State-based EQA","title":"Introduction to Ecological Quality Assessment (EQA)","text":"addition resemblance space, conduct EQA need define conservation targets. case, define states conforming state reference envelope manually among observation IDs: now ready compare assessed stations respect state reference envelope using function compareToStateEnvelope(): can check average squared distances envelope equal envelope variability: derive qualitative assessment Q values: represent results state-based EQA two first dimensions Principal Coordinates Analysis:  Since dealing temporal data, can create bar plot showing evolution squared distance centroid state reference envelope study period treatment:  addition, can create heatmap showing evolution distance control dredged stations experimentation:","code":"#Definition of the state reference envelope ID<-rownames(grab_comp) grab_env <- ID[c(1,9:20,21,25,29)] #Comparing assessed stations with respect to the state reference envelope grab_assess <- compareToStateEnvelope(grab_bc, grab_env, m=1.5,                                        distances_to_envelope = TRUE) mean(grab_assess$SquaredDist[grab_assess$Envelope]) ## [1] 0.0196958 stateEnvelopeVariability(grab_bc, grab_env) ## [1] 0.0196958 grab_assess$Status<-c(ifelse(grab_assess$Q>=0.5,\"Inside\", \"Outside\"))  grab_assess$Status[c(1,9:20,21,25,29)]<-\"Reference\"  grab_assess$Status<- factor(grab_assess$Status, levels = c(\"Reference\",\"Inside\",\"Outside\"))  head(grab_assess) ##   Observation Envelope SquaredDist         Q    Status ## 1    CD_10-S1     TRUE  0.02454948 0.7832098 Reference ## 2    CD_10-S2    FALSE  0.01397410 1.0000000    Inside ## 3    CD_10-S3    FALSE  0.03255742 0.5358405    Inside ## 4    CD_10-S4    FALSE  0.02883204 0.6363532    Inside ## 5    CD_30-S1    FALSE  0.02021846 0.9738153    Inside ## 6    CD_30-S2    FALSE  0.03232080 0.5415827    Inside #Get coordinates of stations in the two first dimensions of the PCoA pcoa<-ape::pcoa(grab_bc) PCOA_DIM1_2<-pcoa[[\"vectors\"]][,1:2] grab_assess$Dim1<-PCOA_DIM1_2[,1] grab_assess$Dim2<-PCOA_DIM1_2[,2]  #Information about Treatment and Surveys  grab_assess$Treatment<-Treatment grab_assess$Surveys<-Surveys   p<-ggplot(grab_assess, aes(x=Dim1, y=Dim2, group=Status)) +   geom_point(aes(shape=Status, color=Status, size=SquaredDist))+   scale_shape_manual(values=c(1, 16, 17))+   scale_color_manual(values=c(\"#00BFC4\", \"#00BFC4\", \"#F8766D\"))+   geom_path(aes(x=Dim1,y=Dim2,group=Treatment),color=\"grey\", arrow = arrow(length = unit(0.03, \"cm\")))+   geom_text(grab_assess,mapping=aes(x=Dim1,y=Dim2,label=ID),hjust=-0.3, vjust=-0.3,size=2.5, color=\"Black\")+   xlab(expression(\"PCoA1 (13.3%)\"))+   ylab(expression(\"PCoA2 (9.9%)\"))  p<-p+ theme_minimal()+   theme(     # Hide some graphical elements     panel.border = element_blank(),     panel.grid.major = element_blank(),     panel.grid.minor = element_blank(),     axis.line = element_line(colour = \"black\"))  p grab_assess$Treatment<-factor(grab_assess$Treatment,c(\"CTRL1\",\"CTRL2\",\"CTRL3\",                                                       \"CD_10\",\"CD_30\",                                                        \"QSD_10\",\"QSD_30\",                                                       \"KSD_10\")) grab_assess$Status<-c(ifelse(grab_assess$Q>=0.5,\"Inside\", \"Outside\")) grab_assess$Status<- factor(grab_assess$Status, levels = c(\"Inside\",\"Outside\"))  ggplot(grab_assess, aes(x=Surveys, y=SquaredDist, color=Status, fill=Status)) +    geom_bar(stat = \"identity\",width=0.5)+   scale_colour_manual(values=c(\"#00BFC4\", \"#F8766D\"))+   scale_fill_manual(values=c(\"#00BFC4\", \"#F8766D\"))+   scale_y_continuous(\"Squared distance to the reference envelope\")+   theme_minimal()+   facet_wrap(~Treatment)+   theme(axis.text.x = element_text(angle=90)) grabbc_sel <- melt(as.matrix(grab_bc),rnames = c(\"row\", \"col\"))  #selection of the observation of interest (i.e. control stations for heat map row, and dredged stations for heat map column) grabbc_sel<-grabbc_sel[!grabbc_sel$Var2 %in% c(\"CTRL1-S1\",\"CTRL2-S1\",\"CTRL3-S1\",\"CTRL4-S1\",                                                 \"CTRL1-S2\",\"CTRL2-S2\",\"CTRL3-S2\",\"CTRL4-S2\",                                                 \"CTRL1-S3\",\"CTRL2-S3\",\"CTRL3-S3\",\"CTRL4-S3\",                                                 \"CTRL1-S4\",\"CTRL2-S4\",\"CTRL3-S4\",\"CTRL4-S4\"),]     grabbc_sel<-grabbc_sel[grabbc_sel$Var1 %in% c(\"CTRL1-S1\",\"CTRL2-S1\",\"CTRL3-S1\",\"CTRL4-S1\",                                                \"CTRL1-S2\",\"CTRL2-S2\",\"CTRL3-S2\",\"CTRL4-S2\",                                                \"CTRL1-S3\",\"CTRL2-S3\",\"CTRL3-S3\",\"CTRL4-S3\",                                                \"CTRL1-S4\",\"CTRL2-S4\",\"CTRL3-S4\",\"CTRL4-S4\"),]  grabbc_sel$Var1<-factor(grabbc_sel$Var1,                         c(\"CTRL1-S1\",\"CTRL2-S1\",\"CTRL3-S1\",\"CTRL4-S1\",                           \"CTRL1-S2\",\"CTRL2-S2\",\"CTRL3-S2\",\"CTRL4-S2\",                           \"CTRL1-S3\",\"CTRL2-S3\",\"CTRL3-S3\",\"CTRL4-S3\",                           \"CTRL1-S4\",\"CTRL2-S4\",\"CTRL3-S4\",\"CTRL4-S4\"))  grabbc_sel$Var2<-factor(grabbc_sel$Var2,                         c(\"KSD_10-S1\",\"CD_10-S1\",\"CD_30-S1\",\"QSD_10-S1\",\"QSD_30-S1\",                           \"KSD_10-S2\",\"CD_10-S2\",\"CD_30-S2\",\"QSD_10-S2\",\"QSD_30-S2\",                           \"KSD_10-S3\",\"CD_10-S3\",\"CD_30-S3\",\"QSD_10-S3\",\"QSD_30-S3\",                           \"KSD_10-S4\",\"CD_10-S4\",\"CD_30-S4\",\"QSD_10-S4\",\"QSD_30-S4\"))  ggplot(grabbc_sel, aes(x=Var2, y=Var1, fill=value)) +    geom_raster() +    scale_fill_viridis_c()+   theme(axis.text.x=element_text(angle = 90, hjust = 0))"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"trajectory-based-eqa","dir":"Articles","previous_headings":"4. Impact of fishing activities on marine habitats","what":"4.5 Trajectory-based EQA","title":"Introduction to Ecological Quality Assessment (EQA)","text":"One nice features EQA possibility conduct quality assessment taking account ecosystem dynamics. case, conservation target defined set trajectories conforming trajectory reference envelope, case three control stations: now ready compare assessed trajectories (subject treatment) respect trajectory reference envelope using function compareToTrajectoryEnvelope(): can also check average squared distances envelope equal envelope variability: , can create bar plot showing squared distance centroid trajectory reference envelope study period treatment:","code":"#Definition of the trajectory reference envelope  grab_dynenv<-c(\"CTRL1\",\"CTRL2\",\"CTRL3\") ##Comparing assessed trajectories with respect to the trajectory reference envelope grab_dynassess <- compareToTrajectoryEnvelope(grab_bc,Treatment, grab_dynenv,                                                m=1.5, distances_to_envelope = TRUE) mean(grab_dynassess$SquaredDist[grab_dynassess$Envelope]) ## [1] 0.009123776 trajectoryEnvelopeVariability(grab_bc, sites = Treatment, envelope = grab_dynenv) ## [1] 0.009123776 grab_dynassess$Treatment<-factor(grab_dynassess$Site,c(\"CTRL1\",\"CTRL2\",\"CTRL3\",                                                       \"CD_10\",\"CD_30\",                                                        \"QSD_10\",\"QSD_30\",                                                       \"KSD_10\")) grab_dynassess$Status<-c(ifelse(grab_dynassess$Q>=0.5,\"Inside\", \"Outside\")) grab_dynassess$Status<- factor(grab_dynassess$Status, levels = c(\"Inside\",\"Outside\"))  ggplot(grab_dynassess, aes(x=reorder(Treatment, SquaredDist),                             y=SquaredDist, color=Status, fill=Status)) +    geom_bar(stat = \"identity\",width=0.5)+   scale_colour_manual(values=c(\"#00BFC4\", \"#F8766D\"))+   scale_fill_manual(values=c(\"#00BFC4\", \"#F8766D\"))+   scale_y_continuous(\"Squared distance to the reference envelope\")+   theme_minimal()+   theme(axis.text.x = element_text(angle=90))"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionEQA.html","id":"references","dir":"Articles","previous_headings":"","what":"5. References","title":"Introduction to Ecological Quality Assessment (EQA)","text":"Sturbois, ., De Cáceres, M., Bifolchi, ., Bioret, F., Boyé, ., Gauthier, O., Grall, J., Grémare, ., Labrune, C., Robert, ., Schaal, G., Desroy, N. (2023). Ecological Quality Assessment: general multivariate framework report quality ecosystems dynamics respect reference conditions. Ecosphere 14, e4726. https://doi.org/10.1002/ecs2.4726 Tauran, ., Dubreuil, J., Guyonnet, B., Grall, J., 2020. Impact fishing gears fishing intensities maerl beds: experimental approach. Journal Experimental Marine Biology Ecology 533, 151472. https://doi.org/10.1016/j.jembe.2020.151472","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"what-is-ecological-trajectory-analysis","dir":"Articles","previous_headings":"1. Introduction","what":"1.1 What is Ecological Trajectory Analysis?","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"Ecological Trajectory Analysis (ETA) framework analyze dynamics ecological entities (e.g. individuals, communities ecosystems). key aspect ETA dynamics represented using trajectories chosen multivariate space (noted using Ω\\Omega). trajectories analyzed compared geometrically. ETA framework presented community ecology De Cáceres et al (2019), extended new metrics visualisation modes Sturbois et al. (2021a). Procedures trajectory analysis can applied data beyond community data tables. example, framework applied stable isotope data Sturbois et al. (2021b). Since can applied multiple target entities multivariate spaces, now refer framework Ecological Trajectory Analysis provide package ecotraj offers set functions calculate metrics produce plots.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"about-this-vignette","dir":"Articles","previous_headings":"1. Introduction","what":"1.2 About this vignette","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"vignette learn conduct ETA using different package functions. vignette describe study trajectories three target entities (.e. sites, individuals, communities, etc.) surveyed four times . use small data set trajectories occur space two dimensions, geometric calculations can followed easily. last section real example presented. First , load ecotraj:","code":"library(ecotraj) ## Loading required package: Rcpp"},{"path":[]},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"trajectory-data-items","dir":"Articles","previous_headings":"2. Trajectory objects > 2.1 Trajectory data","what":"2.1.1 Trajectory data items","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"specify dynamics set target entities, following data items need distinguished: set ecological states (.e. coordinates space Ω\\Omega) implicitly described using distance matrix D\\mathrm{D}. character vector specifying ecological entity (.e. sampling unit, community, ecosystem individual) corresponding ecological state. Trajectory names identified unique values entities. integer vector specifying survey (.e. census) corresponding observation ecological state. vector important survey order. provided, order assumed incremental repetition entity value. numeric vector specifying survey time corresponding observation ecological state. needed metrics trajectory speed. ETA, target entities need surveyed synchronously number times.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"example-data-set","dir":"Articles","previous_headings":"2. Trajectory objects > 2.1 Trajectory data","what":"2.1.2 Example data set","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"Let us first define vectors describe ecological entity survey observation: define matrix whose coordinates correspond set ecological states observed. number rows matrix equal length vectors entities surveys. simplicity, assume ecological state space Ω\\Omega two dimensions: matrix Euclidean distances dd ecological states Ω\\Omega : ETA based analysis information distance matrix D=[d]\\mathrm{D} = [d]. Therefore, require explicit coordinates. advantage allows analysis conducted arbitrary metric (semi-metric) spaces. choice dd left user depend problem hand.","code":"entities <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") surveys <- c(1,2,3,4,1,2,3,4,1,2,3,4) xy<-matrix(0, nrow=12, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 xy[5:6,2] <- xy[1:2,2] xy[7,2]<-1.5 xy[8,2]<-2.0 xy[5:6,1] <- 0.25 xy[7,1]<-0.5 xy[8,1]<-1.0 xy[9:10,1] <- xy[5:6,1]+0.25 xy[11,1] <- 1.0 xy[12,1] <-1.5 xy[9:10,2] <- xy[5:6,2] xy[11:12,2]<-c(1.25,1.0) xy ##       [,1] [,2] ##  [1,] 0.00 0.00 ##  [2,] 0.00 1.00 ##  [3,] 0.00 2.00 ##  [4,] 0.00 3.00 ##  [5,] 0.25 0.00 ##  [6,] 0.25 1.00 ##  [7,] 0.50 1.50 ##  [8,] 1.00 2.00 ##  [9,] 0.50 0.00 ## [10,] 0.50 1.00 ## [11,] 1.00 1.25 ## [12,] 1.50 1.00 d <- dist(xy) d ##            1         2         3         4         5         6         7 ## 2  1.0000000                                                             ## 3  2.0000000 1.0000000                                                   ## 4  3.0000000 2.0000000 1.0000000                                         ## 5  0.2500000 1.0307764 2.0155644 3.0103986                               ## 6  1.0307764 0.2500000 1.0307764 2.0155644 1.0000000                     ## 7  1.5811388 0.7071068 0.7071068 1.5811388 1.5206906 0.5590170           ## 8  2.2360680 1.4142136 1.0000000 1.4142136 2.1360009 1.2500000 0.7071068 ## 9  0.5000000 1.1180340 2.0615528 3.0413813 0.2500000 1.0307764 1.5000000 ## 10 1.1180340 0.5000000 1.1180340 2.0615528 1.0307764 0.2500000 0.5000000 ## 11 1.6007811 1.0307764 1.2500000 2.0155644 1.4577380 0.7905694 0.5590170 ## 12 1.8027756 1.5000000 1.8027756 2.5000000 1.6007811 1.2500000 1.1180340 ##            8         9        10        11 ## 2                                          ## 3                                          ## 4                                          ## 5                                          ## 6                                          ## 7                                          ## 8                                          ## 9  2.0615528                               ## 10 1.1180340 1.0000000                     ## 11 0.7500000 1.3462912 0.5590170           ## 12 1.1180340 1.4142136 1.0000000 0.5590170"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"defining-trajectories","dir":"Articles","previous_headings":"2. Trajectory objects","what":"2.2 Defining trajectories","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"perform ETA, need combine distance matrix entity/survey information single object using function defineTrajectories(): Note surveys may omitted, case surveys entity assumed ordered. function returns object (list) class trajectories contains information analysis: object contains two elements: Element d contains input distance matrix, whereas metadata data frame including information observations: Column sites identifies ecological entities (calling sites inherited notation original framework community trajectory analysis). Note columns surveys times exactly values. happens supplied vector times surveys assumed happen every time step (whatever units). Moreover, surveys vector can omitted calls defineTrajectories(). , function (correctly, case) interpret every repetition given entity corresponds new survey: Let us assume following sampling times, units years: call defineTrajectories() using information : Note x entities surveyed exact times. resulting trajectories called synchronous. contrast, xt entities surveyed different times, trajectories non-synchronous. following, use xt whenever distinction relevant.","code":"x <- defineTrajectories(d, entities, surveys) class(x) ## [1] \"trajectories\" \"list\" names(x) ## [1] \"d\"        \"metadata\" x$metadata ##    sites surveys times ## 1      1       1     1 ## 2      1       2     2 ## 3      1       3     3 ## 4      1       4     4 ## 5      2       1     1 ## 6      2       2     2 ## 7      2       3     3 ## 8      2       4     4 ## 9      3       1     1 ## 10     3       2     2 ## 11     3       3     3 ## 12     3       4     4 x <- defineTrajectories(d, entities) x$metadata ##    sites surveys times ## 1      1       1     1 ## 2      1       2     2 ## 3      1       3     3 ## 4      1       4     4 ## 5      2       1     1 ## 6      2       2     2 ## 7      2       3     3 ## 8      2       4     4 ## 9      3       1     1 ## 10     3       2     2 ## 11     3       3     3 ## 12     3       4     4 times <- c(1.0,2.2,3.1,4.2,1.0,1.5,2.8,3.9,1.6,2.8,3.9,4.3) xt <- defineTrajectories(d, entities, surveys, times) xt$metadata ##    sites surveys times ## 1      1       1   1.0 ## 2      1       2   2.2 ## 3      1       3   3.1 ## 4      1       4   4.2 ## 5      2       1   1.0 ## 6      2       2   1.5 ## 7      2       3   2.8 ## 8      2       4   3.9 ## 9      3       1   1.6 ## 10     3       2   2.8 ## 11     3       3   3.9 ## 12     3       4   4.3"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"subsetting-trajectories","dir":"Articles","previous_headings":"2. Trajectory objects","what":"2.3 Subsetting trajectories","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"point ETA, one may desire focus particular trajectories surveys. Function subsetTrajectory() allows subsetting objects class trajectories, example, can decide work trajectories second third entities (sites): can decide focus last three surveys: notice surveys renumbered (original times modified). illustrates vector surveys used indicate survey order within trajectory.","code":"x23 <- subsetTrajectories(x, site_selection = c(\"2\", \"3\")) x23 ## $d ##           1         2         3         4         5         6         7 ## 2 1.0000000                                                             ## 3 1.5206906 0.5590170                                                   ## 4 2.1360009 1.2500000 0.7071068                                         ## 5 0.2500000 1.0307764 1.5000000 2.0615528                               ## 6 1.0307764 0.2500000 0.5000000 1.1180340 1.0000000                     ## 7 1.4577380 0.7905694 0.5590170 0.7500000 1.3462912 0.5590170           ## 8 1.6007811 1.2500000 1.1180340 1.1180340 1.4142136 1.0000000 0.5590170 ##  ## $metadata ##   sites surveys times ## 1     2       1     1 ## 2     2       2     2 ## 3     2       3     3 ## 4     2       4     4 ## 5     3       1     1 ## 6     3       2     2 ## 7     3       3     3 ## 8     3       4     4 ##  ## attr(,\"class\") ## [1] \"trajectories\" \"list\" x23s <- subsetTrajectories(x,                             site_selection = c(\"2\", \"3\"),                             survey_selection = c(2, 3, 4)) x23s ## $d ##           1         2         3         4         5 ## 2 0.5590170                                         ## 3 1.2500000 0.7071068                               ## 4 0.2500000 0.5000000 1.1180340                     ## 5 0.7905694 0.5590170 0.7500000 0.5590170           ## 6 1.2500000 1.1180340 1.1180340 1.0000000 0.5590170 ##  ## $metadata ##   sites surveys times ## 1     2       1     2 ## 2     2       2     3 ## 3     2       3     4 ## 4     3       1     2 ## 5     3       2     3 ## 6     3       3     4 ##  ## attr(,\"class\") ## [1] \"trajectories\" \"list\""},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"displaying-trajectories","dir":"Articles","previous_headings":"2. Trajectory objects","what":"2.4 Displaying trajectories","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"begin analysis three trajectories, display ordination space, using function trajectoryPCoA(). Since Ω\\Omega two dimensions example, Principal Coordinates Analysis (PCoA) dd displays complete space:  trajectory entity ‘1’ (black arrows) made three segments length direction, trajectory entity ‘2’ (red arrows) second third segments bend shorter second segment entity ‘1’. Trajectory entity ‘3’ includes stronger change direction shorter segments. example two dimensions used Euclidean distance, plot (albeit rotated) can straightforwardly obtained using matrix xy function trajectoryPlot():  trajectoryPCoA() uses PCoA (also known classical Multidimensional Scaling) display trajectories, users can display ecosystem trajectories using ordination techniques metric Multidimensional Scaling (mMDS; see function mds package smacof) non-metric MDS (nMDS; see function metaMDS package vegan function isoMDS package MASS). Function trajectoryPlot() help drawing arrows segments represent trajectories ordination space given methods. Functions trajectoryPCoA()trajectoryPlot() can used display subset trajectories combine function subsetTrajectories():","code":"trajectoryPCoA(x, traj.colors = c(\"black\",\"red\", \"blue\"), lwd = 2,                survey.labels = T) legend(\"topright\", col=c(\"black\",\"red\", \"blue\"),         legend=c(\"Entity 1\", \"Entity 2\", \"Entity 3\"), bty=\"n\", lty=1, lwd = 2) trajectoryPlot(xy, entities, surveys, traj.colors = c(\"black\",\"red\", \"blue\"), lwd = 2,                survey.labels = T) legend(\"topright\", col=c(\"black\",\"red\", \"blue\"),         legend=c(\"Entity 1\", \"Entity 2\", \"Entity 3\"), bty=\"n\", lty=1, lwd = 2) trajectoryPCoA(subsetTrajectories(x, site_selection = c(\"2\", \"3\")),                 traj.colors = c(\"red\", \"blue\"), lwd = 2,                survey.labels = T) legend(\"topright\", col=c(\"red\", \"blue\"),         legend=c(\"Entity 2\", \"Entity 3\"), bty=\"n\", lty=1, lwd = 2)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"trajectory-metrics","dir":"Articles","previous_headings":"","what":"3. Trajectory metrics","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"One may interested studying geometric properties particular trajectories. illustrated section","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"changes-in-ecological-state","dir":"Articles","previous_headings":"3. Trajectory metrics","what":"3.1 Changes in ecological state","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"Several metrics related magnitude temporal changes state. example, one can obtain length trajectory segments total path length using function trajectoryLengths(): Since difference x xt observation times, obtain result calculating lengths xt: observation times available, may interest calculate segment trajectory speeds. One can obtain speed trajectory segments total path speed using function trajectorySpeeds(): Note units lengths speeds depend definition Ω\\Omega space , latter case, units times. Trajectory speeds affected observation times , since x times consecutive integers, segment speeds equal segment lengths (average trajectory speed). obtain different result speeds xt: Finally, one may calculate internal variation states within trajectory using trajectoryInternalVariation(): function returns (absolute relative) contribution observation internal variation, total sum squares unbiased estimation internal variance. Note example third (curved) trajectory lower internal variation, compared first second (straighter) ones.","code":"trajectoryLengths(x) ##   S1       S2        S3     Path ## 1  1 1.000000 1.0000000 3.000000 ## 2  1 0.559017 0.7071068 2.266124 ## 3  1 0.559017 0.5590170 2.118034 trajectoryLengths(xt) ##   S1       S2        S3     Path ## 1  1 1.000000 1.0000000 3.000000 ## 2  1 0.559017 0.7071068 2.266124 ## 3  1 0.559017 0.5590170 2.118034 trajectorySpeeds(x) ##   S1       S2        S3      Path ## 1  1 1.000000 1.0000000 1.0000000 ## 2  1 0.559017 0.7071068 0.7553746 ## 3  1 0.559017 0.5590170 0.7060113 trajectorySpeeds(xt) ##          S1        S2        S3     Path ## 1 0.8333333 1.1111111 0.9090909 0.937500 ## 2 2.0000000 0.4300131 0.6428243 0.781422 ## 3 0.8333333 0.5081973 1.3975425 0.784457 trajectoryInternalVariation(x) ##        ss_1      ss_2      ss_3      ss_4 internal_ss internal_variance ## 1 2.2500000 0.2500000 0.2500000 2.2500000    5.000000         1.6666667 ## 2 1.3281250 0.0781250 0.1406250 1.0156250    2.562500         0.8541667 ## 3 0.8007812 0.1757812 0.2070312 0.4257813    1.609375         0.5364583"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"changes-in-direction","dir":"Articles","previous_headings":"3. Trajectory metrics","what":"3.2 Changes in direction","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"CTA, angles measured using triplets time-ordered ecological states (pair consecutive segments example triplets). matrix D\\mathrm{D} may represent space Ω\\Omega multiple dimensions, angles calculated respect single plane. Instead, angle measured plane defined triplet. Zero angles indicate three points (e.g. two consecutive segments) straight line. larger angle value, trajectory changing direction. Mean standard deviation statistics angles calculated according circular statistics. Function trajectoryAngles() allows calculating angles consecutive segments: entity ‘1’ follows straight path, angles > 0 trajectories entity ‘2’ ‘3’, denoting change direction. case, information obtained inspecting previous plots, case Ω\\Omega many dimensions, representation correspond reduced (ordination) space hence, angles lengths plot correspond exactly functions trajectoryLengths() trajectoryAngles(), take account complete Ω\\Omega space. Angles can calculated consecutive segments four triplets ordered ecological states, whether consecutive segments (.e., points 1-2-3, 1-2-4, 1-3-4 2-3-4). done specifying =TRUE trajectoryAngles(): mean resultant length circular statistics (column rho previous result), takes values 0 1, can used assess degree homogeneity angle values take value 1 angles . approach, however, uses angular information take account length segments. measure overall directionality ecosystem trajectory (.e. path consistently follows direction Ω\\Omega ), recommend using another statistic sensitive angles segment lengths implemented function trajectoryDirectionality(): known previous plots, trajectory entity ‘2’ less straight trajectory entity ‘1’ entity ‘3’ lowest directionality value. default function computes descriptive statistic, .e. perform statistical test directionality. permutational test can performed, feature experimental needs tested recommendation.","code":"trajectoryAngles(x) ##      S1-S2    S2-S3     mean         sd       rho ## 1  0.00000  0.00000  0.00000 0.00000000 1.0000000 ## 2 26.56505 18.43495 22.50000 0.07097832 0.9974842 ## 3 63.43495 53.13010 58.28253 0.08998746 0.9959593 trajectoryAngles(x, all=TRUE) ##         A1      A2       A3       A4     mean        sd       rho ## 1  0.00000  0.0000  0.00000  0.00000  0.00000 0.0000000 1.0000000 ## 2 26.56505 36.8699 35.53768 18.43495 29.36033 0.1300790 0.9915754 ## 3 63.43495 90.0000 94.76364 53.13010 75.36015 0.3078934 0.9537066 trajectoryDirectionality(x) ##         1         2         3  ## 1.0000000 0.8274026 0.5620859"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"assessing-multiple-metrics-at-once","dir":"Articles","previous_headings":"3. Trajectory metrics","what":"3.2 Assessing multiple metrics at once","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"possible assess multiple trajectory metrics one function call trajectoryMetrics(). provide metrics apply whole trajectory path: calculate metrics xt confirm trajectory speeds affected observation times: Another function, called trajectoryWindowMetrics() calculates trajectory metrics moving windows trajectories, illustrated .","code":"trajectoryMetrics(x) ##   trajectory n t_start t_end duration   length mean_speed mean_angle ## 1          1 4       1     4        3 3.000000  1.0000000    0.00000 ## 2          2 4       1     4        3 2.266124  0.7553746   22.50000 ## 3          3 4       1     4        3 2.118034  0.7060113   58.28253 ##   directionality internal_ss internal_variance ## 1      1.0000000    5.000000         1.6666667 ## 2      0.8274026    2.562500         0.8541667 ## 3      0.5620859    1.609375         0.5364583 trajectoryMetrics(xt) ##   trajectory n t_start t_end duration   length mean_speed mean_angle ## 1          1 4     1.0   4.2      3.2 3.000000   0.937500    0.00000 ## 2          2 4     1.0   3.9      2.9 2.266124   0.781422   22.50000 ## 3          3 4     1.6   4.3      2.7 2.118034   0.784457   58.28253 ##   directionality internal_ss internal_variance ## 1      1.0000000    5.000000         1.6666667 ## 2      0.8274026    2.562500         0.8541667 ## 3      0.5620859    1.609375         0.5364583"},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"relative-positions-within-trajectories","dir":"Articles","previous_headings":"4. Comparing trajectories","what":"4.1 Relative positions within trajectories","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"Ecological states occupy position within trajectory depends total path length trajectory (see Fig. 2 De Cáceres et al. 2019). adding length segments prior given state dividing sum total length trajectory obtain relative position ecological state. Function trajectoryProjection() allows obtaining relative position ecological state trajectory. use purpose one use parameters distance matrix states indices conform trajectory, entered twice. example two example trajectories : inspect relative positions points trajectory entity ‘2’, find second third segments relative positions larger 1/3 2/3, respectively, second third segments shorter: Function trajectoryProjection() can also used perform orthogonal projection arbitrary ecological states onto given reference trajectory. example can study projection third state trajectory entity ‘2’ (.e. state 7) onto trajectory entity ‘1’ (.e. states 1 4), happens half trajectory: project points trajectory entity ‘3’ onto trajectory entity ‘1’ see curved path entity ‘3’ projects fourth point relative position second point.","code":"trajectoryProjection(d, 1:4, 1:4) ##   distanceToTrajectory segment relativeSegmentPosition ## 1                    0       1                       0 ## 2                    0       1                       1 ## 3                    0       2                       1 ## 4                    0       3                       1 ##   relativeTrajectoryPosition ## 1                  0.0000000 ## 2                  0.3333333 ## 3                  0.6666667 ## 4                  1.0000000 trajectoryProjection(d, 5:8, 5:8) ##   distanceToTrajectory segment relativeSegmentPosition ## 5                    0       1                       0 ## 6                    0       1                       1 ## 7                    0       2                       1 ## 8                    0       3                       1 ##   relativeTrajectoryPosition ## 5                  0.0000000 ## 6                  0.4412822 ## 7                  0.6879664 ## 8                  1.0000000 trajectoryProjection(d, 7, 1:4) ##   distanceToTrajectory segment relativeSegmentPosition ## 7                  0.5       2                     0.5 ##   relativeTrajectoryPosition ## 7                        0.5 trajectoryProjection(d, 9:12, 1:4) ##    distanceToTrajectory segment relativeSegmentPosition ## 9                   0.5       1                    0.00 ## 10                  0.5       2                    0.00 ## 11                  1.0       2                    0.25 ## 12                  1.5       1                    1.00 ##    relativeTrajectoryPosition ## 9                   0.0000000 ## 10                  0.3333333 ## 11                  0.4166667 ## 12                  0.3333333"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"trajectory-shifts","dir":"Articles","previous_headings":"4. Comparing trajectories","what":"4.2 Trajectory shifts","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"Sometimes different entities follow similar trajectory different speeds, observations starting different point dynamic sequence. can quantify differences using function trajectoryShifts(), internally uses orthogonal projection. illustrate function, first build small data set three linear trajectories, second third modified: can see differences graphically:  now build usual trajectories object: can check indeed third trajectory faster using: Function trajectoryShifts() allows comparing different observations reference trajectory. example can compare trajectory entities “1” “2”: see observations trajectory “2” correspond states trajectory “1” 0.5 time units later time. Surveys missing values indicate projection target state determined (reference trajectory short). can also compare trajectories “1” “3”: see shifts increase progressively, indicating faster speed trajectory “3”.","code":"#Description of entities and times entities3 <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") times3 <- c(1,2,3,4,1,2,3,4,1,2,3,4)    #Raw data table xy3<-matrix(0, nrow=12, ncol=2) xy3[2,2]<-1 xy3[3,2]<-2 xy3[4,2]<-3 xy3[5:8,1] <- 0.25 xy3[5:8,2] <- xy3[1:4,2] + 0.5 # States are all shifted with respect to entity \"1\" xy3[9:12,1] <- 0.5 xy3[9:12,2] <- xy3[1:4,2]*1.25  # 1.25 times faster than entity \"1\" trajectoryPlot(xy3, entities3,                  traj.colors = c(\"black\",\"red\", \"blue\"), lwd = 2) legend(\"topright\", col=c(\"black\",\"red\", \"blue\"),         legend=c(\"Trajectory 1\", \"Trajectory 2\", \"Trajectory 3\"), bty=\"n\", lty=1, lwd = 2) x3 <- defineTrajectories(dist(xy3), entities3, times = times3) trajectorySpeeds(x3) ##     S1   S2   S3 Path ## 1 1.00 1.00 1.00 1.00 ## 2 1.00 1.00 1.00 1.00 ## 3 1.25 1.25 1.25 1.25 trajectoryShifts(subsetTrajectories(x3, c(\"1\",\"2\"))) ##   reference site survey time timeRef shift ## 1         1    2      1    1     1.5   0.5 ## 2         1    2      2    2     2.5   0.5 ## 3         1    2      3    3     3.5   0.5 ## 4         1    2      4    4      NA    NA ## 5         2    1      1    1      NA    NA ## 6         2    1      2    2     1.5  -0.5 ## 7         2    1      3    3     2.5  -0.5 ## 8         2    1      4    4     3.5  -0.5 trajectoryShifts(subsetTrajectories(x3, c(\"1\",\"3\"))) ##   reference site survey time timeRef shift ## 1         1    3      1    1    1.00  0.00 ## 2         1    3      2    2    2.25  0.25 ## 3         1    3      3    3    3.50  0.50 ## 4         1    3      4    4      NA    NA ## 5         3    1      1    1    1.00  0.00 ## 6         3    1      2    2    1.80 -0.20 ## 7         3    1      3    3    2.60 -0.40 ## 8         3    1      4    4    3.40 -0.60"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"trajectory-convergencedivergence","dir":"Articles","previous_headings":"4. Comparing trajectories","what":"4.3 Trajectory convergence/divergence","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"trajectories synchronous, one can study symmetric convergence divergence (see Fig. 3a De Cáceres et al. 2019). Function trajectoryConvergence() allows performing tests convergence based trend analysis sequences distances points two trajectories (.e. first-first, second-second, …): function performs Mann-Whitney trend test. Values statistic (‘tau’) larger 0 correspond trajectories diverging, whereas values lower 0 correspond trajectories converging. setting type = \"pairwise.asymmetric\" convergence test becomes asymmetric (see Figs. 3b 3c De Cáceres et al. 2019). case sequence distances every point one trajectory : asymmetric test useful determine one trajectory becoming closer departing . asymmetric test can applied non-synchronous trajectories. Finally, trajectories surveyed synchronously, one can also perform global test convergence/divergence trajectories, using type = \"multiple\": case testing whether average distance ecological states corresponding observation time increasing decreasing time. tests trajectories diverging (indicated positive tau values) tests statistically significance due small number surveys.","code":"trajectoryConvergence(x, type = \"pairwise.symmetric\") ## $tau ##           1         2         3 ## 1        NA 0.9128709 0.9128709 ## 2 0.9128709        NA 0.9128709 ## 3 0.9128709 0.9128709        NA ##  ## $p.value ##           1         2         3 ## 1        NA 0.1485617 0.1485617 ## 2 0.1485617        NA 0.1485617 ## 3 0.1485617 0.1485617        NA trajectoryConvergence(x, type = \"pairwise.asymmetric\") ## $tau ##           1         2         3 ## 1        NA 0.9128709 0.9128709 ## 2 0.9128709        NA 0.9128709 ## 3 0.9128709 0.6666666        NA ##  ## $p.value ##           1         2         3 ## 1        NA 0.1485617 0.1485617 ## 2 0.1485617        NA 0.1485617 ## 3 0.1485617 0.3081795        NA trajectoryConvergence(x, type = \"multiple\") ## $tau ## [1] 0.9128709 ##  ## $p.value ## [1] 0.1485617"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"distances-between-segments-and-between-trajectories","dir":"Articles","previous_headings":"4. Comparing trajectories","what":"4.4 Distances between segments and between trajectories","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"ETA framework allows quantifying resemblance dynamics target entities assessing dissimilarity corresponding trajectories. Broadly speaking, dissimilarity trajectories influenced differences ecological states constant time differences arise temporal changes. focus second, distances trajectories can calculated centering (.e. bringing trajectories center Ω\\Omega space). done using function centerTrajectories(), returns new dissimilarity matrix illustrated article “Transforming trajectories”.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"distances-between-segments","dir":"Articles","previous_headings":"4. Comparing trajectories > 4.4 Distances between segments and between trajectories","what":"4.4.1 Distances between segments","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"trajectory dissimilarity coefficients, one intermediate step calculation distances directed segments (see Fig. 4 De Cáceres et al. 2019), can obtained calling function segmentDistances: Distances segments affected differences position, size direction. Hence, among six segments example, distance maximum last segment trajectory ‘1’ (named 1[3-4]) first segment trajectory ‘3’ (named 3[1-2]). One can display distances segments two dimensions using mMDS.","code":"Ds <- segmentDistances(x)$Dseg Ds ##           1[1-2]    1[2-3]    1[3-4]    2[1-2]    2[2-3]    2[3-4]    3[1-2] ## 1[2-3] 1.0000000                                                             ## 1[3-4] 2.0000000 1.0000000                                                   ## 2[1-2] 0.2500000 1.0307764 2.0155644                                         ## 2[2-3] 1.0307764 0.7071068 1.5811388 1.0000000                               ## 2[3-4] 1.5811388 1.0000000 1.4142136 1.5206906 0.7071068                     ## 3[1-2] 0.5000000 1.1180340 2.0615528 0.2500000 1.0307764 1.5000000           ## 3[2-3] 1.1180340 1.1180340 2.0124612 1.0307764 0.5590170 0.7500000 1.0000000 ## 3[3-4] 1.6007811 1.5590170 2.0155644 1.4577380 1.1180340 1.0606602 1.5590170 ##           3[2-3] ## 1[2-3]           ## 1[3-4]           ## 2[1-2]           ## 2[2-3]           ## 2[3-4]           ## 3[1-2]           ## 3[2-3]           ## 3[3-4] 0.5590170 mMDS <- smacof::mds(Ds) mMDS ##  ## Call: ## smacof::mds(delta = Ds) ##  ## Model: Symmetric SMACOF  ## Number of objects: 9  ## Stress-1 value: 0.062  ## Number of iterations: 15 xret <- mMDS$conf plot(xret, xlab=\"axis 1\", ylab = \"axis 2\", asp=1, pch=21,      bg=c(rep(\"black\",3), rep(\"red\",3), rep(\"blue\",3)),       xlim=c(-1.5,1), ylim=c(-1,1.5)) text(xret, labels=rep(paste0(\"s\",1:3),3), pos=1) legend(\"topleft\", pt.bg=c(\"black\",\"red\",\"blue\"), pch=21, bty=\"n\", legend=c(\"Trajectory 1\", \"Trajectory 2\", \"Trajectory 3\"))"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"distances-between-trajectories","dir":"Articles","previous_headings":"4. Comparing trajectories > 4.4 Distances between segments and between trajectories","what":"4.4.2 Distances between trajectories","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"Distances segments internally calculated comparing whole trajectories using function trajectoryDistances(). show dissimilarity two trajectories assessed using either Hausdorff distance (equal maximum distance directed segments; see eq. 8 De Cáceres et al. 2019), segment path distance (Besse et al, 2016), directed segment path distance (see eq. 13 De Cáceres et al. 2019) time-sensitive path distance (unpublished): SPD, DSPD TSPD symmetrized default. calculate non-symmetric distances one uses, example (see eq. 11 De Cáceres et al. 2019): detailed comparison trajectory dissimilarity indices can found article “Distance metrics trajectory resemblance”. estimating dissimilarities set trajectories one building new space (noted ΩT\\Omega_T). One can display location trajectories two dimensions using mMDS.","code":"trajectoryDistances(x, distance.type = \"Hausdorff\") ##          1        2 ## 2 2.015564          ## 3 2.061553 1.500000 trajectoryDistances(x, distance.type = \"SPD\") ##           1         2 ## 2 0.5776650           ## 3 0.9538119 0.4702263 trajectoryDistances(x, distance.type = \"DSPD\") ##           1         2 ## 2 0.7214045           ## 3 1.1345910 0.5714490 trajectoryDistances(x, distance.type = \"TSPD\") ##           1         2 ## 2 0.6553301           ## 3 1.1875000 0.5442627 trajectoryDistances(x, distance.type = \"DSPD\", symmetrization = NULL) ##           1         2         3 ## 1 0.0000000 0.7904401 1.2101651 ## 2 0.6523689 0.0000000 0.5196723 ## 3 1.0590170 0.6232257 0.0000000 mMDS <- smacof::mds(trajectoryDistances(x, distance.type = \"TSPD\")) mMDS ##  ## Call: ## smacof::mds(delta = trajectoryDistances(x, distance.type = \"TSPD\")) ##  ## Model: Symmetric SMACOF  ## Number of objects: 3  ## Stress-1 value: 0  ## Number of iterations: 1 xret <- mMDS$conf plot(xret, xlab=\"axis 1\", ylab = \"axis 2\", asp=1, pch=21,      bg=c(\"black\", \"red\", \"blue\"),       xlim=c(-1.0,1), ylim=c(-1,1.0)) legend(\"topleft\", pt.bg=c(\"black\",\"red\",\"blue\"), pch=21, bty=\"n\", legend=c(\"Trajectory 1\", \"Trajectory 2\", \"Trajectory 3\"))"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"dynamic-variation","dir":"Articles","previous_headings":"4. Comparing trajectories","what":"4.5 Dynamic variation","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"One may interested knowing much diverse set trajectories, entities follow dynamics distinct others. refer diversity trajectories dynamic variation., questions can addressed using function dynamicVariation(), example: Analogously trajectoryInternalVariation(), function dynamicVariation() returns sum squares dynamic variation, unbiased dynamic variance estimator relative contribution individual trajectories overall sum squares. Function dynamicVariation(), makes internal calls trajectoryDistances(), means may get slightly different results change trajectory dissimilarity coefficient:","code":"dynamicVariation(x) ## $dynamic_ss ## [1] 0.7114251 ##  ## $dynamic_variance ## [1] 0.3557125 ##  ## $relative_contributions ##          1          2          3  ## 0.51366204 0.06351261 0.42282535 dynamicVariation(x, distance.type = \"TSPD\") ## $dynamic_ss ## [1] 0.7119452 ##  ## $dynamic_variance ## [1] 0.3559726 ##  ## $relative_contributions ##           1           2           3  ## 0.527975317 0.006430374 0.465594309"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"real-example-structural-dynamics-in-permanent-plots","dir":"Articles","previous_headings":"","what":"5. Real example: structural dynamics in permanent plots","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"example analyze dynamics 8 permanent forest plots located slopes valley New Zealand Alps. study area mountainous centered Craigieburn Range (Southern Alps), South Island, New Zealand (see map Fig. 8 De Cáceres et al. 2019). Forests plots almost monospecific, mountain beech (Fuscospora cliffortioides) main dominant tree species. Previously forests consisted largely mature stands, affected different disturbances sampling period (1972-2009) includes 9 surveys. begin example loading data set, includes 72 plot observations: Community data form object stratifiedvegdata. account differences tree diameter, emphasizing regeneration, data contains individual counts represent tree abundance trees classified 19 quadratic diameter bins (cm): {(2.25, 4], (4, 6.25], (6.25, 9], … (110.25, 121]}. data set also includes vectors avoca_surveys avoca_sites indicate survey forest plot corresponding forest state. starting ETA, use function vegdiststruct package vegclust calculate distances forest plot states terms structure composition (see De Cáceres M, Legendre P, F (2013) Dissimilarity measurements size structure ecological communities. Methods Ecol Evol 4:1167–1177. https://doi.org/10.1111/2041-210X.12116): Distances avoca_D_man calculated using Manhattan metric, applying logarithm transformation abundance data.","code":"data(\"avoca\") avoca_D_man <- vegclust::vegdiststruct(avoca_strat,                                         method=\"manhattan\",                                         transform = function(x){log(x+1)})"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"defining-trajectories-1","dir":"Articles","previous_headings":"5. Real example: structural dynamics in permanent plots","what":"5.1 Defining trajectories","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"start defining trajectories, implies combining information distances, entities (sites) observation times. nine surveys conducted years 1970/72, 1974, 1978, 1983, 1987, 1993, 1999, 2004 2009. Since plots surveyed rather synchronously, can define observation times using: define trajectories using: dataset trajectories , indicated function .synchronous(). hand, Manhattan metric produces distance matrix (Ω\\Omega space) indeed metric:","code":"years <- c(1971, 1974, 1978, 1983, 1987, 1993, 1999, 2004, 2009) avoca_times <- years[avoca_surveys] avoca_x <- defineTrajectories(d = avoca_D_man,                                 sites = avoca_sites,                                times = avoca_times) is.synchronous(avoca_x) ## [1] TRUE is.metric(avoca_x) ## [1] TRUE"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"displaying-trajectories-in-pcoa","dir":"Articles","previous_headings":"5. Real example: structural dynamics in permanent plots","what":"5.2 Displaying trajectories in PCoA","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"distance matrix avoca_D_man conforms definition Ω\\Omega. use trajectoryPCoA() display relations forest plot states space draw trajectory plot:  Note case, full Ω\\Omega includes two dimensions, PCoA representing 43% total variance (correction negative eigenvalues included call cmdscale trajectoryPCoA()), one careful interpreting trajectories visually. Another option use mMDS represent trajectories, case produces similar result:  One can inspect specific trajectories using subsetTrajectories(). allows getting better view particular trajectories, forest plot ‘3’:  right hand, added representation change mountain beech tree diameter distribution time trajectory forest plot ‘3’. dynamics plot include mostly growth, results individuals moving one diameter class . whole trajectory looks mostly directional. Let’s now inspect trajectory forest plot ‘4’:  second trajectory less straight seems include turn end sampling period, corresponding recruitment new saplings.","code":"trajectoryPCoA(avoca_x,                traj.colors = RColorBrewer::brewer.pal(8,\"Accent\"),                 axes=c(1,2), length=0.1, lwd=2) legend(\"topright\", bty=\"n\", legend = 1:8, col = RColorBrewer::brewer.pal(8,\"Accent\"), lwd=2) mMDS <- smacof::mds(avoca_D_man) mMDS ##  ## Call: ## smacof::mds(delta = avoca_D_man) ##  ## Model: Symmetric SMACOF  ## Number of objects: 72  ## Stress-1 value: 0.114  ## Number of iterations: 49 trajectoryPlot(mMDS$conf,  avoca_sites, avoca_surveys,                traj.colors = RColorBrewer::brewer.pal(8,\"Accent\"),                 axes=c(1,2), length=0.1, lwd=2) legend(\"topright\", bty=\"n\", legend = 1:8, col = RColorBrewer::brewer.pal(8,\"Accent\"), lwd=2) oldpar <- par(mfrow=c(1,2)) trajectoryPCoA(subsetTrajectories(avoca_x, \"3\"),                length=0.1, lwd=2, time.labels = TRUE) plotTrajDiamDist(3) par(oldpar) oldpar <- par(mfrow=c(1,2)) trajectoryPCoA(subsetTrajectories(avoca_x, \"4\"),                length=0.1, lwd=2, time.labels = TRUE) plotTrajDiamDist(4) par(oldpar)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"trajectory-lengths-angles-and-overall-directionality","dir":"Articles","previous_headings":"5. Real example: structural dynamics in permanent plots","what":"5.3 Trajectory lengths, angles and overall directionality","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"trajectory lengths angles can inspected visually ordination diagrams, better calculate using full Ω\\Omega space (.e., matrix avoca_D_man). Using function trajectoryLengths() can see trajectory forest plot ‘4’ lengthier plot ‘3’, mostly includes lengthier last segment (.e. recruitment new individuals): calculate angles consecutive segments (using function trajectoryLengths) see indeed trajectory ‘3’ rather directional, angles trajectory ‘4’ larger, aveerage: calling function trajectoryDirectionality() can confirm trajectory forest plot ‘4’ less straight plot ‘3’: following code displays relationship statistic trajectoryDirectionality() mean resultant vector length uses angular information assesses constancy angle values:","code":"trajectoryLengths(avoca_x) ##          S1        S2        S3        S4        S5        S6        S7 ## 1 1.2173214 1.5911988 1.0976965 2.1173501 0.5238760 1.5863283 1.5750365 ## 2 0.5971165 1.7469687 0.9866591 0.9413060 1.3687614 0.6280231 1.4565581 ## 3 1.1480971 1.2404953 0.6508116 0.4371405 0.5098385 1.2078811 1.6241741 ## 4 0.7932307 1.8572629 0.7268623 0.8348635 3.0560437 1.9863939 0.9905892 ## 5 1.7769875 0.3367341 0.7283030 0.6515714 1.2660552 0.9544933 1.2605333 ## 6 2.1891568 0.5312711 1.0035212 0.4113220 2.1394743 1.0482871 1.4924056 ## 7 0.2919002 0.8857645 1.0908604 0.5601649 2.0600208 0.3712067 1.1014563 ## 8 0.1909713 1.2000266 2.3211891 0.6539882 2.7807668 0.8170202 1.2072425 ##          S8      Path ## 1 0.6277940 10.336602 ## 2 1.1232798  8.848673 ## 3 1.4536390  8.272077 ## 4 3.8794520 14.124698 ## 5 0.5842314  7.558909 ## 6 1.9623777 10.777816 ## 7 1.7518489  8.113223 ## 8 1.5107357 10.681940 avoca_ang <- trajectoryAngles(avoca_x) avoca_ang ##       S1-S2        S2-S3        S3-S4     S4-S5     S5-S6     S6-S7 ## 1  41.74809 8.669806e+01 7.401875e+01  26.94138 113.40657 100.67068 ## 2  68.14891 3.466506e+01 8.537736e-07   0.00000  25.97111   0.00000 ## 3  87.24519 3.088828e+01 1.207418e-06   0.00000  50.90743  48.12854 ## 4  37.65736 8.537736e-07 8.537736e-07  36.25240  55.53607  74.21065 ## 5  42.02156 7.166400e+01 1.207418e-06  49.95436  65.75897  65.82083 ## 6  41.69894 4.611675e+01 5.669641e+01 135.84929   0.00000   0.00000 ## 7  53.63254 1.152378e+02 6.519921e+01  60.71442   0.00000  56.25733 ## 8 180.00000 0.000000e+00 9.213121e+01 132.36445  71.33948  36.43189 ##          S7-S8     mean        sd       rho ## 1 1.021996e+02 78.82477 0.5334615 0.8673692 ## 2 1.207418e-06 17.61550 0.4257423 0.9133572 ## 3 4.568199e+01 37.39925 0.5018798 0.8816663 ## 4 4.980332e+01 36.44717 0.4531030 0.9024417 ## 5 1.061250e+02 57.89321 0.5239476 0.8717431 ## 6 0.000000e+00 34.34150 0.7777287 0.7390195 ## 7 1.207418e-06 49.96352 0.6562139 0.8062928 ## 8 1.207418e-06 66.68343 1.1601974 0.5101610 avoca_dir <- trajectoryDirectionality(avoca_x) avoca_dir ##         1         2         3         4         5         6         7         8  ## 0.6781369 0.6736490 0.8651467 0.5122482 0.6677116 0.7058465 0.7391775 0.5254225 avoca_rho <- trajectoryAngles(avoca_x, all=TRUE)$rho plot(avoca_rho, avoca_dir, xlab = \"rho(T)\", ylab = \"dir(T)\", type=\"n\") text(avoca_rho, avoca_dir, as.character(1:8))"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"convergence-between-trajectories","dir":"Articles","previous_headings":"5. Real example: structural dynamics in permanent plots","what":"5.4 Convergence between trajectories","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"may ask structure forest plots becoming similar time. question can addressed using overall test convergence, can trajectories synchronous: case obtain tau decreasing test significant, indicates forest structures overall converging. general trend may true specific pairs plots. Converge/divergence pairs plots assessed using: Inspecting results can conclude several pairs plots significantly converging (notably plot ‘8’), also significant divergence plots ‘4’ ‘5’. can display divergence graphically using:  interpret result can compare corresponding changes diameter distribution:  Apparently, divergence explained fact plot ‘4’ evolves towards regular structure medium/large trees (.e. diverse tree size distribution towards less diverse one), plot ‘5’ maintains irregular structure (.e. diverse tree size distribution) throughout years thanks greater sapling ingrowth.","code":"trajectoryConvergence(avoca_x, type=\"multiple\") ## $tau ## [1] -0.8333333 ##  ## $p.value ## [1] 0.002499029 trajectoryConvergence(avoca_x, type=\"pairwise.symmetric\") ## $tau ##             1           2          3          4          5          6 ## 1          NA -0.05555556 -0.4444444 -0.4444444 -0.4444444 -0.4444444 ## 2 -0.05555556          NA -0.3888889  0.1111111 -0.3333333 -0.3888889 ## 3 -0.44444445 -0.38888890         NA  0.4444444 -0.1111111 -0.6666667 ## 4 -0.44444445  0.11111111  0.4444444         NA  0.6111111  0.2777778 ## 5 -0.44444445 -0.33333334 -0.1111111  0.6111111         NA  0.4444444 ## 6 -0.44444445 -0.38888890 -0.6666667  0.2777778  0.4444444         NA ## 7 -0.05555556 -0.33333334 -0.3888889  0.4444444  0.1666667 -0.7777778 ## 8 -0.94444442 -0.83333331 -0.6666667 -0.4444444 -0.5555556 -0.5555556 ##             7          8 ## 1 -0.05555556 -0.9444444 ## 2 -0.33333334 -0.8333333 ## 3 -0.38888890 -0.6666667 ## 4  0.44444445 -0.4444444 ## 5  0.16666667 -0.5555556 ## 6 -0.77777779 -0.5555556 ## 7          NA -0.5000000 ## 8 -0.50000000         NA ##  ## $p.value ##             1           2          3          4          5           6 ## 1          NA 0.916965246 0.11785091 0.11785091 0.11785091 0.117850907 ## 2 0.916965246          NA 0.17530808 0.75445414 0.25145215 0.175308079 ## 3 0.117850907 0.175308079         NA 0.11785090 0.75445420 0.016488666 ## 4 0.117850907 0.754454136 0.11785090         NA 0.02856767 0.348082542 ## 5 0.117850907 0.251452148 0.75445420 0.02856767         NA 0.117850900 ## 6 0.117850907 0.175308079 0.01648867 0.34808254 0.11785090          NA ## 7 0.916965246 0.251452148 0.17530808 0.11785090 0.60216761 0.004878566 ## 8 0.000580667 0.002499029 0.01648867 0.11785091 0.04760397 0.047603969 ##             7           8 ## 1 0.916965246 0.000580667 ## 2 0.251452148 0.002499029 ## 3 0.175308079 0.016488666 ## 4 0.117850900 0.117850907 ## 5 0.602167606 0.047603969 ## 6 0.004878566 0.047603969 ## 7          NA 0.076332748 ## 8 0.076332748          NA trajectoryPCoA(subsetTrajectories(avoca_x, c(\"4\", \"5\")),                traj.colors = RColorBrewer::brewer.pal(8,\"Accent\")[4:5],                 axes=c(1,2), length=0.1, lwd=2) legend(\"topright\", bty=\"n\", legend = 4:5, col = RColorBrewer::brewer.pal(8,\"Accent\")[4:5], lwd=2) oldpar <- par(mfrow=c(1,2)) plotTrajDiamDist(4) plotTrajDiamDist(5) par(oldpar)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"distances-between-trajectories-1","dir":"Articles","previous_headings":"5. Real example: structural dynamics in permanent plots","what":"5.5 Distances between trajectories","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"can calculate resemblance forest plot trajectories using trajectoryDistances(): closest trajectories plots ‘1’ ‘2’. looked rather close position PCoA ordination Ω\\Omega trajectories, probably position, rather shape influenced low value. next pair similar trajectories ‘3’-‘5’ pair. can use mMDS produce ordination resemblances trajectories:","code":"avoca_D_traj_man <- trajectoryDistances(avoca_x, distance.type=\"DSPD\") print(round(avoca_D_traj_man,3)) ##       1     2     3     4     5     6     7 ## 2 2.405                                     ## 3 6.805 5.773                               ## 4 6.123 6.646 5.225                         ## 5 6.020 5.541 3.235 4.966                   ## 6 9.490 8.866 3.436 6.043 4.505             ## 7 4.024 3.291 4.365 4.993 4.389 6.205       ## 8 9.797 9.747 5.591 4.611 6.383 5.043 6.949 mMDS<-smacof::mds(avoca_D_traj_man) mMDS ##  ## Call: ## smacof::mds(delta = avoca_D_traj_man) ##  ## Model: Symmetric SMACOF  ## Number of objects: 8  ## Stress-1 value: 0.091  ## Number of iterations: 25 x<-mMDS$conf[,1] y<-mMDS$conf[,2] plot(x,y, type=\"p\", asp=1, xlab=paste0(\"Axis 1\"),       ylab=paste0(\"Axis 2\"), col=\"black\",      bg= RColorBrewer::brewer.pal(8,\"Accent\"), pch=21) text(x,y, labels=1:8, pos=1)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"dynamic-variation-1","dir":"Articles","previous_headings":"5. Real example: structural dynamics in permanent plots","what":"5.6 Dynamic variation","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"determine forest plots unique structural dynamics, can use function dynamicVariation(): see forest plots ‘3’, ‘4’, ‘5’ ‘7’ contribute much less overall variation dynamics others. plots located closer center previous ordination plot. unique plot ‘8’, can isolate inspect using:  Apparently, distinctiveness plot ‘8’ remaining stems low number trees beginning large amount regeneration. structural dynamics rather different plots adults beginning less amount regeneration.","code":"dynamicVariation(avoca_x, distance.type=\"DSPD\") ## $dynamic_ss ## [1] 127.5603 ##  ## $dynamic_variance ## [1] 18.2229 ##  ## $relative_contributions ##          1          2          3          4          5          6          7  ## 0.19647629 0.16743851 0.05093440 0.08698905 0.05371379 0.17015568 0.04851269  ##          8  ## 0.22577959 oldpar <- par(mfrow=c(1,2)) trajectoryPCoA(subsetTrajectories(avoca_x, \"8\"),                length=0.1, lwd=2, time.labels = TRUE) plotTrajDiamDist(8) par(oldpar)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/IntroductionETA.html","id":"references","dir":"Articles","previous_headings":"","what":"6. References","title":"Introduction to Ecological Trajectory Analysis (ETA)","text":"Besse, P., Guillouet, B., Loubes, J.-M. & François, R. (2016). Review perspective distance based trajectory clustering. IEEE Trans. Intell. Transp. Syst., 17, 3306–3317. De Cáceres M, Coll L, Legendre P, Allen RB, Wiser SK, Fortin MJ, Condit R & Hubbell S. (2019). Trajectory analysis community ecology. Ecological Monographs 89, e01350. Sturbois, ., De Cáceres, M., Sánchez-Pinillos, M., Schaal, G., Gauthier, O., Le Mao, P., Ponsero, ., & Desroy, N. (2021a). Extending community trajectory analysis : New metrics representation. Ecological Modelling 440: 109400. https://doi.org/10.1016/j.ecolmodel.2020.109400. Sturbois, ., Cucherousset, J., De Cáceres, M., Desroy, N., Riera, P., Carpentier, ., Quillien, N., Grall, J., Espinasse, B., Cherel, Y., Schaal, G. (2021b). Stable Isotope Trajectory Analysis (SITA) : new approach quantify visualize dynamics stable isotope studies. Ecological Monographs, 92, e1501. https://doi.org/10.1002/ecm.1501.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"about-this-vignette","dir":"Articles","previous_headings":"","what":"1. About this vignette","title":"Stable Isotope Trajectory Analysis (SITA)","text":"vignette present ecological applications used Sturbois et al. (2021) new stable isotope trajectory analysis framework: Sturbois, et al., Stable Isotope Trajectory Analysis (SITA): new approach quantify visualize dynamics stable isotope studies. Ecol. Monogr. (2021). https://doi.org/10.1002/ecm.1501 Example datasets included package reproducibility. calculation necessary distance- direction-based metrics, vignette focuses, ecological applications, creation trajectory charts.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"loading-libraries","dir":"Articles","previous_headings":"","what":"2. Loading libraries","title":"Stable Isotope Trajectory Analysis (SITA)","text":"First , load required libraries, including ecotraj:","code":"## Loading required package: Rcpp ## Loading required package: viridisLite ##  ## Attaching package: 'viridis' ## The following object is masked from 'package:scales': ##  ##     viridis_pal"},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"fur-seal-stable-isotope-dataset","dir":"Articles","previous_headings":"3. Spatial and temporal resource partitioning in fur seals","what":"3.1 Fur seal stable isotope dataset","title":"Stable Isotope Trajectory Analysis (SITA)","text":"begin loading package dataset furseals: subset dataset provided : Kernaléguen, L., Arnould, J.P.Y., Guinet, C., Cherel, Y., 2015. Determinants individual foraging specialization large marine vertebrates, Antarctic subantarctic fur seals. Journal Animal Ecology 1081–1091. Briefly, fur seals [Antarctic fur seal Arctocephalus gazella (AFS) subantarctic fur seal . tropicalis (SAFS)] whisker SI values yield unique long-term information individual behaviour integrates spatial, trophic temporal dimensions ecological niche. foraging strategies two species sympatric fur seals examined winter 2001/2002 Crozet, Amsterdam Kerguelen Islands (Southern Ocean) using stable isotope values serially sampled whiskers. method consists analysis consecutive whisker sections (3 mm long) starting proximal (facial) end, recently synthesized tissue remaining skin. individuals (n = 47) whiskers totalizing least 30 sections selected initial data, 30 sections considered herein, t1 (recent values) t30 (oldest values).","code":"data(\"furseals\")"},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"trajectory-metrics-on-stable-isotope-2d-space","dir":"Articles","previous_headings":"3. Spatial and temporal resource partitioning in fur seals","what":"3.2 Trajectory metrics on stable isotope 2D space","title":"Stable Isotope Trajectory Analysis (SITA)","text":"section, illustrate calculate trajectory metrics characterize foraging strategy fur seal. following sections, show use metrics data create plots. First, calculate net changes relative initial state (.e. distance stable isotope compositions (.e state) whisker section initial stable isotope composition): calculate trajectory segment lengths, .e. distance stable isotope composition consecutive whisker sections stable isotope space: Finally, determine angle (α\\alpha) consecutive trajectory segments respect second axis 2D stable isotope space:","code":"Net_changes<-trajectoryLengths2D(furseals[,c(\"d13C\",\"d15N\")],                                  furseals$ID_SITA,                                  furseals$Time, relativeToInitial=TRUE)  head(Net_changes) ##       Lt1_t2    Lt1_t3    Lt1_t4    Lt1_t5     Lt1_t6    Lt1_t7    Lt1_t8 ## 1 0.08246211 1.0892314 2.0775851 2.3714985 2.20626585 1.7839633 1.6819920 ## 2 0.59304131 0.9583074 0.8218643 0.2677928 0.08105554 0.7460168 0.4970191 ## 3 0.23256182 1.4622975 3.0029069 2.8817373 2.55906428 1.6445066 1.6734124 ## 4 1.24068086 2.1744498 2.3520872 2.4028260 2.28455422 2.2679323 0.9493714 ## 5 1.80624915 3.0818595 3.8011940 4.4793800 4.50949775 4.3885128 2.9507619 ## 6 1.13903687 4.3444610 4.0299700 6.4151503 5.96779901 6.0314152 7.2216151 ##     Lt1_t9   Lt1_t10   Lt1_t11   Lt1_t12   Lt1_t13   Lt1_t14   Lt1_t15 ## 1 1.344206 1.2735702 1.0631895 0.7915611 0.8486489 1.0500638 1.1961910 ## 2 1.092157 0.6772156 0.7744366 0.2702240 0.6136685 1.0261861 0.7000864 ## 3 2.518128 2.0782324 1.7294097 1.1594387 1.7649975 2.7768920 2.4641059 ## 4 0.577084 0.6049504 0.5920490 1.5973206 1.1985112 0.8119858 0.6936173 ## 5 2.187465 0.9662236 2.6143697 2.7163971 2.7958673 2.6837384 2.2504011 ## 6 7.173525 6.2867554 0.2478810 0.9972668 0.9076795 0.5088025 0.6640821 ##     Lt1_t16   Lt1_t17   Lt1_t18   Lt1_t19  Lt1_t20  Lt1_t21   Lt1_t22   Lt1_t23 ## 1 1.5432880 1.6484832 1.6042908 1.6566572 1.108358 0.381577 0.3006742 1.4772136 ## 2 0.5592397 0.4460235 0.6495922 0.7966461 1.787011 1.591433 1.5776276 1.6305889 ## 3 0.2755014 0.4497755 0.6170292 0.2879392 1.103359 2.145421 2.1758332 2.1139858 ## 4 0.3626927 0.7276160 0.9288983 0.7955941 2.352899 1.851222 2.2158782 2.3341939 ## 5 1.8418754 1.8304906 1.8207087 1.5938494 1.553721 1.583789 1.5700115 0.6566011 ## 6 3.6309179 4.0313501 6.0026223 6.9996921 6.341455 7.297884 7.5324814 6.1068566 ##     Lt1_t24   Lt1_t25   Lt1_t26   Lt1_t27    Lt1_t28   Lt1_t29   Lt1_t30 ## 1 1.5890755 1.0783103 1.1172381 2.0638181 2.52046504 2.2934779 1.6320787 ## 2 0.2046069 0.3937309 0.3849480 0.7032112 0.89491061 0.3901513 0.7480241 ## 3 2.2036883 1.8413856 1.6354464 1.9473328 1.59052601 1.3147125 1.6315076 ## 4 2.1019596 0.2814321 0.4237924 0.7473988 0.05360037 0.3889730 0.7375269 ## 5 4.0823528 4.4187248 4.3025323 4.3520214 3.43035873 0.7908375 1.2435373 ## 6 1.7282780 2.1873694 1.2698965 0.5391030 0.40993902 0.4085156 0.7709643 ##        Path ## 1  40.87543 ## 2  21.87682 ## 3  49.28114 ## 4  36.05110 ## 5  76.30333 ## 6 107.19276 Segment_lengths<-trajectoryLengths2D(furseals[,c(\"d13C\",\"d15N\")],                                      furseals$ID_SITA,                                      furseals$Time, relativeToInitial=FALSE)  head(Segment_lengths) ##           S1        S2       S3         S4         S5         S6        S7 ## 1 0.08246211 1.0799190 1.109759 0.39708060 0.16604819 0.69542793 0.1332817 ## 2 0.59304131 0.4019664 0.165463 0.62878295 0.24977790 0.81093588 0.4377728 ## 3 0.23256182 1.2719328 1.561554 0.13206059 0.81044432 1.21893232 0.3748826 ## 4 1.24068086 0.9337907 0.177792 0.08732125 0.11957006 0.06462971 1.3506817 ## 5 1.80624915 1.2835334 1.452408 1.22947021 0.05423099 0.33640006 1.4518034 ## 6 1.13903687 3.2697465 1.007842 2.40400083 1.02618176 0.80004000 1.4924584 ##           S8         S9       S10       S11        S12       S13       S14 ## 1 0.35206960 0.13800362 0.2119929 0.3940774 0.08004998 0.2026154 0.2040221 ## 2 0.94680304 0.44818858 0.6290191 0.5362695 0.52697249 0.4552637 0.3411231 ## 3 1.04072379 0.44107256 0.3592548 0.7240691 0.66598649 1.0131856 0.4798427 ## 4 1.44655867 0.09009439 1.1117198 2.1338287 0.39901128 1.4341130 0.3064376 ## 5 0.78147681 1.29231962 3.5747035 0.6261150 0.09265528 0.2502838 0.6440194 ## 6 0.05115662 0.88680381 6.3555849 0.9913889 0.09047099 0.4029814 1.1639300 ##         S15       S16       S17       S18       S19       S20        S21 ## 1 0.3703039 0.1632330 1.7046178 1.0355916 1.0132186 0.7423544 0.11970798 ## 2 0.1554670 0.2837781 0.2257632 0.6603492 0.9904383 0.5893293 0.03956008 ## 3 2.3198028 0.5979908 0.3078262 0.3993219 1.3487198 1.1301832 0.04002499 ## 4 0.8420291 0.4612776 1.5254799 0.1874727 1.5712829 0.5036268 0.41386471 ## 5 0.4404407 0.5163768 0.5204652 0.2380084 0.1802276 0.2205108 0.22402009 ## 6 2.9863858 0.7196339 1.9833855 1.0789699 0.7247068 0.9616637 0.24162988 ##          S22       S23       S24       S25       S26       S27       S28 ## 1 1.76281735 0.1147911 0.6148642 0.3162910 0.9585927 0.5338661 0.2521686 ## 2 0.27828942 1.4322639 0.5912495 0.7604426 0.3286716 0.2085977 0.5259743 ## 3 0.09244458 0.1509503 0.6998436 0.3191520 0.6441894 0.5047336 0.3805181 ## 4 0.25223997 0.2500180 1.8461901 0.6878982 0.3330540 0.7518151 0.3540353 ## 5 2.03381243 3.4923735 0.4153228 0.1254313 0.1696408 0.9698892 2.7246227 ## 6 1.48631692 7.3792361 0.6324634 0.9520021 0.9154939 0.1794937 0.3834071 ##         S29     Path ## 1 0.6836988 15.63293 ## 2 0.3593800 14.60093 ## 3 0.3359345 19.59814 ## 4 0.5050881 21.38160 ## 5 1.8207584 28.96757 ## 6 0.9149454 42.62136 Angles<-trajectoryAngles2D(furseals[,c(\"d13C\",\"d15N\")],                            furseals$ID_SITA,                            furseals$Time, betweenSegments=FALSE) head(Angles) ##    Axis2-t1  Axis2-t2  Axis2-t3   Axis2-t4   Axis2-t5  Axis2-t6  Axis2-t7 ## 1  75.96376 161.64894 195.57662 222.448400   9.008504  48.14751  25.79603 ## 2 179.32369 147.49601 315.00000 337.758643  47.109090 356.04023 139.72521 ## 3 243.98585 206.02112 198.13327   1.735705 326.780524  10.11145 151.99944 ## 4  64.19912  63.68191  66.46289 119.500725 237.639062 171.99527 255.90203 ## 5 263.32352 271.65188 195.28972 181.584670 174.709919 343.77386  61.26355 ## 6  65.68510  43.26505 163.63292  53.082435 298.712949 139.46085  99.02053 ##    Axis2-t8  Axis2-t9 Axis2-t10   Axis2-t11 Axis2-t12 Axis2-t13 Axis2-t14 ## 1 358.86075 283.83485 352.13745  22.5303928 192.99462 157.35838 199.76717 ## 2 307.01513 171.27328 215.35767  80.5552424  19.74159  26.62133 201.67665 ## 3 186.01189  37.90916  45.90222   0.7913279 198.10848 214.09786  81.85301 ## 4 250.78846 351.06043  81.67311 261.0762308  90.43079  53.84926 234.02761 ## 5  62.15609  60.16163  36.43393 125.7717105  83.18179 293.79978 270.44483 ## 6 265.51539 245.97847 247.59927 224.5913352  66.55194  64.26158  61.40918 ##   Axis2-t15 Axis2-t16 Axis2-t17 Axis2-t18 Axis2-t19 Axis2-t20 Axis2-t21 ## 1 182.32153 112.32286  37.13207  351.0561 280.57797 209.98421 149.36458 ## 2 203.10181 122.62605  56.38032  290.3834 341.27235 223.14352  73.85566 ## 3  34.05313  18.22286 331.68664  173.8183 198.63646 223.85280 167.00538 ## 4 180.47632 178.01222  48.64094  208.3422  64.39713 244.35079  38.91926 ## 5 236.67073 131.62432 147.71456  228.4064 173.30874 159.83930 179.23269 ## 6  52.20915 115.78169  71.69294   42.1451 219.40066  71.88535  52.22900 ##   Axis2-t22 Axis2-t23 Axis2-t24 Axis2-t25 Axis2-t26 Axis2-t27 Axis2-t28 ## 1 188.15309  198.2771  338.7350 109.58071 196.73359 224.92411 352.48043 ## 2  48.05870  155.7613  152.8282 351.45433  23.67929 346.69657 176.51200 ## 3  74.31001  150.2080  331.4941 353.34260 156.77805  68.62019 338.89763 ## 4 129.36932  270.6875  251.1332 240.37909 268.96776  74.65130 298.88170 ## 5 254.83630  245.0713  203.1080  35.59078 163.91542  71.91999  58.09492 ## 6 231.11744  239.4211  251.8515  22.74023  21.46438 118.99260 128.75316 ##   Axis2-t29 ## 1  31.96985 ## 2  28.77587 ## 3 186.15184 ## 4 235.64922 ## 5  61.49251 ## 6  67.77996"},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"identification-and-characterization-of-trajectory-clusters","dir":"Articles","previous_headings":"3. Spatial and temporal resource partitioning in fur seals","what":"3.3 Identification and characterization of trajectory clusters","title":"Stable Isotope Trajectory Analysis (SITA)","text":"aim define groups fur seals depending similarity foraging strategy. need first calculate distances pairs complete trajectories stable isotope space: , can use function hclust() conduct hierarchiacl clustering symmetric matrix D:  cut dendrogram height Hst obtain vector cluster membership copy furseals factor:","code":"D <- dist(furseals[,c(\"d13C\",\"d15N\")]) furseals_x <- defineTrajectories(D, furseals$ID_SITA) Ds<-trajectoryDistances(furseals_x, distance.type = \"DSPD\",                         symmetrization = \"mean\", add = TRUE) colstd<-c(\"black\",\"yellow\",\"green\",\"blue\",\"grey\",\"red\") pt<-c(16,16,16,16) hsxy <- hclust(Ds, \"ward.D2\") plot(hsxy,hang = -1, main=\"distance Fur Seals\", cex=.6) Hst=2 # Cutting height x<-rect.hclust(hsxy, h=Hst,                border = colstd) groups <- cutree(hsxy, h=Hst) furseals$cluster <- as.factor(groups)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"individual-trophic-trajectories-for-males-and-females-of-a--gazella-and-a--tropicalis","dir":"Articles","previous_headings":"3. Spatial and temporal resource partitioning in fur seals > 3.3 Identification and characterization of trajectory clusters","what":"3.3.1 Individual trophic trajectories for males and females of A. gazella and A. tropicalis","title":"Stable Isotope Trajectory Analysis (SITA)","text":"display trophic trajectories individuals, plots corresponding combinations species gender. facilitate plots, create vector combination species gender: now create diagram display fur seal trophic trajectories stable isotope space. Panels correspond combination species gender. panel, X-Y axes defined d13C d15N stable isotope values. Arrows connects whiskers section SI states t1 t30 (.e. recent oldest SI state). Colors corresponds trajectory clusters shape breeding sites:","code":"furseals$sp_gender<-paste(furseals$Sexe, furseals$Species, sep=\" \") ggplot(data=furseals,aes(x=d13C,y=d15N,color=cluster,shape=Place))+   geom_point()+   geom_path(aes(x=d13C,y=d15N,group=ID_SITA,color=cluster),             arrow = arrow(length = unit(0.10, \"cm\")))+   xlab(expression(delta^13*\"C\"))+   ylab(expression(delta^15*\"N\"))+   facet_wrap(~sp_gender) +   theme_classic()"},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"net-changes-time-series-for-males-and-females-of-both-fur-seal-species","dir":"Articles","previous_headings":"3. Spatial and temporal resource partitioning in fur seals > 3.3 Identification and characterization of trajectory clusters","what":"3.3.2 Net changes time series for males and females of both fur seal species","title":"Stable Isotope Trajectory Analysis (SITA)","text":"sub-section display net changes time series individuals, plots corresponding combinations species gender prepare subset data called NC: prepare subset. notably transform NC longer format, order data set add vector sp_gender: now create plot display net changes time series individuals panel corresponding Arrows connects whiskers section stable isotope values t1 t30 (.e. recent oldest stable isotope values). Colours corresponds trajectory clusters:","code":"NC<-Net_changes[,-30] NC$cluster<-furseals$cluster[1:47] NC$ID<-as.numeric(rownames(NC)) colnames(NC)<-c(2:30,\"cluster\",\"ID\") NCline <- tidyr::pivot_longer(NC, 1:29,                                names_to =\"Time_from_present\",                                values_to=\"Net_changes\",                                names_transform = function(x) {as.numeric(x)-1})  colnames(NCline)[1:2]<-c(\"Clusters\", \"ID\") NCline <- NCline[order(NCline$Time_from_present, decreasing=FALSE),] NCline <- as.data.frame(NCline) NCline$sp_gender<-c(furseals$sp_gender[1:47]) ggplot(data=NCline,aes(x=Time_from_present,y=Net_changes,color=Clusters))+   geom_path(aes(x=Time_from_present,y=Net_changes,group=ID,color=Clusters),             arrow = arrow(length = unit(0.10, \"cm\")))+   facet_wrap(~sp_gender)+   theme_classic()"},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"angle-alpha-trajectory-roses-of-fur-seals-trajectory-cluster-","dir":"Articles","previous_headings":"3. Spatial and temporal resource partitioning in fur seals > 3.3 Identification and characterization of trajectory clusters","what":"3.3.3 Angle α\\alpha trajectory roses of Fur seals trajectory cluster.","title":"Stable Isotope Trajectory Analysis (SITA)","text":"sub-section, plot distribution Angle α\\alpha values trajectory rose prepare data set compute trajectory rose transform long data structure. create vector direction class Angle α\\alpha values range 15°: now create trajectory rose. Angles α\\alpha calculated 2D Ωδ\\Omega \\delta space (δ13C/δ15N\\delta 13C/\\delta 15N) represented range (15∘\\circ) direction. Bars size represent number trajectory segments (individual within trajectory clusters).","code":"Angl<-Angles colnames(Angl)<-2:30 Angl$ID<-as.numeric(rownames(Angl)) Angl$cluster<-as.factor(groups) Angl$sp_gender<-furseals$sp_gender[1:47]  Angline<- tidyr::pivot_longer(Angl, 1:29,                                names_to =\"Time_from_present\",                                values_to=\"Direction\",                                names_transform = function(x) {as.numeric(x)-1})  colnames(Angline)[c(2,3)] = c(\"Clusters\", \"Group\")  # range 15° deg <- 15 # vector for range of direction of different bars dir.breaks <- seq(0-(deg/2), 360+(deg/2), deg) dir.binned <- cut(Angline$Direction,                   breaks = dir.breaks,                   ordered_result = TRUE) # direction labels dir.labels <- as.character(c(seq(0, 360-deg, by = deg), 0)) levels(dir.binned) <- dir.labels  # angles distribution in each range of direction Angline$dir.binned <- dir.binned  # sort angles df_sorted<-as.data.frame(table(Angline$dir.binned, Angline$Clusters)) colnames(df_sorted)<-c(\"dir.binned\",\"Clusters\",\"nb\") df_sorted = df_sorted[order(df_sorted$dir.binned),] ggplot(data=df_sorted, aes(x=dir.binned, y=nb, fill=Clusters)) +   geom_bar(stat=\"identity\")+   scale_y_continuous(limits = c(0,110), expand = c(0, 0),                       breaks = c(0,25,50,75,110),                       labels = c(0,25,50,75,110)) +   labs(x = 'Trajectory segment directions within fur seals clusters', y = 'number of trajectory segments') +   coord_polar(start = -(deg/2)*(pi/180)) +   theme_minimal()"},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"ontogenic-stable-isotope-trajectories-of-juvenile-fishes","dir":"Articles","previous_headings":"","what":"4. Ontogenic stable isotope trajectories of juvenile fishes","title":"Stable Isotope Trajectory Analysis (SITA)","text":"section, illustrate calculate trajectory metrics characterize ontogenic stable isotope trajectories juvenile fishes. following sections, show use metrics data create trajectory diagram.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"loading-data","dir":"Articles","previous_headings":"4. Ontogenic stable isotope trajectories of juvenile fishes","what":"4.1 Loading data","title":"Stable Isotope Trajectory Analysis (SITA)","text":"begin loading package dataset pike: data set : Cucherousset, J., Paillisson, J.-M., Roussel, J.-M., 2013. Natal departure timing spatially varying environments dependent individual ontogenetic status. Naturwissenschaften 100, 761–768. Briefly, Cucherousset et al. (2013) released 192 individually tagged, hatchery-raised, juvenile pike (Esox lucius L.) variable initial trophic position (fin δ13C/δ15N\\delta13C/\\delta15N values). Based δ15N\\delta15N values, individuals classified zooplanktivorous (δ15N\\delta15N < 10 ‰) piscivorous (δ15N\\delta15N > 10 ‰) cannibalism commonly observed species. Individuals released temporarily flooded grassland pike eggs usually hatch Brière marsh (France) identify determinants juvenile natal departure. release site connected unique point adjacent pond used nursery habitat. Fish continuously recaptured migrating flooded grassland adjacent pond. Recaptured individuals (n = 29) anaesthetized, checked tags, measured fork length, fin-clipped quantify changes δ13C\\delta13C δ15N\\delta15N values, released.","code":"data(\"pike\")"},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"calculating-trajectory-metrics-and-identification-of-trajectory-clusters","dir":"Articles","previous_headings":"4. Ontogenic stable isotope trajectories of juvenile fishes","what":"4.2 Calculating trajectory metrics and identification of trajectory clusters","title":"Stable Isotope Trajectory Analysis (SITA)","text":"First, calculate net changes relative initial state individual (.e. distance stable isotope compositions release recapture): , can use function hclust() conduct hierarchical clustering symmetric matrix D: cut dendrogram height Hst obtain vector cluster membership copy pike:","code":"Net_changes<-trajectoryLengths2D(pike[,7:8],pike$ID,pike$Time, relativeToInitial=TRUE)  colnames(Net_changes)<-c(\"Net_changes\", \"Trajectory\") pike$Net_Changes<-Net_changes$Net_changes D=dist(pike[,7:8]) pike_x <- defineTrajectories(D, pike$ID) Ds<-trajectoryDistances(pike_x, distance.type = \"DSPD\",                         symmetrization = \"mean\", add = TRUE) Hst=3 colstd<-c(\"black\",\"yellow\",\"green\",\"blue\",\"grey\",\"red\") hsxy <- hclust(Ds, \"ward.D2\") plot(hsxy,hang = -1, main=\"distance Pike\", cex=.6) x<-rect.hclust (hsxy, h=Hst,                 border = colstd) # Store clusters into a new data column pike$Cluster<-cutree(hsxy, h=Hst)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"trajectory-diagram-of-pike-released-in-the-flooded-grassland-and-recaptured-when-emigrating-into-the-adjacent-pond","dir":"Articles","previous_headings":"4. Ontogenic stable isotope trajectories of juvenile fishes","what":"4.3 Trajectory diagram of pike released in the flooded grassland and recaptured when emigrating into the adjacent pond","title":"Stable Isotope Trajectory Analysis (SITA)","text":"prepare data set compute trajectory diagrams density curves: create trajectory diagram. Arrows represent trajectory path pit-tagged individual. Colors correspond trajectory clusters. dashed line separates piscivorous zooplanktivorous individuals [zooplanktivorous (δ15N\\delta15N < 10) vs piscivorous (δ15N\\delta15N > 10)].  Density curves X represents distribution samples according δ13C\\delta13C values, capture (green=release; red=departure):  Density curves Y represents distribution samples according δ15N\\delta15N values, capture (green=release; red=departure):","code":"Pike1<-pike[pike$Time %in% 1,] Pike1<-Pike1[order(Pike1$ID, decreasing=FALSE),] Pike1$Net_changes<-0 Pike2<-pike[pike$Time %in% 2,] Pike2<-Pike2[order(Pike2$ID, decreasing=FALSE),] Pike2$Net_changes<-Net_changes$Net_changes data<-as.data.frame(rbind(Pike1,Pike2)) ggplot(data=data,aes(x=d13C,y=d15N,shape=Trophic_status_initial))+   geom_point(aes(size=Net_changes))+   geom_path(aes(x=d13C,y=d15N,group=ID,color=factor(Cluster)),arrow = arrow(length = unit(0.30, \"cm\")))+   geom_hline(yintercept=10, linetype=\"dashed\", color = \"black\")+   xlab(expression(delta^13*\"C\")) +   ylab(expression(delta^15*\"N\"))+   theme_minimal() gg_dist_d13C = ggplot(data, aes(d13C, fill=TimeL)) + geom_density(alpha=.5)  gg_dist_d13C = gg_dist_d13C + ylab(expression(delta^13*\"C\"*\" density\")) gg_dist_d13C = gg_dist_d13C + theme(axis.title.y=element_blank(),                                     axis.text=element_blank(),                                     axis.line=element_blank(),                                     axis.ticks=element_blank(),                                     panel.grid.major = element_blank(),                                     panel.grid.minor = element_blank(),                                     panel.background =element_blank()) gg_dist_d13C = gg_dist_d13C + theme(legend.position = \"none\") gg_dist_d13C + scale_x_continuous(limits = c(-33, -25))+scale_y_continuous(limits = c(0, 1)) gg_dist_d15N = ggplot(data, aes(d15N, fill=TimeL)) + geom_density(alpha=.5)  gg_dist_d15N = gg_dist_d15N + ylab(expression(delta^15*\"N\"*\" density\")) gg_dist_d15N =gg_dist_d15N  gg_dist_d15N =gg_dist_d15N + coord_flip() gg_dist_d15N =gg_dist_d15N + theme(axis.title.y=element_blank(),                                    axis.text=element_blank(),                                    axis.line=element_blank(),                                    axis.ticks=element_blank(),                                    panel.grid.major = element_blank(),                                    panel.grid.minor = element_blank(),                                    panel.background =element_blank()) gg_dist_d15N =gg_dist_d15N +theme(legend.position = \"none\") gg_dist_d15N + scale_x_continuous(limits = c(7, 14))+scale_y_continuous(limits = c(0, 1))"},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"spatio-temporal-variability-of-delta-13c-and-delta-15n-modelled-isoscapes-in-the-northeast-pacific","dir":"Articles","previous_headings":"","what":"5. Spatio-temporal variability of δ13C\\delta 13C and δ15N\\delta 15N modelled isoscapes in the Northeast Pacific","title":"Stable Isotope Trajectory Analysis (SITA)","text":"section, illustrate use trajectory metrics characterize spatio-temporal variability δ13C\\delta 13C δ15N\\delta 15N modelled isoscapes Northeast Pacific isoscape trajectory map trajectory heat map datasets used application come : Espinasse, B., Hunt, B.P.V., Batten, S.D., Pakhomov, E.., 2020. Defining isoscapes Northeast Pacific index ocean productivity. Global Ecol Biogeogr 29, 246–261. Briefly, Espinasse et al. (2020) tested application isoscapes modelled satellite data description secondary production Northeast pacific. output model fits 0.25° x 0.25° spatial grid covering region spanning 46 62°N 195 235°E supporting δ13C\\delta13C δ15N\\delta15N isoscapes 1998 2017. subset modelled δ13C\\delta13C δ15N\\delta15N values 1° x 1° spatial grid original modelled dataset. Isoscapes modelled 2013, 2015 2017 selected characterised high stable isotope dynamics consequently constitutes relevant inputs test isoscape trajectory map concept. Additionally, long-term SITA analysis performed 1998 2017 using directions net changes calculated pairs dates (1998-1999,… ,2016-2017) input trajectory heat map.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"isoscape-trajectory-maps","dir":"Articles","previous_headings":"5. Spatio-temporal variability of δ13C\\delta 13C and δ15N\\delta 15N modelled isoscapes in the Northeast Pacific","what":"5.1 2013-2015 Isoscape trajectory maps","title":"Stable Isotope Trajectory Analysis (SITA)","text":"begin loading package dataset isoscape: calculate Segment lengths Angle α\\alpha stations assess, respectively, magnitude nature change stable isotope space 2013 2015. prepare data set compute isoscape trajectory map notably: Latitude, Longitude, Years, Angles segment lenghts values: Angles α\\alpha need transformed use geom_spoke. add transformed values new column Angles2. now create Isoscape trajectory map. kind map, Segment lengths Angles α\\alpha mapped illustrate stable isotope spatio-temporal dynamics. Direction arrows (angle α\\alpha) illustrate direction (.e. nature change) modelled 2D Ωδ\\Omega \\delta space according increase /decrease δ13C\\delta13C δ15N\\delta15N values (0-90°: + δ13C\\delta13C + δ15N\\delta15N; 90-180°: + δ13C\\delta13C - δ15N\\delta15N; 90-180°: + δ13C\\delta13C - δ15N\\delta15N; 180-270°: + δ13C\\delta13C - δ15N\\delta15N). Length arrows colored background rasters illustrate modelled trajectory segment length station (.e. magnitude change).","code":"data(\"isoscape\") sites<-isoscape$station surveys<-isoscape$Year Angl<-trajectoryAngles2D(isoscape[,3:4],sites,surveys, betweenSegments = FALSE) Length<-trajectoryLengths2D(isoscape[,3:4],sites,surveys) data<-as.data.frame(cbind(isoscape[1:489,],Angl,Length[,1])) colnames(data)<-c(\"Latitude\",\"Longitude\",\"d13C\",\"d15N\",\"Stations\",\"Years\",\"Angles\",\"Lengths\") head(data) ##   Latitude Longitude      d13C     d15N Stations Years    Angles    Lengths ## 1       46       195 -24.24369 5.267485        1  2013 210.45063 0.31556226 ## 2       48       195 -24.32212 4.973764        3  2013 279.70681 0.28077863 ## 3       49       195 -24.28151 5.113458        4  2013 188.55168 0.03490337 ## 4       50       195 -24.30105 5.261582        5  2013 147.84429 0.25570108 ## 5       51       195 -24.05084 5.302065        6  2013 126.14883 0.32439073 ## 6       52       195 -23.92968 5.407169        7  2013  60.21061 0.28423495 angle<-data$Angles Angles2<-c() for (i in 1:length(angle)) {   Angles2[i] <- c(ifelse(angle[i]==0,(angle[i]-270)*pi/180,                          ifelse(angle[i]==180,(angle[i]-270)*pi/180,                                 ifelse(angle[i]==90,(angle[i]+270)*pi/180,                                        ifelse(angle[i]==270,(angle[i]+270)*pi/180,                                               ifelse(angle[i]==360,(angle[i]-270)*pi/180,                                                        ifelse(angle[i]>0 & angle[i]<90 ,(90-angle[i])*pi/180,                                                             ifelse(angle[i]>90 & angle[i]<180 ,(90-angle[i])*pi/180,                                                                    ifelse(angle[i]>180 & angle[i]<270,(180+(270-angle[i]))*pi/180,                                                                           ifelse(angle[i]>270 & angle[i]<360,(90+(360-angle[i]))*pi/180,\"ERROR\")))))))))) }  data$Angles2<-Angles2 ggplot(data,            aes(x = Longitude,                y = Latitude,                fill = Lengths,                angle = Angles2,                radius = rescale(Lengths, c(0.3, 1)))) +   geom_raster(interpolate = TRUE) +   geom_spoke(arrow = arrow(length = unit(.07, 'inches'))) +    scale_fill_distiller(palette = \"RdYlBu\") +    coord_equal(expand = 0) +    theme(legend.position = 'bottom',          legend.direction = 'horizontal',         panel.background = element_rect(fill = \"white\"))"},{"path":"https://emf-creaf.github.io/ecotraj/articles/SITA.html","id":"trajectory-heatmap","dir":"Articles","previous_headings":"5. Spatio-temporal variability of δ13C\\delta 13C and δ15N\\delta 15N modelled isoscapes in the Northeast Pacific","what":"5.2 1998-2017 trajectory heatmap","title":"Stable Isotope Trajectory Analysis (SITA)","text":"begin loading package dataset heatmapdata: heatmapdata composed trajectory metrics stations within inter-annual consecutive periods 1998 2017: prepare data set create trajectory heat map. create vector direction, ranging 15° 0 360°, class Angle α\\alpha values. create vector ISPattern characterize pattern direction according changes stable isotope values (0-90°: + δ13C\\delta13C + δ15N\\delta15N; 90-180°: + δ13C\\delta13C - δ15N\\delta15N; 90-180°: + δ13C\\delta13C - δ15N\\delta15N; 180-270°: + δ13C\\delta13C - δ15N\\delta15N): final dataset used create trajectory heat map composed four variables (“Directions”,“Periods”,“Nb_stations”,“Lengths”): plot trajectory metrics respect period direction trajectory heat map. Angles α\\alpha modelled 2D Ωδ\\Omega \\delta space exhibited stations within pairs dates (1998-1999,…,2016-2017) represented range direction (15°) according period. Color gradient dark blue yellow indicate number stations exhibited given range direction within given period.  X bar plot represents sum segment lengths across stations times, 1231 exhibiting chosen angle. blue gradient indicates net change magnitude.  Y bar plot represents overall net changes according range directions (angle α\\alpha). Bars colored according increase /decrease δ13C\\delta13C δ15N\\delta15N values (Pink: 0-90°: + δ13C\\delta13C + δ15N\\delta15N ; Blue: 90-180°: + δ13C\\delta13C - δ15N\\delta15N; Red: 90-180°: + δ13C\\delta13C - δ15N\\delta15N; Green: 180-270°: + δ13C\\delta13C - δ15N\\delta15N).","code":"data(\"heatmapdata\") head(heatmapdata) ##   Latitude Longitude      d13C     d15N Stations     Years    Angles    Lengths ## 1       46       195 -24.76366 5.451872        1 1998-1999 181.31874 0.30196921 ## 2       47       195 -24.75540 5.334980        2 1998-1999 213.76898 0.09285079 ## 3       48       195 -24.51122 5.382608        3 1998-1999 183.00600 0.24017740 ## 4       49       195 -24.46314 5.481623        4 1998-1999 169.30735 0.34248078 ## 5       50       195 -24.27419 5.893179        5 1998-1999 174.57293 0.81250282 ## 6       51       195 -24.19454 5.780701        6 1998-1999  13.28445 0.96866737 ##     Angles2 ## 1  4.689373 ## 2  4.123009 ## 3  4.659924 ## 4 -1.384174 ## 5 -1.476076 ## 6  1.338939 #direction range deg <- 15  dir.breaks <- c(0,15,30,45,60,75,90,105,120,135,150,165,180,195,210,225,240,255,270,285,300,315,330,345,360)   dir.binned <- cut(heatmapdata$Angles,                   breaks = dir.breaks,                   ordered_result = TRUE)  # bar labels dir.labels <- as.character(c(seq(0, 360-deg, by = deg),0))  levels(dir.binned) <- dir.labels  heatmapdata$dir.binned <- dir.binned  data<-heatmapdata[,c(6,7,8,10)]  #direction vs SI patterns data<-data[order(data$dir.binned, decreasing=FALSE),] rownames(data)<-1:9206 data$ISpattern<- c(rep(\"+d13C/+d15N\",2862),rep(\"+d13C/-d15N\",1840),rep(\"-d13C/-d15N\",2931), rep(\"-d13C/+d15N\",1573))  data1<-as.data.frame(table(data$dir.binned,data$Years))  data2<-aggregate(x = data$Lengths, by = list(data$dir.binned, data$Years), FUN=sum, drop=FALSE) data2[is.na(data2)] <- 0    data1$Lengths<-data2$x dfa<-data1 colnames(dfa)<-c(\"Directions\",\"Periods\",\"Nb_stations\",\"Lengths\") head(dfa) ##   Directions   Periods Nb_stations   Lengths ## 1          0 1998-1999          12  8.634497 ## 2         15 1998-1999           9 11.096406 ## 3         30 1998-1999           7  7.927697 ## 4         45 1998-1999           8 11.138909 ## 5         60 1998-1999           4  1.861980 ## 6         75 1998-1999           4  1.835733 ggplot(dfa, aes(Periods, Directions, fill= Nb_stations)) +    geom_tile() +   scale_fill_viridis(discrete=FALSE) +   theme_minimal()+   theme(axis.text.x = element_text(size=10, angle=90)) df.Xbarplot<-aggregate(dfa$Lengths, by = list(dfa$Periods), FUN = sum) colnames(df.Xbarplot)<-c(\"Periods\",\"Lengths\") bp.x <- ggplot(data = df.Xbarplot, aes(x = factor(Periods), y = Lengths)) +    geom_bar(stat = \"identity\", aes(fill = Lengths)) + theme_minimal() +   theme(axis.text.x = element_text(size = 10,angle=90),          axis.title.x = element_text(size = 20, margin = margin(10,0,0,0))) +   labs(x = \"Periods\") bp.x df.Ybarplot<-aggregate(dfa$Lengths, by = list(dfa$Directions), FUN = sum) colnames(df.Ybarplot)<-c(\"Directions\",\"Lengths\") df.Ybarplot$ISpattern<- c(rep(\"+d13C/+d15N\",6),rep(\"+d13C/-d15N\",6),rep(\"-d13C/-d15N\",6), rep(\"-d13C/+d15N\",6))   bp.y <- ggplot(data = df.Ybarplot, aes(x = factor(Directions), y = Lengths,fill = ISpattern)) +    geom_bar(stat=\"identity\") + theme_minimal() + coord_flip() bp.y"},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"about-this-vignette","dir":"Articles","previous_headings":"1. Introduction","what":"1.1 About this vignette","title":"Distance metrics for trajectory resemblance","text":"vignette learn differences three distance coefficients available assessing trajectory resemblance. use small datasets trajectories occur space two dimensions, geometric calculations can followed easily. First , load ecotraj:","code":"library(ecotraj) ## Loading required package: Rcpp"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"the-three-distance-metrics","dir":"Articles","previous_headings":"1. Introduction","what":"1.2 The three distance metrics","title":"Distance metrics for trajectory resemblance","text":"Let T1T_1 T2T_2 two trajectories compared. first distance metric Segment Path Distance (SPD) (Besse et al. 2016), defined average distances point composing T1T_1 T2T_2: DSP(T1,T2)=1n∑=1nDpt(x1i,T2)D_{SP}(T_1, T_2) = \\frac{1}{n}\\sum_{=1}^{n}{D_{pt}(x_{1i}, T_2)} DptD_{pt} distance point trajectory. SPD symmetric needs symmetrized: DSSP(T1,T2)=DSP(T1,T2)+DSP(T2,T1)2D_{SSP}(T_1, T_2) = \\frac{D_{SP}(T_1, T_2) + D_{SP}(T_2, T_1)}{2} SPD appropriate compare location shape trajectories, sensitive trajectory direction. reason, De Cáceres et al. (2019) introduced Directed Segment Path Dissimilarity (DSPD), defined average distance directed segment T1T_1 T2T_2: DDSP(T1,T2)=1n−1∑=1n−1DDS(S1i,T2)D_{DSP}(T_1, T_2) = \\frac{1}{n-1}\\sum_{=1}^{n-1}{D_{DS}(S_{1i}, T_2)} DSPD_{SP} distance segment trajectory. , DSPD symmetric needs symmetrized: DSDSP(T1,T2)=DDSP(T1,T2)+DDSP(T2,T1)2D_{SDSP}(T_1, T_2) = \\frac{D_{DSP}(T_1, T_2) + D_{DSP}(T_2, T_1)}{2} DSPD appropriate metric compare location, shape direction trajectories. Nevertheless, metric allow taking account differences trajectory speed, use information regarding time observations (survey order). T1T_1 T2T_2 represent dynamics two sites surveyed synchronously (.e., n=mn = m t11=t21t_{11} = t_{21}; t12=t22t_{12}=t_{22};… ; t1n=t2nt_{1n} = t_{2n}), straightforward way comparing calculate average across surveys dissimilarity two sites, .e. mean sequence {d(x11,x21),d(x12,x22),…,d(x1n,x2n)}\\{d(x_{11}, x_{21}), \\, d(x_{12}, x_{22}), \\, \\dots,\\, d(x_{1n}, x_{2n})\\}. general solution Time-Sensitive Path Distance (TSPD) average distances observation T1T_1 T2T_2: DTSP(T1,T2)=1n∑=1nDot({x1i,t1i},T2)D_{TSP}(T_1, T_2) = \\frac{1}{n}\\sum_{=1}^{n}{D_{ot}(\\{x_{1i}, t_{1i}\\}, T_2)} DotD_{ot} distance observation trajectory. DotD_{ot} calculated distance x1ix_{1i} point T2T_2 corresponding time t1it_{1i}, may need interpolated correspond value {t21,t22,…,t2m}\\{t_{21}, t_{22}, \\dots,t_{2m}\\}. t1it_{1i} beyond time boundaries T2T_2, distance closest time point taken. , TSPD symmetric needs symmetrized: DSTSP(T1,T2)=DTSP(T1,T2)+DTSP(T2,T1)2D_{STSP}(T_1, T_2) = \\frac{D_{TSP}(T_1, T_2) + D_{TSP}(T_2, T_1)}{2} TSPD sensitive differences location, shape, direction speed, illustrated following examples.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"linear-trajectories","dir":"Articles","previous_headings":"","what":"2. Linear trajectories","title":"Distance metrics for trajectory resemblance","text":"Let us first compare behavior three distance metrics comparisons linear trajectories. cases, reference trajectory composed three linear segments.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"oposed-linear-trajectories","dir":"Articles","previous_headings":"2. Linear trajectories","what":"2.1 Oposed linear trajectories","title":"Distance metrics for trajectory resemblance","text":"compare first linear trajectory oposed one, .e. trajectory going exact oposite sense. can display two (overlapping) trajectories using:  two trajectories lengths speeds: examine trajectory (temporal) shifts see oposing character: Calculating SPD yields zero dissimilarity, distance take account differences direction: two dissimilarity metrics yield non-zero values:","code":"sites <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\", \"2\") times <- c(0,1,2,3,0,1,2,3)    xy<-matrix(0, nrow=8, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 xy[5,2]<-3 xy[6,2]<-2 xy[7,2]<-1 xy[8,2]<-0  x <- defineTrajectories(dist(xy), sites = sites, times = times) trajectoryPCoA(x,                 traj.colors = c(\"black\", \"red\", \"blue\"), lwd = 2,                time.labels = TRUE) trajectoryLengths(x) ##   S1 S2 S3 Path ## 1  1  1  1    3 ## 2  1  1  1    3 trajectorySpeeds(x) ##   S1 S2 S3 Path ## 1  1  1  1    1 ## 2  1  1  1    1 trajectoryShifts(x) ##   reference site survey time timeRef shift ## 1         1    2      1    0       3     3 ## 2         1    2      2    1       2     1 ## 3         1    2      3    2       1    -1 ## 4         1    2      4    3       0    -3 ## 5         2    1      1    0       3     3 ## 6         2    1      2    1       2     1 ## 7         2    1      3    2       1    -1 ## 8         2    1      4    3       0    -3 trajectoryDistances(x, distance.type = \"SPD\") ##   1 ## 2 0 trajectoryDistances(x, distance.type = \"DSPD\") ##   1 ## 2 1 trajectoryDistances(x, distance.type = \"TSPD\") ##   1 ## 2 2"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"equal-pathways-and-speeds-but-different-number-of-segments","dir":"Articles","previous_headings":"2. Linear trajectories","what":"2.2 Equal pathways and speeds but different number of segments","title":"Distance metrics for trajectory resemblance","text":"compare three trajectories linear pathway speed. differ number segments used describe : plot three trajectories separate panels clarity: Note reversals may occur PCoA eigen analysis. together trajectories look like:  can check three trajectories total length average speed: temporal shifts trajectories: SPD yields zero distance, three trajectories shape: Since defined means distances directed segments, DSPD seems affected different segmentation trajectories, yields non-zero values: contrast, TSPD yields zero distance values, trajectories differ neither speed shape.","code":"sites <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"3\",\"3\") times <- c(0,1,2,3,0,1.5,3,0,3)    xy<-matrix(0, nrow=9, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 xy[6,2]<-1.5 xy[7,2]<-3 xy[9,2]<-3  x <- defineTrajectories(dist(xy), sites = sites, times = times) par(mfrow=c(3,1)) trajectoryPCoA(subsetTrajectories(x,\"1\"),                 traj.colors = c(\"black\"), lwd = 2,                time.labels = TRUE) trajectoryPCoA(subsetTrajectories(x,\"2\"),                 traj.colors = c(\"red\"), lwd = 2,                time.labels = TRUE) trajectoryPCoA(subsetTrajectories(x,\"3\"),                traj.colors = c(\"blue\"), lwd = 2,                time.labels = TRUE) trajectoryPCoA(x,                 traj.colors = c(\"black\", \"red\", \"blue\"), lwd = 2,                time.labels = TRUE) trajectoryLengths(x) ##    S1  S2 S3 Path ## 1 1.0 1.0  1    3 ## 2 1.5 1.5 NA    3 ## 3 3.0  NA NA    3 trajectorySpeeds(x) ##   S1 S2 S3 Path ## 1  1  1  1    1 ## 2  1  1 NA    1 ## 3  1 NA NA    1 trajectoryShifts(x) ##    reference site survey time timeRef shift ## 1          1    2      1  0.0     0.0     0 ## 2          1    2      2  1.5     1.5     0 ## 3          1    2      3  3.0     3.0     0 ## 4          1    3      1  0.0     0.0     0 ## 5          1    3      2  3.0     3.0     0 ## 6          2    1      1  0.0     0.0     0 ## 7          2    1      2  1.0     1.0     0 ## 8          2    1      3  2.0     2.0     0 ## 9          2    1      4  3.0     3.0     0 ## 10         2    3      1  0.0     0.0     0 ## 11         2    3      2  3.0     3.0     0 ## 12         3    1      1  0.0      NA    NA ## 13         3    1      2  1.0      NA    NA ## 14         3    1      3  2.0      NA    NA ## 15         3    1      4  3.0      NA    NA ## 16         3    2      1  0.0      NA    NA ## 17         3    2      2  1.5     1.5     0 ## 18         3    2      3  3.0      NA    NA trajectoryDistances(x, distance.type = \"SPD\") ##   1 2 ## 2 0   ## 3 0 0 trajectoryDistances(x, distance.type = \"DSPD\") ##           1         2 ## 2 0.5833333           ## 3 1.3333333 1.5000000 trajectoryDistances(x, distance.type = \"TSPD\") ##   1 2 ## 2 0   ## 3 0 0"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"equal-pathways-but-different-speeds","dir":"Articles","previous_headings":"2. Linear trajectories","what":"2.3 Equal pathways but different speeds","title":"Distance metrics for trajectory resemblance","text":"example three trajectories segments pathways, differ speed changes: use separate plots show differences speed: can check differences segment total path lengths, indeed differ trajectory speed: Differences speed also lead temporal shifts trajectories: calculate distances using SPD, distance metric detect differences speed tells us trajectories equal: happens DSPD: apply TSPD can observe differences trajectories: distance first third trajectory largest difference speed also largest.","code":"sites <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") times <- c(0,0.5,1,1.5,0,1,2,3,0,2,4,6)    xy<-matrix(0, nrow=12, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 xy[5:8,2] <- xy[1:4,2] xy[9:12,2] <- xy[1:4,2]  x <- defineTrajectories(dist(xy), sites = sites, times = times) par(mfrow=c(3,1)) trajectoryPCoA(subsetTrajectories(x,\"1\"),                 traj.colors = c(\"black\"), lwd = 2,                time.labels = TRUE) trajectoryPCoA(subsetTrajectories(x,\"2\"),                 traj.colors = c(\"red\"), lwd = 2,                time.labels = TRUE) trajectoryPCoA(subsetTrajectories(x,\"3\"),                 traj.colors = c(\"blue\"), lwd = 2,                time.labels = TRUE) trajectoryLengths(x) ##   S1 S2 S3 Path ## 1  1  1  1    3 ## 2  1  1  1    3 ## 3  1  1  1    3 trajectorySpeeds(x) ##    S1  S2  S3 Path ## 1 2.0 2.0 2.0  2.0 ## 2 1.0 1.0 1.0  1.0 ## 3 0.5 0.5 0.5  0.5 trajectoryShifts(x) ##    reference site survey time timeRef shift ## 1          1    2      1  0.0     0.0   0.0 ## 2          1    2      2  1.0     0.5  -0.5 ## 3          1    2      3  2.0     1.0  -1.0 ## 4          1    2      4  3.0     1.5  -1.5 ## 5          1    3      1  0.0     0.0   0.0 ## 6          1    3      2  2.0     0.5  -1.5 ## 7          1    3      3  4.0     1.0  -3.0 ## 8          1    3      4  6.0     1.5  -4.5 ## 9          2    1      1  0.0     0.0   0.0 ## 10         2    1      2  0.5     1.0   0.5 ## 11         2    1      3  1.0     2.0   1.0 ## 12         2    1      4  1.5     3.0   1.5 ## 13         2    3      1  0.0     0.0   0.0 ## 14         2    3      2  2.0     1.0  -1.0 ## 15         2    3      3  4.0     2.0  -2.0 ## 16         2    3      4  6.0     3.0  -3.0 ## 17         3    1      1  0.0     0.0   0.0 ## 18         3    1      2  0.5     2.0   1.5 ## 19         3    1      3  1.0     4.0   3.0 ## 20         3    1      4  1.5     6.0   4.5 ## 21         3    2      1  0.0     0.0   0.0 ## 22         3    2      2  1.0     2.0   1.0 ## 23         3    2      3  2.0     4.0   2.0 ## 24         3    2      4  3.0     6.0   3.0 trajectoryDistances(x, distance.type = \"SPD\") ##   1 2 ## 2 0   ## 3 0 0 trajectoryDistances(x, distance.type = \"DSPD\") ##   1 2 ## 2 0   ## 3 0 0 trajectoryDistances(x, distance.type = \"TSPD\") ##        1      2 ## 2 0.6250        ## 3 0.9375 0.6250"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"space-shifted-trajectories","dir":"Articles","previous_headings":"2. Linear trajectories","what":"2.4 Space-shifted trajectories","title":"Distance metrics for trajectory resemblance","text":"Let us now evaluate case trajectories displaced one dimension: use single plot, though clear, display three trajectories: case differences exist terms lengths speeds: (temporal) shifts reflect spatial ones: case, three metrics responsive differences trajectory location:","code":"sites <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") times <- c(1,2,3,4,1,2,3,4,1,2,3,4)  xy<-matrix(0, nrow=12, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 # States are all shifted half unit with respect to site \"1\" xy[5:8,2] <- xy[1:4,2] + 0.5  # States are all shifted one unit with respect to site \"1\" xy[9:12,2] <- xy[1:4,2] + 1.0    x <- defineTrajectories(dist(xy), sites = sites, times = times) trajectoryPCoA(x,                 traj.colors = c(\"black\", \"red\", \"blue\"), lwd = 2,                time.labels = TRUE) trajectoryLengths(x) ##   S1 S2 S3 Path ## 1  1  1  1    3 ## 2  1  1  1    3 ## 3  1  1  1    3 trajectorySpeeds(x) ##   S1 S2 S3 Path ## 1  1  1  1    1 ## 2  1  1  1    1 ## 3  1  1  1    1 trajectoryShifts(x) ##    reference site survey time timeRef shift ## 1          1    2      1    1     1.5   0.5 ## 2          1    2      2    2     2.5   0.5 ## 3          1    2      3    3     3.5   0.5 ## 4          1    2      4    4      NA    NA ## 5          1    3      1    1     2.0   1.0 ## 6          1    3      2    2     3.0   1.0 ## 7          1    3      3    3     4.0   1.0 ## 8          1    3      4    4      NA    NA ## 9          2    1      1    1      NA    NA ## 10         2    1      2    2     1.5  -0.5 ## 11         2    1      3    3     2.5  -0.5 ## 12         2    1      4    4     3.5  -0.5 ## 13         2    3      1    1     1.5   0.5 ## 14         2    3      2    2     2.5   0.5 ## 15         2    3      3    3     3.5   0.5 ## 16         2    3      4    4      NA    NA ## 17         3    1      1    1      NA    NA ## 18         3    1      2    2     1.0  -1.0 ## 19         3    1      3    3     2.0  -1.0 ## 20         3    1      4    4     3.0  -1.0 ## 21         3    2      1    1      NA    NA ## 22         3    2      2    2     1.5  -0.5 ## 23         3    2      3    3     2.5  -0.5 ## 24         3    2      4    4     3.5  -0.5 trajectoryDistances(x, distance.type = \"SPD\") ##       1     2 ## 2 0.125       ## 3 0.250 0.125 trajectoryDistances(x, distance.type = \"DSPD\") ##           1         2 ## 2 0.5000000           ## 3 0.3333333 0.5000000 trajectoryDistances(x, distance.type = \"TSPD\") ##     1   2 ## 2 0.5     ## 3 1.0 0.5"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"space-expanded-trajectories","dir":"Articles","previous_headings":"2. Linear trajectories","what":"2.5 Space-expanded trajectories","title":"Distance metrics for trajectory resemblance","text":"example, three linear trajectories surveyed times differ total path length due differences trajectory speed. draw three (overlapping) trajectories:  case lengths speeds different trajectories: also translated trajectory shifts: Since trajectories differ length, captured three metrics:","code":"sites <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") times <- c(0,1,2,3,0,1,2,3,0,1,2,3)    xy<-matrix(0, nrow=12, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 xy[5:8,2] <- xy[1:4,2]*1.5 xy[9:12,2] <- xy[1:4,2]*2  x <- defineTrajectories(dist(xy), sites = sites, times = times) trajectoryPCoA(x,                 traj.colors = c(\"black\", \"red\", \"blue\"), lwd = 2,                time.labels = TRUE) trajectoryLengths(x) ##    S1  S2  S3 Path ## 1 1.0 1.0 1.0  3.0 ## 2 1.5 1.5 1.5  4.5 ## 3 2.0 2.0 2.0  6.0 trajectorySpeeds(x) ##    S1  S2  S3 Path ## 1 1.0 1.0 1.0  1.0 ## 2 1.5 1.5 1.5  1.5 ## 3 2.0 2.0 2.0  2.0 trajectoryShifts(x) ##    reference site survey time   timeRef      shift ## 1          1    2      1    0 0.0000000  0.0000000 ## 2          1    2      2    1 1.5000000  0.5000000 ## 3          1    2      3    2 3.0000000  1.0000000 ## 4          1    2      4    3        NA         NA ## 5          1    3      1    0 0.0000000  0.0000000 ## 6          1    3      2    1 2.0000000  1.0000000 ## 7          1    3      3    2        NA         NA ## 8          1    3      4    3        NA         NA ## 9          2    1      1    0 0.0000000  0.0000000 ## 10         2    1      2    1 0.6666667 -0.3333333 ## 11         2    1      3    2 1.3333333 -0.6666667 ## 12         2    1      4    3 2.0000000 -1.0000000 ## 13         2    3      1    0 0.0000000  0.0000000 ## 14         2    3      2    1 1.3333333  0.3333333 ## 15         2    3      3    2 2.6666667  0.6666667 ## 16         2    3      4    3        NA         NA ## 17         3    1      1    0 0.0000000  0.0000000 ## 18         3    1      2    1 0.5000000 -0.5000000 ## 19         3    1      3    2 1.0000000 -1.0000000 ## 20         3    1      4    3 1.5000000 -1.5000000 ## 21         3    2      1    0 0.0000000  0.0000000 ## 22         3    2      2    1 0.7500000 -0.2500000 ## 23         3    2      3    2 1.5000000 -0.5000000 ## 24         3    2      4    3 2.2500000 -0.7500000 trajectoryDistances(x, distance.type = \"SPD\") ##        1      2 ## 2 0.1875        ## 3 0.5000 0.1875 trajectoryDistances(x, distance.type = \"DSPD\") ##           1         2 ## 2 0.7500000           ## 3 1.3333333 0.9166667 trajectoryDistances(x, distance.type = \"TSPD\") ##      1    2 ## 2 0.75      ## 3 1.50 0.75"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"curved-trajectories","dir":"Articles","previous_headings":"","what":"3. Curved trajectories","title":"Distance metrics for trajectory resemblance","text":"second set examples examine behavior metrics comparing trajectories always linear.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"constant-speed","dir":"Articles","previous_headings":"3. Curved trajectories","what":"3.1 Constant speed","title":"Distance metrics for trajectory resemblance","text":"three trajectories length speed, trajectory 2 3 progressively curved:  expected, differences found terms lengths speeds: three distance metrics responsive differences trajectory shape:","code":"sites <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") surveys <- c(1,2,3,4,1,2,3,4,1,2,3,4)  xy<-matrix(0, nrow=12, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 xy[5:6,2] <- xy[1:2,2] xy[7,1]<-0+sqrt(0.5) xy[7,2]<-1+sqrt(0.5) xy[8,2]<-xy[7,2] xy[8,1]<-xy[7,1]+1 xy[9:10,2] <- xy[1:2,2] xy[11,1] <- 1.0 xy[11,2] <- 1.0 xy[12,1] <- 1.0 xy[12,2] <- 0.0  x <- defineTrajectories(dist(xy), sites = sites, times = times) trajectoryPCoA(x,                 traj.colors = c(\"black\", \"red\", \"blue\"), lwd = 2,                time.labels = TRUE) ## Warning in cmdscale(d, eig = TRUE, add = TRUE, k = nrow(as.matrix(d)) - : only ## 10 of the first 11 eigenvalues are > 0 trajectoryLengths(x) ##   S1 S2 S3 Path ## 1  1  1  1    3 ## 2  1  1  1    3 ## 3  1  1  1    3 trajectorySpeeds(x) ##   S1 S2 S3 Path ## 1  1  1  1    1 ## 2  1  1  1    1 ## 3  1  1  1    1 trajectoryDistances(x, distance.type = \"SPD\") ##           1         2 ## 2 0.5743683           ## 3 0.6250000 0.4267767 trajectoryDistances(x, distance.type = \"DSPD\") ##           1         2 ## 2 0.7658244           ## 3 0.9023689 0.6868867 trajectoryDistances(x, distance.type = \"TSPD\") ##           1         2 ## 2 0.7267030           ## 3 1.1441228 0.6532815"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"different-speed","dir":"Articles","previous_headings":"3. Curved trajectories","what":"3.2 Different speed","title":"Distance metrics for trajectory resemblance","text":"example similar previous one, changed survey times, observed trajectory shapes correspond also different speeds: trajectory plot looks , except time labels:  case trajectories differ speed length: three metrics detect differences shape, . However, note values SPD DSPD exactly previous example, whereas TSPD yields higher distance values differences trajectory speed.","code":"sites <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") times <- c(0,0.5,1,1.5,0,1,2,3,0,2,4,6)  xy<-matrix(0, nrow=12, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 xy[5:6,2] <- xy[1:2,2] xy[7,1]<-0+sqrt(0.5) xy[7,2]<-1+sqrt(0.5) xy[8,2]<-xy[7,2] xy[8,1]<-xy[7,1]+1 xy[9:10,2] <- xy[1:2,2] xy[11,1] <- 1.0 xy[11,2] <- 1.0 xy[12,1] <- 1.0 xy[12,2] <- 0.0  x <- defineTrajectories(dist(xy), sites = sites, times = times) trajectoryPCoA(x,                 traj.colors = c(\"black\", \"red\", \"blue\"), lwd = 2,                time.labels = TRUE) ## Warning in cmdscale(d, eig = TRUE, add = TRUE, k = nrow(as.matrix(d)) - : only ## 10 of the first 11 eigenvalues are > 0 trajectoryLengths(x) ##   S1 S2 S3 Path ## 1  1  1  1    3 ## 2  1  1  1    3 ## 3  1  1  1    3 trajectorySpeeds(x) ##    S1  S2  S3 Path ## 1 2.0 2.0 2.0  2.0 ## 2 1.0 1.0 1.0  1.0 ## 3 0.5 0.5 0.5  0.5 trajectoryDistances(x, distance.type = \"SPD\") ##           1         2 ## 2 0.5743683           ## 3 0.6250000 0.4267767 trajectoryDistances(x, distance.type = \"DSPD\") ##           1         2 ## 2 0.7658244           ## 3 0.9023689 0.6868867 trajectoryDistances(x, distance.type = \"TSPD\") ##           1         2 ## 2 0.9748813           ## 3 1.4872932 0.8433407"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TrajectoryDistanceMetrics.html","id":"references","dir":"Articles","previous_headings":"","what":"4. References","title":"Distance metrics for trajectory resemblance","text":"Besse, P., Guillouet, B., Loubes, J.-M. & François, R. (2016). Review perspective distance based trajectory clustering. IEEE Trans. Intell. Transp. Syst., 17, 3306–3317. De Cáceres M, Coll L, Legendre P, Allen RB, Wiser SK, Fortin MJ, Condit R & Hubbell S. (2019). Trajectory analysis community ecology. Ecological Monographs 89, e01350.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"introduction","dir":"Articles","previous_headings":"","what":"1. Introduction","title":"Transforming trajectories","text":"vignette learn transform trajectory data three different ways. transforming, mean modifying distance matrix represents resemblance ecological states. equivalent (implicitly) modifying coordinates (position) ecological states Ω\\Omega space. However, one transformations also includes modification observation times. First , load ecotraj:","code":"library(ecotraj) ## Loading required package: Rcpp"},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"what-is-trajectory-interpolation","dir":"Articles","previous_headings":"2. Interpolating trajectories","what":"2.1 What is trajectory interpolation?","title":"Transforming trajectories","text":"Sometimes available trajectory data non-synchronous, due missing observations observation times match completely. normally limitation ETA, analyses require synchronous trajectory data. Trajectory interpolation allows recalculating positions along trajectory pathways observation times across trajectories, hence obtaining synchronous data set. Interpolation done multivariate Ω\\Omega space linear.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"simple-interpolation-example","dir":"Articles","previous_headings":"2. Interpolating trajectories","what":"2.2 Simple interpolation example","title":"Transforming trajectories","text":"employ simple example similar used introduction trajectory analysis. Let us first define vectors describe observation entity (.e. site): times observation match except first survey, entities ‘2’ ‘3’ observed earlier entity ‘1’. define matrix whose coordinates correspond set ecological states observed. assume ecosystem space Ω\\Omega two dimensions: define trajectories using: can see differences graphically, adding observation times labels: Let us assume want perform global divergence test, requires synchronous trajectories : solution bring trajectories observation times. case choose observation times entity ‘3’ imply interpolation entities ‘1’ ‘2’: trajectory plot interpolation looks like:  now can perform global test convergence/divergence: test indicates divergence, although non significant way low sample size.","code":"entities = c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") times <- c(1.0,2.0,3.0,4.0,1.0,1.75,2.5,3.25,1.0,1.5,2.0,2.5) xy<-matrix(0, nrow=12, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 xy[5:6,2] <- xy[1:2,2] xy[7,2]<-1.5 xy[8,2]<-2.0 xy[5:6,1] <- 0.25 xy[7,1]<-0.5 xy[8,1]<-1.0 xy[9:10,1] <- xy[5:6,1]+0.25 xy[11,1] <- 1.0 xy[12,1] <-1.5 xy[9:10,2] <- xy[5:6,2] xy[11:12,2]<-c(1.25,1.0) x <- defineTrajectories(dist(xy), entities, times = times) trajectoryPCoA(x,                 traj.colors = c(\"black\",\"red\", \"blue\"), time.labels = TRUE,                lwd = 2) legend(\"topright\", col=c(\"black\",\"red\", \"blue\"),         legend=c(\"Trajectory 1\", \"Trajectory 2\", \"Trajectory 3\"), bty=\"n\", lty=1, lwd = 2) is.synchronous(x) ## [1] FALSE x_inter <- interpolateTrajectories(x, times = c(1, 1.5, 2.0, 2.5)) trajectoryPCoA(x_inter,                 traj.colors = c(\"black\",\"red\", \"blue\"), time.labels = TRUE,                lwd = 2) legend(\"topright\", col=c(\"black\",\"red\", \"blue\"),         legend=c(\"Trajectory 1\", \"Trajectory 2\", \"Trajectory 3\"), bty=\"n\", lty=1, lwd = 2) trajectoryConvergence(x_inter, type=\"multiple\") ## $tau ## [1] 0.9999999 ##  ## $p.value ## [1] 0.08942938"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"interpolation-effect","dir":"Articles","previous_headings":"2. Interpolating trajectories","what":"2.3 Interpolation effect","title":"Transforming trajectories","text":"Interpolation effect trajectory metrics, although small. particular, may inflate directionality. Let’s compare trajectory metrics : interpolation: expected, trajectory metrics entity ‘3’ unaffected. Length variance entities ‘1’ ‘2’ obviously affected trajectories trimmed. Interestingly, directionality mean speed entity ‘2’ slightly increased.","code":"trajectoryMetrics(x) ##   trajectory n t_start t_end duration   length mean_speed mean_angle ## 1          1 4       1  4.00     3.00 3.000000   1.000000    0.00000 ## 2          2 4       1  3.25     2.25 2.266124   1.007166   22.50000 ## 3          3 4       1  2.50     1.50 2.118034   1.412023   58.28253 ##   directionality internal_ss internal_variance ## 1      1.0000000    5.000000         1.6666667 ## 2      0.8274026    2.562500         0.8541667 ## 3      0.5620859    1.609375         0.5364583 trajectoryMetrics(x_inter) ##   trajectory n t_start t_end duration   length mean_speed mean_angle ## 1          1 4       1   2.5      1.5 1.500000   1.000000    0.00000 ## 2          2 4       1   2.5      1.5 1.546242   1.030828   13.28253 ## 3          3 4       1   2.5      1.5 2.118034   1.412023   58.28253 ##   directionality internal_ss internal_variance ## 1      1.0000000    1.250000         0.4166667 ## 2      0.9063855    1.319444         0.4398148 ## 3      0.5620859    1.609375         0.5364583"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"interpolation-in-a-real-example","dir":"Articles","previous_headings":"2. Interpolating trajectories","what":"2.4 Interpolation in a real example","title":"Transforming trajectories","text":"example analyze dynamics 8 permanent forest plots located slopes valley New Zealand Alps. study area mountainous centered Craigieburn Range (Southern Alps), South Island, New Zealand (see map Fig. 8 De Cáceres et al. 2019). Forests plots almost monospecific, mountain beech (Fuscospora cliffortioides) main dominant tree species. Previously forests consisted largely mature stands, affected different disturbances sampling period (1972-2009) includes 9 surveys. begin example loading data set, includes 72 plot observations: starting, use function vegdiststruct package vegclust calculate distances forest plot states terms structure composition (see De Cáceres M, Legendre P, F (2013) Dissimilarity measurements size structure ecological communities. Methods Ecol Evol 4:1167–1177. https://doi.org/10.1111/2041-210X.12116): Distances avoca_D_man calculated using Manhattan metric. start ETA defining trajectories, implies combining information distances, sites surveys: use trajectoryPCoA() display relations forest plot states space draw trajectory plot:  One use interpolation force regular intervals observations. original definition time difference consecutive surveys 3 6 years. Lets homogenize 4 years: loose 2009, closely represented 2007. Lets perform interpolation: can see effect trajectory plot, small (appart axis inversion):  Let’s see effect trajectory forest plot ‘4’:","code":"data(\"avoca\") avoca_D_man <- vegclust::vegdiststruct(avoca_strat, method=\"manhattan\", transform = function(x){log(x+1)}) years <- c(1971, 1974, 1978, 1983, 1987, 1993, 1999, 2004, 2009) avoca_times <- years[avoca_surveys] avoca_x <- defineTrajectories(avoca_D_man,                                 sites = avoca_sites,                                times = avoca_times) oldpar <- par(mar=c(4,4,1,1)) trajectoryPCoA(avoca_x,                traj.colors = RColorBrewer::brewer.pal(8,\"Accent\"),                 axes=c(1,2), length=0.1, lwd=2) legend(\"topright\", bty=\"n\", legend = 1:8, col = RColorBrewer::brewer.pal(8,\"Accent\"), lwd=2) years_regular <- seq(1971, 2009, by=4) years_regular ##  [1] 1971 1975 1979 1983 1987 1991 1995 1999 2003 2007 avoca_x_inter <- interpolateTrajectories(avoca_x, years_regular) oldpar <- par(mar=c(4,4,1,1)) trajectoryPCoA(avoca_x_inter,                traj.colors = RColorBrewer::brewer.pal(8,\"Accent\"),                 axes=c(1,2), length=0.1, lwd=2) legend(\"topright\", bty=\"n\", legend = 1:8, col = RColorBrewer::brewer.pal(8,\"Accent\"), lwd=2) oldpar <- par(mfrow=c(1,2)) trajectoryPCoA(subsetTrajectories(avoca_x, \"4\"),                length=0.1, lwd=2, time.labels = TRUE) trajectoryPCoA(subsetTrajectories(avoca_x_inter, \"4\"),                length=0.1, lwd=2, time.labels = TRUE) par(oldpar)"},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"what-is-trajectory-centering","dir":"Articles","previous_headings":"3. Centering trajectories","what":"3.1 What is trajectory centering?","title":"Transforming trajectories","text":"Trajectory centering removes differences (e.g. initial overall) position trajectories, without changing shape, focus direction temporal changes. done using function centerTrajectories(). Trajectory centering normally imply subtracting coordinate values trajectory centroid states conforming trajectory. However, one may decide “center” trajectories respect overall centroid average specific subset ecological states, even single state, example state corresponding first last observation. cases, trajectories shifted respect particular ecological states. Trajectory centering useful cases one wants focus trajectory analysis temporal changes discarding differences trajectories constant time. can also useful trajectories defined subtrajectories trajectory cyclical patterns.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"simple-centering-example","dir":"Articles","previous_headings":"3. Centering trajectories","what":"3.2 Simple centering example","title":"Transforming trajectories","text":"employ simple example used introduction trajectory analysis. Let us first define vectors describe state entity (.e. site): define surveys, assumed consecutive entity. However, define matrix whose coordinates correspond set ecological states observed. assume ecosystem space Ω\\Omega two dimensions: define trajectories using: trajectories can displayed using PCoA distance matrix follows:  Centering trajectories straightforward using function centerTrajectories(): function return object class trajectories distance matrix modified represent distances centering. effect centering can shown repeating PCoA modified object:  Function centerTrajectories() operates distance matrices, free use arbitrary dissimilarity coefficients resemblance states. However, case conducted centering manually substracting trajectory centroids. build matrix containing centroid coordinates, repeated states trajectory: Centering operation equal subtraction: can compare equivalence two approaches using:","code":"entities = c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") xy<-matrix(0, nrow=12, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 xy[5:6,2] <- xy[1:2,2] xy[7,2]<-1.5 xy[8,2]<-2.0 xy[5:6,1] <- 0.25 xy[7,1]<-0.5 xy[8,1]<-1.0 xy[9:10,1] <- xy[5:6,1]+0.25 xy[11,1] <- 1.0 xy[12,1] <-1.5 xy[9:10,2] <- xy[5:6,2] xy[11:12,2]<-c(1.25,1.0) D <- dist(xy) x <- defineTrajectories(D, entities) trajectoryPCoA(x, traj.colors = c(\"black\",\"red\", \"blue\"), lwd = 2,                survey.labels = T) x_cent <- centerTrajectories(x) trajectoryPCoA(x_cent, traj.colors = c(\"black\",\"red\", \"blue\"), lwd = 2,                survey.labels = T) m <- cbind(c(rep(mean(xy[1:4,1]),4), rep(mean(xy[5:8,1]),4), rep(mean(xy[9:12,1]),4)),                    c(rep(mean(xy[1:4,2]),4), rep(mean(xy[5:8,2]),4), rep(mean(xy[9:12,2]),4))) m ##        [,1]   [,2] ##  [1,] 0.000 1.5000 ##  [2,] 0.000 1.5000 ##  [3,] 0.000 1.5000 ##  [4,] 0.000 1.5000 ##  [5,] 0.500 1.1250 ##  [6,] 0.500 1.1250 ##  [7,] 0.500 1.1250 ##  [8,] 0.500 1.1250 ##  [9,] 0.875 0.8125 ## [10,] 0.875 0.8125 ## [11,] 0.875 0.8125 ## [12,] 0.875 0.8125 xy_cent <- (xy - m) xy_cent ##         [,1]    [,2] ##  [1,]  0.000 -1.5000 ##  [2,]  0.000 -0.5000 ##  [3,]  0.000  0.5000 ##  [4,]  0.000  1.5000 ##  [5,] -0.250 -1.1250 ##  [6,] -0.250 -0.1250 ##  [7,]  0.000  0.3750 ##  [8,]  0.500  0.8750 ##  [9,] -0.375 -0.8125 ## [10,] -0.375  0.1875 ## [11,]  0.125  0.4375 ## [12,]  0.625  0.1875 max(as.vector(x_cent$d) - as.vector(dist(xy_cent))) ## [1] 4.996004e-16"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"centering-effect","dir":"Articles","previous_headings":"3. Centering trajectories","what":"3.3 Centering effect","title":"Transforming trajectories","text":"Trajectory centering modify properties individual trajectories, can seen comparing trajectory metrics : metrics centering: However, centering modify results metrics compare trajectories, convergence/divergence trajectory dissimilarities. Generally speaking, trajectory convergence studied without centering, whereas calculating trajectory dissimilarity centering may interesting remove differences constant time.","code":"trajectoryMetrics(x) ##   trajectory n t_start t_end duration   length mean_speed mean_angle ## 1          1 4       1     4        3 3.000000  1.0000000    0.00000 ## 2          2 4       1     4        3 2.266124  0.7553746   22.50000 ## 3          3 4       1     4        3 2.118034  0.7060113   58.28253 ##   directionality internal_ss internal_variance ## 1      1.0000000    5.000000         1.6666667 ## 2      0.8274026    2.562500         0.8541667 ## 3      0.5620859    1.609375         0.5364583 trajectoryMetrics(x_cent) ##   trajectory n t_start t_end duration   length mean_speed mean_angle ## 1          1 4       1     4        3 3.000000  1.0000000    0.00000 ## 2          2 4       1     4        3 2.266124  0.7553746   22.50000 ## 3          3 4       1     4        3 2.118034  0.7060113   58.28253 ##   directionality internal_ss internal_variance ## 1      1.0000000    5.000000         1.6666667 ## 2      0.8274026    2.562500         0.8541667 ## 3      0.5620859    1.609375         0.5364583"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"trajectory-centering-excluding-observations","dir":"Articles","previous_headings":"3. Centering trajectories","what":"3.4 Trajectory centering excluding observations","title":"Transforming trajectories","text":"explained introduction, centering can performed respect different states beyond trajectory centroid. Say want align first segment three trajectories focus changes occur later. , first define ecological states excluded computation trajectory position taken reference (center). case states trajectories surveyed later first segment (.e. third fourth observations trajectory): can call centerTrajectories(), supplying vector created parameter exclude: can see effect new centering using:  , check equivalence centering using explicit coordinates, needed stage.","code":"excluded <- c(3:4,7:8,11:12) x_cent_excluded <- centerTrajectories(x, exclude = excluded) trajectoryPCoA(x_cent_excluded, traj.colors = c(\"black\",\"red\", \"blue\"), lwd = 2,                survey.labels = T)"},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"centering-in-a-real-example","dir":"Articles","previous_headings":"3. Centering trajectories","what":"3.5 Centering in a real example","title":"Transforming trajectories","text":"Let us examine effect centering forest plot data. use trajectoryPCoA() display relations forest plot states space draw trajectory plot centering:  Finally, can illustrate effect centering respect initial final states. define vectors exclude remaining states centering: conduct two centerings: can compare effect using:","code":"oldpar <- par(mar=c(4,4,1,1), mfrow=c(1,2)) trajectoryPCoA(avoca_x,                traj.colors = RColorBrewer::brewer.pal(8,\"Accent\"),                 axes=c(1,2), length=0.1, lwd=2) title(\"Before centering\") trajectoryPCoA(centerTrajectories(avoca_x),                traj.colors = RColorBrewer::brewer.pal(8,\"Accent\"),                 axes=c(1,2), length=0.1, lwd=2) title(\"After centering\") par(oldpar) all_but_first <- 9:length(avoca_sites) all_but_last <- 1:(length(avoca_sites)-8) avoca_cent_initial <- centerTrajectories(avoca_x,                                           exclude = all_but_first)  avoca_cent_final <- centerTrajectories(avoca_x,                                         exclude = all_but_last) oldpar <- par(mar=c(4,4,1,1), mfrow=c(1,2)) trajectoryPCoA(avoca_cent_initial,                traj.colors = RColorBrewer::brewer.pal(8,\"Accent\"),                 axes=c(1,2), length=0.1, lwd=2) title(\"Reference: initial state\") trajectoryPCoA(avoca_cent_final,                traj.colors = RColorBrewer::brewer.pal(8,\"Accent\"),                 axes=c(1,2), length=0.1, lwd=2) title(\"Reference: final state\") par(oldpar)"},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"what-is-trajectory-smoothing","dir":"Articles","previous_headings":"4 Smoothing trajectories","what":"4.1 What is trajectory smoothing?","title":"Transforming trajectories","text":"Trajectories may contain variation considered noise, whatever reason (e.g. measurement error). Similarly univariate smoothing temporal series, noise can smoothed trajectory data. done applying multivariate moving average trajectory, using kernel specify average weights. done using function smoothTrajectories().","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"smoothing-kernel","dir":"Articles","previous_headings":"4 Smoothing trajectories","what":"4.2 Smoothing kernel","title":"Transforming trajectories","text":"Function smoothTrajectories() smoothes noise trajectories applying Gaussian kernel trajectory: K(x,xr)=exp(−(x−xr)22⋅b2)\\begin{equation} K(x, x_r) = exp\\left( - \\frac{(x - x_r)^2}{2\\cdot b^2} \\right) \\end{equation} xx survey time target location, xrx_r survey time one original points bb kernel scale. Kernel values normalized one used determine (implicitly) new coordinates ecological states. kernel application turns consecutive ecological states similar.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/articles/TransformingTrajectories.html","id":"smoothing-effect","dir":"Articles","previous_headings":"4 Smoothing trajectories","what":"4.3 Smoothing effect","title":"Transforming trajectories","text":"Function smoothTrajectories() performs smoothing operation returns modified distance matrix describing distances ecological states: following trajectory plot illustrates effect smoothing:  Trajectory smoothing logically alters several trajectory metrics. can checked first evaluating multiple metrics: re-evaluating smoothing: particular, overall trajectory length, speed internal variability reduced trajectory directionality increased. Whether effects desirable , depend application, generally speaking smoothing used clarify trajectory paths visually.","code":"avoca_x_smooth <- smoothTrajectories(avoca_x) oldpar <- par(mar=c(4,4,1,1), mfrow=c(1,2)) trajectoryPCoA(avoca_x,                traj.colors = RColorBrewer::brewer.pal(8,\"Accent\"),                 axes=c(1,2), length=0.1, lwd=2) title(\"Before smoothing\") trajectoryPCoA(avoca_x_smooth,                traj.colors = RColorBrewer::brewer.pal(8,\"Accent\"),                 axes=c(1,2), length=0.1, lwd=2) title(\"After smoothing\") par(oldpar) trajectoryMetrics(avoca_x) ##   trajectory n t_start t_end duration    length mean_speed mean_angle ## 1          1 9    1971  2009       38 10.336602  0.2720158   78.82477 ## 2          2 9    1971  2009       38  8.848673  0.2328598   17.61550 ## 3          3 9    1971  2009       38  8.272077  0.2176862   37.39925 ## 4          4 9    1971  2009       38 14.124698  0.3717026   36.44717 ## 5          5 9    1971  2009       38  7.558909  0.1989187   57.89321 ## 6          6 9    1971  2009       38 10.777816  0.2836267   34.34150 ## 7          7 9    1971  2009       38  8.113223  0.2135059   49.96352 ## 8          8 9    1971  2009       38 10.681940  0.2811037   66.68343 ##   directionality internal_ss internal_variance ## 1      0.6781369    46.25129          5.781411 ## 2      0.6736490    46.87255          5.859068 ## 3      0.8651467    43.86684          5.483355 ## 4      0.5122482    68.61063          8.576329 ## 5      0.6677116    28.49495          3.561869 ## 6      0.7058465    64.08320          8.010400 ## 7      0.7391775    41.30863          5.163579 ## 8      0.5254225    48.97523          6.121903 trajectoryMetrics(avoca_x_smooth) ##   trajectory n t_start t_end duration    length mean_speed mean_angle ## 1          1 9    1971  2009       38  6.776356  0.1783252   26.24172 ## 2          2 9    1971  2009       38  7.601166  0.2000307   22.07862 ## 3          3 9    1971  2009       38  6.792566  0.1787517   15.00878 ## 4          4 9    1971  2009       38 11.049763  0.2907832   36.24248 ## 5          5 9    1971  2009       38  5.741160  0.1510831   22.42376 ## 6          6 9    1971  2009       38  8.884752  0.2338093   11.53945 ## 7          7 9    1971  2009       38  6.351899  0.1671552   21.50039 ## 8          8 9    1971  2009       38  7.884819  0.2074952   16.86362 ##   directionality internal_ss internal_variance ## 1      0.8043023    34.73916          4.342394 ## 2      0.7034985    36.40341          4.550427 ## 3      0.9107370    34.04812          4.256015 ## 4      0.5753210    51.04204          6.380255 ## 5      0.7545522    22.31258          2.789073 ## 6      0.7586568    49.12458          6.140572 ## 7      0.8084251    32.26089          4.032611 ## 8      0.6322645    35.37317          4.421646"},{"path":"https://emf-creaf.github.io/ecotraj/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Miquel De Cáceres. Author, maintainer. Nicolas Djeghri. Author. Anthony Sturbois. Author. Javier De la Casa. Contributor.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"De Cáceres M, Coll L, Legendre P, Allen R, Wiser S, Fortin M, Condit R, Hubbell S (2019). “Trajectory analysis community ecology.” Ecological Monographs, 89, e01350. doi:10.1002/ecm.1350. Sturbois , De Cáceres M, Sánchez-Pinillos M, Schaal G, Gauthier O, Le Mao P, Ponsero , Desroy N (2021). “Extending community trajectory analysis : New metrics representation.” Ecological Modelling, 440, 109400. doi:10.1016/j.ecolmodel.2020.109400. Sturbois , De Cáceres M, Bifolchi , Bioret F, Grall J, Grémare , Labrune C, Robert , Schaal G, Desroy N (2023). “Ecological Quality Assessment: general multivariate framework report quality ecosystems dynamics respect reference conditions.” Ecosphere.","code":"@Article{,   title = {Trajectory analysis in community ecology},   author = {Miquel {De Cáceres} and Lluís Coll and Pierre Legendre and Robert B. Allen and Susan K. Wiser and M.J. Fortin and Richard Condit and Stephen Hubbell},   journal = {Ecological Monographs},   year = {2019},   volume = {89},   pages = {e01350},   doi = {10.1002/ecm.1350}, } @Article{,   title = {Extending community trajectory analysis : New metrics and representation},   author = {Anthony Sturbois and Miquel {De Cáceres} and Martina Sánchez-Pinillos and Gauthier Schaal and Olivier Gauthier and P. {Le Mao} and A. Ponsero and Nicholas Desroy},   journal = {Ecological Modelling},   year = {2021},   volume = {440},   pages = {109400},   doi = {10.1016/j.ecolmodel.2020.109400}, } @Article{,   title = {Ecological Quality Assessment: a general multivariate framework to report the quality of ecosystems and their dynamics with respect to reference conditions},   author = {Anthony Sturbois and Miquel {De Cáceres} and A. Bifolchi and F. Bioret and J. Grall and A. Grémare and C. Labrune and A. Robert and Gauthier Schaal and Nicholas Desroy},   journal = {Ecosphere},   year = {2023}, }"},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Ecological Trajectory Analysis","text":"Package ecotraj package providing Ecological Trajectory Analysis (ETA), framework analyse temporal changes (.e. dynamics) ecological entities defined trajectories chosen multivariate space. ETA related following publications: Initial presentation Ecological Trajectory Analysis (ETA) framework (De Cáceres et al. 2019). ETA extension metrics visualisation modes (Sturbois et al. 2021a). ETA extension cyclical trajectory data (Djeghri et al. prep.). Application multivariate space defined stable isotope data (Sturbois et al. 2021b). Application multivariate space defined elemental composition data (de la Casa et al. 2025). Application ETA framework assessment ecological quality (Sturbois et al. 2023).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/index.html","id":"package-installation","dir":"","previous_headings":"","what":"Package installation","title":"Ecological Trajectory Analysis","text":"Package ecotraj can found CRAN. addition, latest stable ecotraj R package can also installed GitHub follows:","code":"remotes::install_github(\"emf-creaf/ecotraj\")"},{"path":"https://emf-creaf.github.io/ecotraj/index.html","id":"documentation-and-training","dir":"","previous_headings":"","what":"Documentation and training","title":"Ecological Trajectory Analysis","text":"package comes function documentation including examples. Several articles explaining different metrics framework conduct using package functions can found . Presentation slides course ecological trajectory analysis can found .","code":""},{"path":"https://emf-creaf.github.io/ecotraj/index.html","id":"package-functions","dir":"","previous_headings":"","what":"Package functions","title":"Ecological Trajectory Analysis","text":"following lists main package functions, grouped analysis framework: Functions Ecological Trajectory Analysis (ETA) Functions specific Cyclical Ecological Trajectory Analysis (CETA) Functions Ecological Quality Assessment (EQA)","code":""},{"path":"https://emf-creaf.github.io/ecotraj/index.html","id":"related-package","dir":"","previous_headings":"","what":"Related package","title":"Ecological Trajectory Analysis","text":"R package ecoregime, Martina Sánchez-Pinillos, implements Ecological Dynamic Regimes (EDR) framework characterize compare groups ecological trajectories multidimensional spaces defined ecosystem state variables.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Ecological Trajectory Analysis","text":"De Cáceres M, Coll L, Legendre P, Allen RB, Wiser SK, Fortin MJ, Condit R & Hubbell S (2019). Trajectory analysis community ecology. Ecological Monographs 89, e01350 (https://doi.org/10.1002/ecm.1350). de la Casa J, Nogué S, De Cáceres M, Pla-Rabés S, Sardans J, Benavente M, Giralt S, Hernandez , Raposeiro PM & Peñuelas J (2025) Understanding two millenia ecosystem perturbations Azores archipelago elementome trajectories. Ecological Indicators, 176, 113630 (https://doi.org/10.1016/j.ecolind.2025.113630). Djeghri et al (preparation) Going round cycles, going somewhere: Ecological Trajectory Analysis tool decipher seasonality cyclical dynamics. Sturbois , De Cáceres M, Sánchez-Pinillos M, Schaal G, Gauthier O, Le Mao P, Ponsero , & Desroy N (2021a). Extending community trajectory analysis : New metrics representation. Ecological Modelling, 440, 109400 (https://doi.org/10.1016/j.ecolmodel.2020.109400). Sturbois , Cucherousset J, De Cáceres M, Desroy N, Riera P, Carpentier , Quillien N, Grall J, Espinasse B, Cherel Y & Schaal G (2021). Stable Isotope Trajectory Analysis (SITA) : new approach quantify visualize dynamics stable isotope studies. Ecological Monographs, 92, e1501 (https://doi.org/10.1002/ecm.1501). Sturbois , De Cáceres M, Bifolchi , Bioret F, Boyé , Gauthier O, Grall J, Grémare , Labrune C, Robert , Schaal G & Desroy N (2023). Ecological Quality Assessment: general multivariate framework report quality ecosystems dynamics respect reference conditions. Ecosphere 14, e4726 (https://doi.org/10.1002/ecs2.4726).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/avoca.html","id":null,"dir":"Reference","previous_headings":"","what":"Avoca permanent plot dataset — avoca","title":"Avoca permanent plot dataset — avoca","text":"Example dataset data 8 permanent forest plots located slopes valley New Zealand Alps. study area mountainous centered Craigieburn Range (Southern Alps), South Island, New Zealand. Forests plots almost monospecific, mountain beech (Fuscospora cliffortioides) main dominant tree species. Previously forests consisted largely mature stands, affected different disturbances sampling period (1972-2009) includes 9 surveys.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/avoca.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Avoca permanent plot dataset — avoca","text":"Three data items included: avoca_strat object class stratifiedvegdata (see function stratifyvegdata package 'vegclust') structural compositional data. avoca_sites vector identifying sampled sites element avoca_strat. avoca_surveys vector identifying surveys element avoca_strat.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/avoca.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Avoca permanent plot dataset — avoca","text":"New Zealand National Vegetation Survey (NVS) Databank (https://nvs.landcareresearch.co.nz/).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/avoca.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Avoca permanent plot dataset — avoca","text":"Allen, R. B., P. J. Bellingham, S. K. Wiser. 1999. Immediate damage earthquake temperate montane forest. Ecology 80:708–714. Harcombe, P. ., R. B. Allen, J. . Wardle, K. H. Platt. 1998. Spatial temporal patterns stand structure, biomass, growth mortality monospecific Nothofagus solandri var. cliffortioides (Hook. f.) Poole forest New Zealand. Journal Sustainable Forestry 6:313–343. Hurst, J. M., R. B. Allen, D. . Coomes, R. P. Duncan. 2011. Size-specific tree mortality varies neighbourhood crowding disturbance montane Nothofagus forest. PLoS ONE 6.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/defineTrajectories.html","id":null,"dir":"Reference","previous_headings":"","what":"Trajectory definition — defineTrajectories","title":"Trajectory definition — defineTrajectories","text":"Defines data structures trajectory analysis","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/defineTrajectories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trajectory definition — defineTrajectories","text":"","code":"defineTrajectories(d, sites, surveys = NULL, times = NULL)"},{"path":"https://emf-creaf.github.io/ecotraj/reference/defineTrajectories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trajectory definition — defineTrajectories","text":"d symmetric matrix object class dist containing distance values pairs ecological states.. sites character vector indicating ecological entity (site, individual, community) corresponding ecological state (types converted character). surveys integer vector indicating survey corresponding ecological state (necessary surveys order times provided). times numeric vector indicating survey times.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/defineTrajectories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trajectory definition — defineTrajectories","text":"object (list) class trajectories following elements: d: object class dist containing relationships ecological states metadata: data frame describing trajectory states, following columns: sites: character vector indicating ecological entity corresponding ecological state. surveys: integer vector indicating survey corresponding ecological state. times: numeric vector indicating survey times.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/defineTrajectories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trajectory definition — defineTrajectories","text":"surveys provided, times available, surveys taken order times. Otherwise, surveys assumed order occurrences value sites. times provided, made equal surveys.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/defineTrajectories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trajectory definition — defineTrajectories","text":"","code":"#Description of entities (sites) and surveys entities <- c(\"1\",\"1\",\"1\",\"2\",\"2\",\"2\") surveys <- c(1,2,3,1,2,3)    #Raw data table xy<-matrix(0, nrow=6, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4:6,1] <- 0.5 xy[4:6,2] <- xy[1:3,2] xy[6,1]<-1  d <- dist(xy)  # Defines trajectories x <- defineTrajectories(d, entities, surveys) x #> $d #>          1        2        3        4        5 #> 2 1.000000                                     #> 3 2.000000 1.000000                            #> 4 0.500000 1.118034 2.061553                   #> 5 1.118034 0.500000 1.118034 1.000000          #> 6 2.236068 1.414214 1.000000 2.061553 1.118034 #>  #> $metadata #>   sites surveys times #> 1     1       1     1 #> 2     1       2     2 #> 3     1       3     3 #> 4     2       1     1 #> 5     2       2     2 #> 6     2       3     3 #>  #> attr(,\"class\") #> [1] \"trajectories\" \"list\""},{"path":"https://emf-creaf.github.io/ecotraj/reference/dynamicVariation.html","id":null,"dir":"Reference","previous_headings":"","what":"Dynamic variation and variation decomposition — dynamicVariation","title":"Dynamic variation and variation decomposition — dynamicVariation","text":"Function dynamicVariation assesses amount dynamic variation observed across trajectories relative contribution . Function variationDecomposition performs sum squares decomposition total variation three components: (1) across trajectories (entities); (2) across time points; (3) interaction.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/dynamicVariation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dynamic variation and variation decomposition — dynamicVariation","text":"","code":"dynamicVariation(x, ...)  variationDecomposition(x)"},{"path":"https://emf-creaf.github.io/ecotraj/reference/dynamicVariation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dynamic variation and variation decomposition — dynamicVariation","text":"x object class trajectories (children subclasses fd.trajectories cycles). ... Additional params passed function trajectoryDistances.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/dynamicVariation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dynamic variation and variation decomposition — dynamicVariation","text":"Function dynamicVariance returns list three elements (dynamic sum squares, dynamic variance vector trajectory relative contributions) Function variationDecomposition returns data frame results (sum squares, degrees freedom variance estimates) variance component total.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/dynamicVariation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dynamic variation and variation decomposition — dynamicVariation","text":"Function variationDecomposition requires trajectories synchronous. SS sum temporal interaction components correspond SS sum, across trajectories, function trajectoryInternalVariation.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/dynamicVariation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dynamic variation and variation decomposition — dynamicVariation","text":"","code":"#Description of entities and surveys entities <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") surveys <- c(1,2,3,4,1,2,3,4,1,2,3,4)    #Raw data table xy<-matrix(0, nrow=12, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 xy[5:6,2] <- xy[1:2,2] xy[7,2]<-1.5 xy[8,2]<-2.0 xy[5:6,1] <- 0.25 xy[7,1]<-0.5 xy[8,1]<-1.0 xy[9:10,1] <- xy[5:6,1]+0.25 xy[11,1] <- 1.0 xy[12,1] <-1.5 xy[9:10,2] <- xy[5:6,2] xy[11:12,2]<-c(1.25,1.0)  d <- dist(xy)  # Defines trajectories x <- defineTrajectories(d, entities, surveys)  # Assessment of dynamic variation and individual trajectory contributions dynamicVariation(x) #> $dynamic_ss #> [1] 0.7114251 #>  #> $dynamic_variance #> [1] 0.3557125 #>  #> $relative_contributions #>          1          2          3  #> 0.51366204 0.06351261 0.42282535  #>   # Variation decomposition (entity, temporal and interaction) for synchronous  # trajectories: variationDecomposition(x) #>                    ss df  variance #> entities     2.489583  2 1.2447917 #> time         7.453125  3 2.4843750 #> interaction  1.718750  6 0.2864583 #> total       11.661458 11 1.0601326  # check the correspondence with internal variation sum(variationDecomposition(x)[c(\"time\", \"interaction\"),\"ss\"]) #> [1] 9.171875 sum(trajectoryInternalVariation(x)$internal_ss) #> [1] 9.171875"},{"path":"https://emf-creaf.github.io/ecotraj/reference/ecotraj-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ecotraj: Ecological Trajectory Analysis — ecotraj-package","title":"ecotraj: Ecological Trajectory Analysis — ecotraj-package","text":"Analysis temporal changes (.e. dynamics) ecological entities, defined trajectories chosen multivariate space","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/ecotraj-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ecotraj: Ecological Trajectory Analysis — ecotraj-package","text":"De Caceres et al., 2019 (doi:10.1002/ecm.1350 ), Sturbois et al., 2021 (doi:10.1016/j.ecolmodel.2020.109400 ), Sturbois et al., 2023 (doi:10.1002/ecs2.4726 ).","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/ecotraj-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ecotraj: Ecological Trajectory Analysis — ecotraj-package","text":"Maintainer: Miquel De Cáceres miquelcaceres@gmail.com ORCID Authors: Nicolas Djeghri ORCID Anthony Sturbois ORCID Contributors: Javier De la Casa","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/furseals.html","id":null,"dir":"Reference","previous_headings":"","what":"furseals dataset — furseals","title":"furseals dataset — furseals","text":"subset data sets Kernaléguen et al. (2015).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/furseals.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"furseals dataset — furseals","text":"furseals object class data.frame composed 1414 observations 8 variables. ID_SITA Fur seal ID used Sturbois et al. (review), 1 47 ID Fur seal ID used Kernaléguen et al. (2015) initial data set. Species Fur seal species: Antarctic fur seal Arctocephalus gazella subantarctic fur seal . tropicalis. Sexe Fur seal gender, either 'Male' 'Female'. Time Number whisker sections 1 30. Place Breeding place: Crozet, Amsterdam Kerguelen d13C delta 13C value d15N delta 15N value","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/furseals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"furseals dataset — furseals","text":"Briefly, fur seals Antarctic fur seal Arctocephalus gazella subantarctic fur seal . tropicalis whisker SI values yield unique long-term information individual behaviour integrates spatial, trophic temporal dimensions ecological niche. foraging strategies two species sympatric fur seals examined winter 2001/2002 Crozet, Amsterdam Kerguelen Islands (Southern Ocean) using stable isotope values serially sampled whiskers. subset initial data set composed consecutive whisker sections (3 mm-long) starting proximal (facial) end, recently synthesized tissue remaining skin. individuals (n = 47) whiskers totalizing least 30 sections selected initail data, 30 sections selected.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/furseals.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"furseals dataset — furseals","text":"Kernaléguen, L., Arnould, J.P.Y., Guinet, C., Cherel, Y., 2015. Determinants individual foraging specialization inlarge marine vertebrates, Antarctic subantarctic fur seals. Journal Animal Ecology 1081–1091.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/furseals.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"furseals dataset — furseals","text":"Kernaléguen, L., Arnould, J.P.Y., Guinet, C., Cherel, Y.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/glenan.html","id":null,"dir":"Reference","previous_headings":"","what":"Glenan dataset — glenan","title":"Glenan dataset — glenan","text":"Maerl bed data set illustrate Ecological Quality Assessment (EQA)","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/glenan.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Glenan dataset — glenan","text":"Glenan object class data.frame composed 32 observations 252 variables. Abundance.x Abundance (number individuals) taxon x Surveys Indicates different Maerl bed surveys. Treatment Combinations fishing dredges pressure levels. 'CTRL' stands control. Fishing dredges : (1) clam dredge (CD), 70 90 kg, 1.5 m wide, 40 teeth 11 cm ; (2) queen scallop dredge (QSD), 120 kg,1.8 m wide, blade; (3) king scallop dredge (KSD), 190 kg, 1.8 m wide, 18 teeth 10 cm every 9 cm.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/glenan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Glenan dataset — glenan","text":"Experimental data set built Tauran et al. (2020) study impact fishing dredges varying fishing pressures maerl beds, bay Brest (Brittany, France).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/glenan.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Glenan dataset — glenan","text":"Tauran, ., Dubreuil, J., Guyonnet, B., Grall, J., 2020. Impact fishing gears fishing intensities maerl beds: experimental approach. Journal Experimental Marine Biology Ecology 533, 151472. https://doi.org/10.1016/j.jembe.2020.151472","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/glomel.html","id":null,"dir":"Reference","previous_headings":"","what":"Glomel vegetation dataset — glomel","title":"Glomel vegetation dataset — glomel","text":"Vegetation data set illustrate Ecological Quality Assessment (EQA)","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/glomel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Glomel vegetation dataset — glomel","text":"Glomel object class data.frame composed 23 observations 46 variables. ID Station ID. Ref Logical flag indicate stations used define reference envelope. Complementary Comments regarding quality ecosystem. ... Percent cover values (derived Braun-Blanquet ordinal scale) 43 species vascular plants.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/glomel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Glomel vegetation dataset — glomel","text":"nature reserve Landes et Marais de Glomel (Brittany, France) composed temperate Atlantic wet heaths whose reference state commonly considered dominated plant communities associated acid, nutrient poor soils least seasonally water logged dominated Erica tetralix E. ciliaris. data set consists 23 rows 46 columns. first five stations (rows) used define reference envelope, next 18 stations (rows) conservation status assessed.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/glomel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Glomel vegetation dataset — glomel","text":"Aline Bifolchi, Réserve Naturelle des landes et marais de Glomel","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/heatmapdata.html","id":null,"dir":"Reference","previous_headings":"","what":"heatmapdata dataset — heatmapdata","title":"heatmapdata dataset — heatmapdata","text":"Espinasse et al. (2020) tested application isoscapes modelled satellite data description secondary production Northeast pacific. output model fits 0.25° x 0.25° spatial grid covering region spanning 46 62°N 195 235°E supporting delta 13C delta 15N isoscapes 1998 2017.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/heatmapdata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"heatmapdata dataset — heatmapdata","text":"heatmapdata object class dataframe composed 9206 observations 9 variables. Latitude Latitude coordinate station, degrees Longitude Longitude coordinate station, degrees d13C delta 13C modelled value d15N delta 15N modelled value station Station ID Years Period corresponding calculation trajectory metrics Angles Angle alpha (.e direction) stable isotope space Lengths Net change values (.e direction) stable isotope space Angles2 Angle alpha values (.e direction) stable isotope space transformed potential use function geom_spoke","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/heatmapdata.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"heatmapdata dataset — heatmapdata","text":"data sets composed trajectory metrics calculated Sturbois et al. (2021) stations within inter-annual consecutive periods 1998 2017 calculated whole data set Espinasse et al. (2020) 1° x 1° spatial grid.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/heatmapdata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"heatmapdata dataset — heatmapdata","text":"Espinasse, B., Hunt, B.P.V., Batten, S.D., Pakhomov, E.., 2020. Defining isoscapes Northeast Pacific index ocean productivity. Global Ecol Biogeogr 29, 246–261.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/heatmapdata.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"heatmapdata dataset — heatmapdata","text":"Espinasse, B., Hunt, B.P.V., Batten, S.D., Pakhomov, E..","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/is.metric.html","id":null,"dir":"Reference","previous_headings":"","what":"Metricity — is.metric","title":"Metricity — is.metric","text":"Checks whether input dissimilarity matrix metric (.e. triplets fulfill triangle inequality).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/is.metric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metricity — is.metric","text":"","code":"is.metric(x, tol = 1e-04)"},{"path":"https://emf-creaf.github.io/ecotraj/reference/is.metric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metricity — is.metric","text":"x Either object class trajectories,  symmetric matrix object class dist containing distance values pairs ecological states. tol Tolerance value metricity","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/is.metric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metricity — is.metric","text":"boolean indicating metric property","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/is.metric.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Metricity — is.metric","text":"Miquel De Cáceres, CREAF","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/is.synchronous.html","id":null,"dir":"Reference","previous_headings":"","what":"Synchronicity in trajectory observations — is.synchronous","title":"Synchronicity in trajectory observations — is.synchronous","text":"Checks whether trajectories synchronous, meaning observation times equal","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/is.synchronous.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synchronicity in trajectory observations — is.synchronous","text":"","code":"is.synchronous(x)"},{"path":"https://emf-creaf.github.io/ecotraj/reference/is.synchronous.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synchronicity in trajectory observations — is.synchronous","text":"x object class trajectories (children subclasses fd.trajectories cycles)","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/is.synchronous.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synchronicity in trajectory observations — is.synchronous","text":"boolean indicating whether trajectories synchronous","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/is.synchronous.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synchronicity in trajectory observations — is.synchronous","text":"","code":"#Description of sites and surveys sites <- c(\"1\",\"1\",\"1\",\"2\",\"2\",\"2\") surveys <- c(1,2,3,1,2,3)    #Raw data table xy<-matrix(0, nrow=6, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4:6,1] <- 0.5 xy[4:6,2] <- xy[1:3,2] xy[6,1]<-1  #Synchronous trajectories x1 <- defineTrajectories(dist(xy), sites, surveys) is.synchronous(x1) #> [1] TRUE  # Non synchronous trajectories x2 <- defineTrajectories(dist(xy[1:5,]), sites[1:5], surveys[1:5]) is.synchronous(x2) #> [1] FALSE"},{"path":"https://emf-creaf.github.io/ecotraj/reference/isoscape.html","id":null,"dir":"Reference","previous_headings":"","what":"isoscape dataset — isoscape","title":"isoscape dataset — isoscape","text":"data sets subset Espinasse et al. (2020).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/isoscape.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"isoscape dataset — isoscape","text":"isoscape object class dataframe composed 978 observations 6 variables. Latitude Latitude coordinate station, degrees Longitude Longitude coordinate station, degrees d13C delta 13C modelled value d15N delta 15N modelled value station station ID Year Year corresponding modelled stable isotope values","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/isoscape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"isoscape dataset — isoscape","text":"Briefly, Espinasse et al. (2020) tested application isoscapes modelled satellite data description secondary production Northeast pacific. output model fits 0.25° x 0.25° spatial grid covering region spanning 46 62°N 195 235°E supporting delta 13C delta 15N isoscapes 1998 2017. subset composed modelled  delta 13C delta 15N values 1° x 1° spatial grid original modelled dataset 2013 2015.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/isoscape.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"isoscape dataset — isoscape","text":"Espinasse, B., Hunt, B.P.V., Batten, S.D., Pakhomov, E.., 2020. Defining isoscapes Northeast Pacific index ocean productivity. Global Ecol Biogeogr 29, 246–261.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/isoscape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"isoscape dataset — isoscape","text":"Espinasse, B., Hunt, B.P.V., Batten, S.D., Pakhomov, E..","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/northseaZoo.html","id":null,"dir":"Reference","previous_headings":"","what":"North Sea zooplankton dataset — northseaZoo","title":"North Sea zooplankton dataset — northseaZoo","text":"multi-annual (1958-2021), monthly resolved dataset zooplankton community composition Northern Southern North Sea used illustrate Cyclical Ecological Trajectory Analysis (CETA)","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/northseaZoo.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"North Sea zooplankton dataset — northseaZoo","text":"northseaZoo object class list composed 3 objects: Hellinger data.frame containing Hellinger-transformed zooplankton taxa abundances. times vector indicating date (year) associated line Hellinger. sites vector indicating site (\"NNS\" = Northern North Sea, \"SNS\" = Southern North Sea) associated line Hellinger.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/northseaZoo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"North Sea zooplankton dataset — northseaZoo","text":"data describes zooplankton community North Sea sampled Continuous Plankton Recorder (CPR) survey. CPR survey operates towing CPR samplers across commercial routes merchant ships (plankton silk mesh = 270 microm, sampling depth = 5-10 m). brought back laboratory, plankton counted identified taxonomically following standardized protocols. raw data provided survey (doi:10.17031/66f12be296d70 ). reformated two monthly-resolved time series commonest zooplankton taxa Northern North Sea (\"NNS\") Southern North Sea (\"SNS\"). data processing, smoothing performed taking rolling average (month, 5 values averaged: 3 months window + corresponding month previous next years). abundances finally Hellinger-transformed, making amenable ecological diversity study.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/northseaZoo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"North Sea zooplankton dataset — northseaZoo","text":"Nicolas Djeghri, Université de Bretagne Occidentale, France Pierre Hélaouët CPR survey staff, Marine Biological Association, United Kingdom","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/pike.html","id":null,"dir":"Reference","previous_headings":"","what":"pike dataset — pike","title":"pike dataset — pike","text":"data sets comes Cucherousset et al. (2013).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/pike.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"pike dataset — pike","text":"pike object class dataframe composed 58 observations 10 variables. trophic_status_initial Initial trophic status release ID ID used individual Cucherousset et al. (2013) Time Time stable isotope measurement: 1 (Release) 2 (Departure) Time_L Time stable isotope measurement string, either 'Release' 'Departure' Date Date release (common individuals) recapture (variable dependind date departure) Size_mm Size (length) juvenile pike, mm d13C delta 13C values d15N delta 15N values Residence_time Number days release recapture Trophic_status_final Trophic status end study","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/pike.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"pike dataset — pike","text":"Briefly, Cucherousset et al. (2013) released 192 individually tagged, hatchery-raised, juvenile pike (Esox lucius L.) variable initial trophic position (fin delta 13C/delta 15N values). Based delta values, individuals classified zooplanktivorous (delta 15N < 10 ‰) piscivorous (delta 15N > 10 ‰) cannibalism commonly observed species. Individuals released temporarily flooded grassland pike eggs usually hatch Brière marsh (France) identify determinants juvenile natal departure. release site connected unique point adjacent pond used nursery habitat. Fish continuously recaptured migrating flooded grassland adjacent pond. Recaptured individuals (n = 29) anaesthetized, checked tags, measured fork length, fin-clipped quantify changes delta 13C delta 15N values, released.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/pike.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"pike dataset — pike","text":"Cucherousset, J., Paillisson, J.-M., Roussel, J.-M., 2013. Natal departure timing spatially varying environments dependent individual ontogenetic status. Naturwissenschaften 100, 761–768.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/pike.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pike dataset — pike","text":"Cucherousset, J., Paillisson, J.-M., Roussel, J.-M.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/referenceEnvelopes.html","id":null,"dir":"Reference","previous_headings":"","what":"Ecological quality assessment — referenceEnvelopes","title":"Ecological quality assessment — referenceEnvelopes","text":"Functions assess variability ecological reference envelopes assess ecological quality target stations/observations respect reference envelopes (Sturbois et al., review).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/referenceEnvelopes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ecological quality assessment — referenceEnvelopes","text":"","code":"trajectoryEnvelopeVariability(   d,   sites,   surveys = NULL,   envelope = NULL,   nboot.ci = NULL,   alpha.ci = 0.05,   ... )  stateEnvelopeVariability(d, envelope = NULL, nboot.ci = NULL, alpha.ci = 0.05)  compareToTrajectoryEnvelope(   d,   sites,   envelope,   surveys = NULL,   m = 1.5,   comparison_target = \"trajectories\",   distances_to_envelope = FALSE,   distance_percentiles = FALSE,   ... )  compareToStateEnvelope(   d,   envelope,   m = 1.5,   nboot.ci = NULL,   alpha.ci = 0.05,   distances_to_envelope = FALSE,   distance_percentiles = FALSE,   ... )"},{"path":"https://emf-creaf.github.io/ecotraj/reference/referenceEnvelopes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ecological quality assessment — referenceEnvelopes","text":"d symmetric matrix object class dist containing distance values pairs ecological states (see details). sites vector indicating site corresponding ecological state. surveys vector indicating survey corresponding ecological state (necessary surveys order). envelope vector indicating set sites conform reference envelope (sites compared envelope) nboot.ci Number bootstrap samples confidence intervals. nboot.ci = NULL confidence intervals estimated. alpha.ci Error confidence intervals. ... Additional parameters function trajectoryDistances m Fuzziness exponent quality value assessment comparison_target String indicating component compared reference envelope. Either 'trajectories' (compare complete trajectories) 'states' (compare individual trajectory states). distances_to_envelope Flag indicate distances envelope included result distance_percentiles Flag include percentage distances envelope (among sites corresponding reference) smaller site.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/referenceEnvelopes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ecological quality assessment — referenceEnvelopes","text":"Functions stateEnvelopeVariability trajectoryEnvelopeVariability used assess variability reference envelopes. Functions compareToStateEnvelope compareToTrajectoryEnvelope return data frame columns identifying envelope Q statistic ecological quality respect envelope. nboot.ci != NULL extra columns added indicate boundaries confidence interval Q, built using bootstrap samples reference envelope.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/referenceEnvelopes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ecological quality assessment — referenceEnvelopes","text":"Functions stateEnvelopeVariability trajectoryEnvelopeVariability used assess variability reference envelopes. Functions compareToStateEnvelope compareToTrajectoryEnvelope used evaluate ecological quality stations/observations respect predefined reference envelope.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/referenceEnvelopes.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ecological quality assessment — referenceEnvelopes","text":"Sturbois, ., De Cáceres, M., Bifolchi, ., Bioret, F., Boyé, ., Gauthier, O., Grall, J., Grémare, ., Labrune, C., Robert, ., Schaal, G., Desroy, N. (2023). Ecological Quality Assessment: general multivariate framework report quality ecosystems dynamics respect reference conditions. Ecosphere.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/referenceEnvelopes.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ecological quality assessment — referenceEnvelopes","text":"Miquel De Cáceres, CREAF Anthony Sturbois, Vivarmor nature, Réserve Naturelle nationale de la Baie de Saint-Brieuc","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/referenceEnvelopes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ecological quality assessment — referenceEnvelopes","text":"","code":"data(glomel)   # Extract compositional data matrix glomel_comp <- as.matrix(glomel[,!(names(glomel) %in% c(\"ID\", \"Ref\", \"Complementary\"))]) rownames(glomel_comp) <- glomel$ID   # Calculate Bray-Curtis distance matrix  glomel_bc <- vegan::vegdist(glomel_comp, method = \"bray\")   # Define reference envelope (5 stations) by observation ID glomel_env <- glomel$ID[glomel$Ref]   # Assess quality with respect to reference envelope compareToStateEnvelope(glomel_bc, glomel_env) #>    Observation Envelope          Q #> 1           1A     TRUE 1.00000000 #> 2           1B     TRUE 0.81060634 #> 3           1C     TRUE 0.56214189 #> 4           5A     TRUE 1.00000000 #> 5           13     TRUE 0.88208650 #> 6            2    FALSE 0.57224382 #> 7           3A    FALSE 0.39919080 #> 8           3B    FALSE 1.00000000 #> 9           3C    FALSE 0.42318855 #> 10          5B    FALSE 0.28846018 #> 11          6A    FALSE 0.04261028 #> 12          6C    FALSE 0.34551240 #> 13          6D    FALSE 0.02853182 #> 14          7A    FALSE 0.04810891 #> 15          8A    FALSE 0.15160202 #> 16          8B    FALSE 0.11181164 #> 17          8C    FALSE 0.02057370 #> 18           9    FALSE 0.09946578 #> 19          10    FALSE 0.81557507 #> 20          11    FALSE 0.56752876 #> 21          12    FALSE 1.00000000 #> 22         14A    FALSE 0.66577245 #> 23         14B    FALSE 0.09988729"},{"path":"https://emf-creaf.github.io/ecotraj/reference/subsetTrajectories.html","id":null,"dir":"Reference","previous_headings":"","what":"Trajectory subsetting — subsetTrajectories","title":"Trajectory subsetting — subsetTrajectories","text":"Subsets data structures trajectory analysis","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/subsetTrajectories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trajectory subsetting — subsetTrajectories","text":"","code":"subsetTrajectories(   x,   site_selection = NULL,   subtrajectory_selection = NULL,   survey_selection = NULL,   window_selection = NULL )"},{"path":"https://emf-creaf.github.io/ecotraj/reference/subsetTrajectories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trajectory subsetting — subsetTrajectories","text":"x object class trajectories (children subclasses fd.trajectories cycles) site_selection character vector indicating subset entity (site) trajectories selected (NULL, sites included). subtrajectory_selection character vector indicating subset cycles fixed date trajectories selected (used x class fd.trajectories cycles). survey_selection integer vector indicating subset surveys included (NULL, surveys included). window_selection ordered pair time values (e.g. c(lower, upper)) subset observations time window.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/subsetTrajectories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trajectory subsetting — subsetTrajectories","text":"object (list) class trajectories (children subclasses fd.trajectories cycles), depending input.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/subsetTrajectories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trajectory subsetting — subsetTrajectories","text":"using function subsetTrajectories cycles fixed-date trajectories parameter site_selection applies sites (hence allows selecting multiple cycles fixed-date trajectories). Specific cycles fixed-date trajectories can selected using trajectory_selection.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/subsetTrajectories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trajectory subsetting — subsetTrajectories","text":"","code":"#Description of entities surveys and times entities <- c(\"1\",\"1\",\"1\",\"2\",\"2\",\"2\") surveys <- c(1,2,3,1,2,3) times <- c(10, 20, 35, 10, 20, 35)    #Raw data table xy<-matrix(0, nrow=6, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4:6,1] <- 0.5 xy[4:6,2] <- xy[1:3,2] xy[6,1]<-1  d <- dist(xy)  # Defines trajectories x <- defineTrajectories(d, entities, surveys, times = times) x #> $d #>          1        2        3        4        5 #> 2 1.000000                                     #> 3 2.000000 1.000000                            #> 4 0.500000 1.118034 2.061553                   #> 5 1.118034 0.500000 1.118034 1.000000          #> 6 2.236068 1.414214 1.000000 2.061553 1.118034 #>  #> $metadata #>   sites surveys times #> 1     1       1    10 #> 2     1       2    20 #> 3     1       3    35 #> 4     2       1    10 #> 5     2       2    20 #> 6     2       3    35 #>  #> attr(,\"class\") #> [1] \"trajectories\" \"list\"          # Extracts (subset) second trajectory x_2 <- subsetTrajectories(x, \"2\") x_2 #> $d #>          1        2 #> 2 1.000000          #> 3 2.061553 1.118034 #>  #> $metadata #>   sites surveys times #> 1     2       1    10 #> 2     2       2    20 #> 3     2       3    35 #>  #> attr(,\"class\") #> [1] \"trajectories\" \"list\"          # Extracts window corresponding to observation times 20, 35 x_3 <- subsetTrajectories(x, window_selection = c(20, 35)) x_3 #> $d #>          1        2        3 #> 2 1.000000                   #> 3 0.500000 1.118034          #> 4 1.414214 1.000000 1.118034 #>  #> $metadata #>   sites surveys times #> 1     1       2    20 #> 2     1       3    35 #> 3     2       2    20 #> 4     2       3    35 #>  #> attr(,\"class\") #> [1] \"trajectories\" \"list\""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryComparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Trajectory comparison — trajectoryComparison","title":"Trajectory comparison — trajectoryComparison","text":"Functions compare pairs trajectories trajectory segments. Function segmentDistances calculates distance pairs trajectory segments. Function trajectoryDistances calculates distance pairs trajectories. Function trajectoryConvergence performs Mann-Kendall trend test (1) distances trajectories; (2) distance points one trajectory ; (3) variance states among trajectories. Function trajectoryShifts calculates trajectory shifts (.e. advances delays) trajectories assumed follow similar path different speeds time lags.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryComparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trajectory comparison — trajectoryComparison","text":"","code":"segmentDistances(x, distance.type = \"directed-segment\", add = TRUE)  trajectoryDistances(   x,   distance.type = \"DSPD\",   symmetrization = \"mean\",   add = TRUE )  trajectoryConvergence(x, type = \"pairwise.asymmetric\", add = TRUE)  trajectoryShifts(x, add = TRUE)"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryComparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trajectory comparison — trajectoryComparison","text":"x object class trajectories. distance.type type distance index calculated (see section Details). add Flag indicate constant values added (local transformation) correct triplets distance values fulfill triangle inequality. symmetrization Function used obtain symmetric distance, DSPD(T1,T2) = DSPD(T2,T1) (e.g., mean, max min). symmetrization = NULL symmetrization conducted output dissimilarity matrix symmetric. type string indicating convergence test, either \"pairwise.asymmetric\", \"pairwise.symmetric\" \"multiple\" (see details).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryComparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trajectory comparison — trajectoryComparison","text":"Function trajectoryDistances returns object class dist containing distances trajectories (symmetrization = NULL object returned class matrix). Function segmentDistances list following elements: Dseg: Distance matrix segments. Dini: Distance matrix initial points segments. Dfin: Distance matrix final points segments. Dinifin: Distance matrix initial points one segment final point . Dfinini: Distance matrix final points one segment initial point . Function trajectoryConvergence returns list two elements: tau: single value matrix statistic (Mann-Kendall's tau) convergence/divergence test trajectories. type = \"pairwise.symmetric\" matrix square type = \"pairwise.asymmetric\" statistic test row trajectory approaching column trajectory. type = \"multiple\" tau single value. p.value: single value matrix p-value convergence/divergence test trajectories. type = \"pairwise.symmetric\" matrix p-values square type = \"pairwise.asymmetric\" p-value indicates test row trajectory approaching column trajectory. type = \"multiple\" p-value single value. Function trajectoryShifts returns object class data.frame describing trajectory shifts (.e. advances delays). columns data.frame : reference: site (trajectory) taken reference shift evaluation. site: target site (trajectory) shifts computed. survey: target trajectory survey shift computed. time: time corresponding target trajectory survey. timeRef: time associated projected ecological state onto reference trajectory. shift: time difference time target survey time projected ecological state onto reference trajectory. Positive values mean faster trajectories negative values mean slower trajectories.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryComparison.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trajectory comparison — trajectoryComparison","text":"Ecological Trajectory Analysis (ETA) framework analyze dynamics ecological entities described trajectories chosen space multivariate resemblance (De Cáceres et al. 2019). ETA takes trajectories objects analyzed compared geometrically. input distance matrix d ideally metric. , subsets distance triplets fulfill triangle inequality (see utility function .metric). ETA functions require metricity include parameter 'add', default TRUE, meaning whenever triangle inequality broken minimum constant required fulfill added three distances. local (hence, inconsistent across triplets) corrections desired, users find another way modify d achieve metricity, PCoA, metric MDS non-metric MDS (see vignette 'Introduction Ecological Trajectory Analysis'). parameter 'add' set FALSE problems triangle inequality exist, ETA functions may provide missing values cases . resemblance trajectories done adapting concepts procedures used analysis trajectories space (.e. movement data) (Besse et al. 2016). Parameter distance.type type distance index calculated function segmentDistances following options (Besse et al. 2016, De Cáceres et al. 2019: Hausdorff: Hausdorff distance two segments. directed-segment: Directed segment distance (default). PPA: Perpendicular-parallel-angle distance. case function trajectoryDistances following values possible (De Cáceres et al. 2019): Hausdorff: Hausdorff distance two trajectories. SPD: Segment Path Distance. DSPD: Directed Segment Path Distance (default). TSPD: Time-Sensitive Path Distance (experimental). Function trajectoryConvergence used study convergence/divergence trajectories. three possible tests, first two concerning pairwise comparisons trajectories. type = \"pairwise.asymmetric\" pairwise comparisons considered test asymmetric, meaning test trajectory approaching trajectory B along time. test uses distances orthogonal projections (.e. rejections) states one trajectory onto . type = \"pairwise.symmetric\" pairwise comparisons considered test whether two trajectories become closer along surveys. test requires number surveys trajectories uses sequence distances states two trajectories corresponding survey. type = \"multiple\" function performs single test convergence among trajectories. test needs trajectories synchronous. case, test uses sequence variability states corresponding time. cases, Mann-Kendall test (see MannKendall) used determine sequence values monotonously increasing decreasing. Function trajectoryShifts intended used compare trajectories assumed follow similar pathway. function evaluates shifts (advances delays) due different trajectory speeds existence time lags . done using calls trajectoryProjection. Whenever projection given target state reference trajectory exist shift evaluated (missing values returned).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryComparison.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Trajectory comparison — trajectoryComparison","text":"Besse, P., Guillouet, B., Loubes, J.-M. & François, R. (2016). Review perspective distance based trajectory clustering. IEEE Trans. Intell. Transp. Syst., 17, 3306–3317. De Cáceres M, Coll L, Legendre P, Allen RB, Wiser SK, Fortin MJ, Condit R & Hubbell S. (2019). Trajectory analysis community ecology. Ecological Monographs 89, e01350.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryComparison.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trajectory comparison — trajectoryComparison","text":"Miquel De Cáceres, CREAF Nicolas Djeghri, UBO","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryComparison.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trajectory comparison — trajectoryComparison","text":"","code":"#Description of entities (sites) and surveys entities <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") surveys <- c(1,2,3,4,1,2,3,4,1,2,3,4)    #Raw data table xy<-matrix(0, nrow=12, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4,2]<-3 xy[5:6,2] <- xy[1:2,2] xy[7,2]<-1.5 xy[8,2]<-2.0 xy[5:6,1] <- 0.25 xy[7,1]<-0.5 xy[8,1]<-1.0 xy[9:10,1] <- xy[5:6,1]+0.25 xy[11,1] <- 1.0 xy[12,1] <-1.5 xy[9:10,2] <- xy[5:6,2] xy[11:12,2]<-c(1.25,1.0)    #Draw trajectories trajectoryPlot(xy, entities, surveys,                  traj.colors = c(\"black\",\"red\", \"blue\"), lwd = 2)   #Distance matrix d <- dist(xy) d #>            1         2         3         4         5         6         7 #> 2  1.0000000                                                             #> 3  2.0000000 1.0000000                                                   #> 4  3.0000000 2.0000000 1.0000000                                         #> 5  0.2500000 1.0307764 2.0155644 3.0103986                               #> 6  1.0307764 0.2500000 1.0307764 2.0155644 1.0000000                     #> 7  1.5811388 0.7071068 0.7071068 1.5811388 1.5206906 0.5590170           #> 8  2.2360680 1.4142136 1.0000000 1.4142136 2.1360009 1.2500000 0.7071068 #> 9  0.5000000 1.1180340 2.0615528 3.0413813 0.2500000 1.0307764 1.5000000 #> 10 1.1180340 0.5000000 1.1180340 2.0615528 1.0307764 0.2500000 0.5000000 #> 11 1.6007811 1.0307764 1.2500000 2.0155644 1.4577380 0.7905694 0.5590170 #> 12 1.8027756 1.5000000 1.8027756 2.5000000 1.6007811 1.2500000 1.1180340 #>            8         9        10        11 #> 2                                          #> 3                                          #> 4                                          #> 5                                          #> 6                                          #> 7                                          #> 8                                          #> 9  2.0615528                               #> 10 1.1180340 1.0000000                     #> 11 0.7500000 1.3462912 0.5590170           #> 12 1.1180340 1.4142136 1.0000000 0.5590170    #Trajectory data x <- defineTrajectories(d, entities, surveys)  #Distances between trajectory segments segmentDistances(x, distance.type = \"Hausdorff\") #> $Dseg #>           1[1-2]    1[2-3]    1[3-4]    2[1-2]    2[2-3]    2[3-4]    3[1-2] #> 1[2-3] 1.0000000                                                             #> 1[3-4] 2.0000000 1.0000000                                                   #> 2[1-2] 0.2500000 1.0307764 2.0155644                                         #> 2[2-3] 1.0307764 0.7071068 1.5811388 1.0000000                               #> 2[3-4] 1.5811388 1.0000000 1.4142136 1.5206906 0.7071068                     #> 3[1-2] 0.5000000 1.1180340 2.0615528 0.2500000 1.0307764 1.5000000           #> 3[2-3] 1.1180340 1.1180340 2.0124612 1.0307764 0.5590170 0.7500000 1.0000000 #> 3[3-4] 1.6007811 1.5000000 2.0155644 1.4577380 1.1180340 1.0606602 1.3416408 #>           3[2-3] #> 1[2-3]           #> 1[3-4]           #> 2[1-2]           #> 2[2-3]           #> 2[3-4]           #> 3[1-2]           #> 3[2-3]           #> 3[3-4] 0.5590170 #>  #> $Dini #>           1[1-2]    1[2-3]    1[3-4]    2[1-2]    2[2-3]    2[3-4]    3[1-2] #> 1[2-3] 1.0000000                                                             #> 1[3-4] 2.0000000 1.0000000                                                   #> 2[1-2] 0.2500000 1.0307764 2.0155644                                         #> 2[2-3] 1.0307764 0.2500000 1.0307764 1.0000000                               #> 2[3-4] 1.5811388 0.7071068 0.7071068 1.5206906 0.5590170                     #> 3[1-2] 0.5000000 1.1180340 2.0615528 0.2500000 1.0307764 1.5000000           #> 3[2-3] 1.1180340 0.5000000 1.1180340 1.0307764 0.2500000 0.5000000 1.0000000 #> 3[3-4] 1.6007811 1.0307764 1.2500000 1.4577380 0.7905694 0.5590170 1.3462912 #>           3[2-3] #> 1[2-3]           #> 1[3-4]           #> 2[1-2]           #> 2[2-3]           #> 2[3-4]           #> 3[1-2]           #> 3[2-3]           #> 3[3-4] 0.5590170 #>  #> $Dfin #>           1[1-2]    1[2-3]    1[3-4]    2[1-2]    2[2-3]    2[3-4]    3[1-2] #> 1[2-3] 1.0000000                                                             #> 1[3-4] 2.0000000 1.0000000                                                   #> 2[1-2] 0.2500000 1.0307764 2.0155644                                         #> 2[2-3] 0.7071068 0.7071068 1.5811388 0.5590170                               #> 2[3-4] 1.4142136 1.0000000 1.4142136 1.2500000 0.7071068                     #> 3[1-2] 0.5000000 1.1180340 2.0615528 0.2500000 0.5000000 1.1180340           #> 3[2-3] 1.0307764 1.2500000 2.0155644 0.7905694 0.5590170 0.7500000 0.5590170 #> 3[3-4] 1.5000000 1.8027756 2.5000000 1.2500000 1.1180340 1.1180340 1.0000000 #>           3[2-3] #> 1[2-3]           #> 1[3-4]           #> 2[1-2]           #> 2[2-3]           #> 2[3-4]           #> 3[1-2]           #> 3[2-3]           #> 3[3-4] 0.5590170 #>  #> $Dinifin #>           1[1-2]    1[2-3]   1[3-4]    2[1-2]    2[2-3]    2[3-4]   3[1-2] #> 1[1-2] 1.0000000 2.0000000 3.000000 1.0307764 1.5811388 2.2360680 1.118034 #> 1[2-3] 0.0000000 1.0000000 2.000000 0.2500000 0.7071068 1.4142136 0.500000 #> 1[3-4] 1.0000000 0.0000000 1.000000 1.0307764 0.7071068 1.0000000 1.118034 #> 2[1-2] 1.0307764 2.0155644 3.010399 1.0000000 1.5206906 2.1360009 1.030776 #> 2[2-3] 0.2500000 1.0307764 2.015564 0.0000000 0.5590170 1.2500000 0.250000 #> 2[3-4] 0.7071068 0.7071068 1.581139 0.5590170 0.0000000 0.7071068 0.500000 #> 3[1-2] 1.1180340 2.0615528 3.041381 1.0307764 1.5000000 2.0615528 1.000000 #> 3[2-3] 0.5000000 1.1180340 2.061553 0.2500000 0.5000000 1.1180340 0.000000 #> 3[3-4] 1.0307764 1.2500000 2.015564 0.7905694 0.5590170 0.7500000 0.559017 #>           3[2-3]   3[3-4] #> 1[1-2] 1.6007811 1.802776 #> 1[2-3] 1.0307764 1.500000 #> 1[3-4] 1.2500000 1.802776 #> 2[1-2] 1.4577380 1.600781 #> 2[2-3] 0.7905694 1.250000 #> 2[3-4] 0.5590170 1.118034 #> 3[1-2] 1.3462912 1.414214 #> 3[2-3] 0.5590170 1.000000 #> 3[3-4] 0.0000000 0.559017 #>  segmentDistances(x, distance.type = \"directed-segment\") #> $Dseg #>           1[1-2]    1[2-3]    1[3-4]    2[1-2]    2[2-3]    2[3-4]    3[1-2] #> 1[2-3] 1.0000000                                                             #> 1[3-4] 2.0000000 1.0000000                                                   #> 2[1-2] 0.2500000 1.0307764 2.0155644                                         #> 2[2-3] 1.0307764 0.7071068 1.5811388 1.0000000                               #> 2[3-4] 1.5811388 1.0000000 1.4142136 1.5206906 0.7071068                     #> 3[1-2] 0.5000000 1.1180340 2.0615528 0.2500000 1.0307764 1.5000000           #> 3[2-3] 1.1180340 1.1180340 2.0124612 1.0307764 0.5590170 0.7500000 1.0000000 #> 3[3-4] 1.6007811 1.5590170 2.0155644 1.4577380 1.1180340 1.0606602 1.5590170 #>           3[2-3] #> 1[2-3]           #> 1[3-4]           #> 2[1-2]           #> 2[2-3]           #> 2[3-4]           #> 3[1-2]           #> 3[2-3]           #> 3[3-4] 0.5590170 #>  #> $Dini #>           1[1-2]    1[2-3]    1[3-4]    2[1-2]    2[2-3]    2[3-4]    3[1-2] #> 1[2-3] 1.0000000                                                             #> 1[3-4] 2.0000000 1.0000000                                                   #> 2[1-2] 0.2500000 1.0307764 2.0155644                                         #> 2[2-3] 1.0307764 0.2500000 1.0307764 1.0000000                               #> 2[3-4] 1.5811388 0.7071068 0.7071068 1.5206906 0.5590170                     #> 3[1-2] 0.5000000 1.1180340 2.0615528 0.2500000 1.0307764 1.5000000           #> 3[2-3] 1.1180340 0.5000000 1.1180340 1.0307764 0.2500000 0.5000000 1.0000000 #> 3[3-4] 1.6007811 1.0307764 1.2500000 1.4577380 0.7905694 0.5590170 1.3462912 #>           3[2-3] #> 1[2-3]           #> 1[3-4]           #> 2[1-2]           #> 2[2-3]           #> 2[3-4]           #> 3[1-2]           #> 3[2-3]           #> 3[3-4] 0.5590170 #>  #> $Dfin #>           1[1-2]    1[2-3]    1[3-4]    2[1-2]    2[2-3]    2[3-4]    3[1-2] #> 1[2-3] 1.0000000                                                             #> 1[3-4] 2.0000000 1.0000000                                                   #> 2[1-2] 0.2500000 1.0307764 2.0155644                                         #> 2[2-3] 0.7071068 0.7071068 1.5811388 0.5590170                               #> 2[3-4] 1.4142136 1.0000000 1.4142136 1.2500000 0.7071068                     #> 3[1-2] 0.5000000 1.1180340 2.0615528 0.2500000 0.5000000 1.1180340           #> 3[2-3] 1.0307764 1.2500000 2.0155644 0.7905694 0.5590170 0.7500000 0.5590170 #> 3[3-4] 1.5000000 1.8027756 2.5000000 1.2500000 1.1180340 1.1180340 1.0000000 #>           3[2-3] #> 1[2-3]           #> 1[3-4]           #> 2[1-2]           #> 2[2-3]           #> 2[3-4]           #> 3[1-2]           #> 3[2-3]           #> 3[3-4] 0.5590170 #>  #> $Dinifin #>           1[1-2]    1[2-3]   1[3-4]    2[1-2]    2[2-3]    2[3-4]   3[1-2] #> 1[1-2] 1.0000000 2.0000000 3.000000 1.0307764 1.5811388 2.2360680 1.118034 #> 1[2-3] 0.0000000 1.0000000 2.000000 0.2500000 0.7071068 1.4142136 0.500000 #> 1[3-4] 1.0000000 0.0000000 1.000000 1.0307764 0.7071068 1.0000000 1.118034 #> 2[1-2] 1.0307764 2.0155644 3.010399 1.0000000 1.5206906 2.1360009 1.030776 #> 2[2-3] 0.2500000 1.0307764 2.015564 0.0000000 0.5590170 1.2500000 0.250000 #> 2[3-4] 0.7071068 0.7071068 1.581139 0.5590170 0.0000000 0.7071068 0.500000 #> 3[1-2] 1.1180340 2.0615528 3.041381 1.0307764 1.5000000 2.0615528 1.000000 #> 3[2-3] 0.5000000 1.1180340 2.061553 0.2500000 0.5000000 1.1180340 0.000000 #> 3[3-4] 1.0307764 1.2500000 2.015564 0.7905694 0.5590170 0.7500000 0.559017 #>           3[2-3]   3[3-4] #> 1[1-2] 1.6007811 1.802776 #> 1[2-3] 1.0307764 1.500000 #> 1[3-4] 1.2500000 1.802776 #> 2[1-2] 1.4577380 1.600781 #> 2[2-3] 0.7905694 1.250000 #> 2[3-4] 0.5590170 1.118034 #> 3[1-2] 1.3462912 1.414214 #> 3[2-3] 0.5590170 1.000000 #> 3[3-4] 0.0000000 0.559017 #>   #Distances between trajectories trajectoryDistances(x, distance.type = \"Hausdorff\") #>          1        2 #> 2 2.015564          #> 3 2.061553 1.500000 trajectoryDistances(x, distance.type = \"DSPD\") #>           1         2 #> 2 0.7214045           #> 3 1.1345910 0.5714490    #Trajectory convergence/divergence trajectoryConvergence(x) #> $tau #>           1         2         3 #> 1        NA 0.9128709 0.9128709 #> 2 0.9128709        NA 0.9128709 #> 3 0.9128709 0.6666666        NA #>  #> $p.value #>           1         2         3 #> 1        NA 0.1485617 0.1485617 #> 2 0.1485617        NA 0.1485617 #> 3 0.1485617 0.3081795        NA #>   #### Example of trajectory shifts #Description of entities (sites) and surveys entities2 <- c(\"1\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"3\") times2 <- c(1,2,3,4,1,2,3,4,1,2,3,4)    #Raw data table xy2<-matrix(0, nrow=12, ncol=2) xy2[2,2]<-1 xy2[3,2]<-2 xy2[4,2]<-3 xy2[5:8,1] <- 0.25 xy2[5:8,2] <- xy2[1:4,2] + 0.5 # States are all shifted with respect to site \"1\" xy2[9:12,1] <- 0.5 xy2[9:12,2] <- xy2[1:4,2]*1.25  # 1.25 times faster than site \"1\"    #Draw trajectories trajectoryPlot(xy2, entities2,                  traj.colors = c(\"black\",\"red\", \"blue\"), lwd = 2)   #Trajectory data x2 <- defineTrajectories(dist(xy2), entities2, times = times2)  #Check that the third trajectory is faster trajectorySpeeds(x2) #>     S1   S2   S3 Path #> 1 1.00 1.00 1.00 1.00 #> 2 1.00 1.00 1.00 1.00 #> 3 1.25 1.25 1.25 1.25  #Trajectory shifts trajectoryShifts(x2) #>    reference site survey time timeRef shift #> 1          1    2      1    1    1.50  0.50 #> 2          1    2      2    2    2.50  0.50 #> 3          1    2      3    3    3.50  0.50 #> 4          1    2      4    4      NA    NA #> 5          1    3      1    1    1.00  0.00 #> 6          1    3      2    2    2.25  0.25 #> 7          1    3      3    3    3.50  0.50 #> 8          1    3      4    4      NA    NA #> 9          2    1      1    1      NA    NA #> 10         2    1      2    2    1.50 -0.50 #> 11         2    1      3    3    2.50 -0.50 #> 12         2    1      4    4    3.50 -0.50 #> 13         2    3      1    1      NA    NA #> 14         2    3      2    2    1.75 -0.25 #> 15         2    3      3    3    3.00  0.00 #> 16         2    3      4    4      NA    NA #> 17         3    1      1    1    1.00  0.00 #> 18         3    1      2    2    1.80 -0.20 #> 19         3    1      3    3    2.60 -0.40 #> 20         3    1      4    4    3.40 -0.60 #> 21         3    2      1    1    1.40  0.40 #> 22         3    2      2    2    2.20  0.20 #> 23         3    2      3    3    3.00  0.00 #> 24         3    2      4    4    3.80 -0.20"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclical.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for Cyclical Ecological Trajectory Analysis — trajectoryCyclical","title":"Functions for Cyclical Ecological Trajectory Analysis — trajectoryCyclical","text":"Cyclical extension Ecological Trajectory Analysis (CETA) aims allowing ETA describe ecological trajectories presenting cyclical dynamics seasonal day/night cycles. call trajectories \"cyclical\". CETA operates subdividing cyclical trajectories two types sub-trajectories interest: cycles fixed-date trajectories. Cycles sub-trajectories joining ecological states belonging cycle. Fixed-date trajectories sub-trajectories joining ecological states date different cycles (e.g. multi-annual cyclical trajectory seasonality, fixed-date trajectory might join ecological states associated January months different years). recommend reading vignette CETA prior use .CETA functions provided achieve one two goals: Reformatting data analyze either cycles fixed-date trajectories. reformatted data can fed existing ETA functions obtain desired metrics (although special care need taken cycles, see details). Providing new metrics relevant cycles complementing ETA functions.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for Cyclical Ecological Trajectory Analysis — trajectoryCyclical","text":"","code":"extractCycles(   x,   cycleDuration,   dates = NULL,   startdate = NA,   externalBoundary = \"end\",   minEcolStates = 3 )  extractFixedDateTrajectories(   x,   cycleDuration,   dates = NULL,   fixedDate = NULL,   namesFixedDate = NULL,   minEcolStates = 2 )  cycleConvexity(   x,   cycleDuration,   dates = NULL,   startdate = NA,   externalBoundary = \"end\",   minEcolStates = 3,   add = TRUE )  cycleShifts(   x,   cycleDuration,   dates = NULL,   datesCS = NULL,   centering = TRUE,   minEcolStates = 3,   add = TRUE )  cycleMetrics(   x,   cycleDuration,   dates = NULL,   startdate = NA,   externalBoundary = \"end\",   minEcolStates = 3,   add = TRUE )"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for Cyclical Ecological Trajectory Analysis — trajectoryCyclical","text":"x object class trajectories describing cyclical trajectory. cycleDuration value indicating duration cycle. Must units times. dates optional vector indicating dates (< cycleDuration) corresponding ecosystem state. Must units times. Defaults times modulo cycleDuration (see details). startdate optional value indicating date cycles must begin. Must units times. Defaults min(dates). externalBoundary optional string, either \"end\" \"start\", indicating whether start end cycles must considered \"external\". Defaults \"end\". minEcolStates optional integer indicating minimum number ecological states return fixed-date trajectory. Fixed-date trajectories comprising less ecological states minEcolStates discarded appear output function. Defaults 2. fixedDate optional vector dates fixed-date trajectories must computed. Defaults unique(dates), resulting returning possible fixed-date trajectories. namesFixedDate optional vector names associated fixedDate. Defaults round(fixedDate,2). add Flag indicate constant values added (local transformation) correct triplets distance values fulfill triangle inequality. datesCS optional vector indicating dates cyclical shift must computed. Default unique(dates) resulting computation possible cyclical shifts. centering optional boolean. cycles centered computing cyclical shifts? Defaults TRUE.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions for Cyclical Ecological Trajectory Analysis — trajectoryCyclical","text":"Function extractCycles returns base information needed describe cycles. outputs meant used input ETA functions. Importantly, within cycles, ecological states can considered \"internal\" \"external\". operations metrics within ETA use ecological states whereas others use \"internal\" ones (see details). Function extractCycles returns object class cycles containing: d: object class dist, new distance matrix describing cycles. take account ecological states end cycle start another,d contains duplications. compared input matrix, d may present deletions ecological states belong cycles (e.g. due minEcolStates)) metadata: object class data.frame describing ecological states d columns: sites: sites associated  ecological states. Cycles: names cycle ecological states belongs . cycle name built combining site name C1, C2, C3... chronological order. surveys: renumbering surveys describe individual Cycles. times: times associated ecological states. internal: boolean vector TRUE indicating \"internal\" ecological states whereas FALSE indicates \"external\" ecological states. implications outputs extractCycles treated ETA functions (see details). dates: dates associated ecological states. interpolationInfo: output appear ecological states interpolated. used internally plotting functions (see cyclePCoA) intended interest end user. Function extractFixedDateTrajectories returns base information needed describe fixed-date trajectories. outputs meant used inputs ETA functions order obtain desired metrics. Function extractFixedDateTrajectories returns object class fd.trajectories containing: d: object class dist, new distance matrix describing fixed-date trajectories. compared input matrix, d may present deletions ecological states belong fixed-date trajectories (e.g. due minEcolStates)) metadata: object class data.frame describing ecological states d columns: sites: sites  ecological states. fdT: names fixed-date trajectory ecological states belongs . fixed-date trajectory name built combining site name \"fdT\" name fixed date (namesFixedDate). surveys: renumbering surveys describe individual fixed date trajectories. times: times associated ecological states. dates: dates associated ecological states. Function cycleConvexity returns vector containing values 0 1 describing convexity cycles. Importantly, outputs extractCycles used inputs cycleConvexity (see details). Function cycleShifts returns object class data.frame describing cyclical shifts (.e. advances delays). Importantly, outputs extractCycles used inputs cycleShifts (see details). columns data.frame : site: site cycle shift computed. dateCS: date cycle shift computed. timeCS: time ecological state cycle shift computed (.e. time associated projected ecological state). timeRef: time associated reference ecological state. timeScale: time difference reference projected ecological state. cyclicalShift: cyclical shift computed (advance positive, delay negative) units times input. Function cycleMetrics returns data frame rows cycles columns different cycle metrics.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclical.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions for Cyclical Ecological Trajectory Analysis — trajectoryCyclical","text":"CETA functions: Function extractCycles reformats object class trajectories describing one cyclical trajectories new object class trajectories designed analysis cycles. Function extractFixedDateTrajectories reformats object class trajectories describing one cyclical trajectories new object class trajectories designed analysis fixed-date trajectories. Function cycleConvexity computes \"convexity\" cycles embedded one cyclical trajectories. Function cycleShifts computes cyclical shifts (.e. advances delays) can obtain one cyclical trajectories. CETA little time-explicit rest ETA. Hence parameter times needed initiate CETA approach (classical ETA functions can work surveys ordinal). CETA also distinguishes times dates. Times represent linear time whereas dates represent circular time (e.g. month year). Dates circular variables, coming back zero reaching maximum value cycleDuration corresponding duration cycle. CETA, dates default assumed times modulo cycleDuration. fit many applications case (.e. offset times dates), dates can specified. dates however need remain compatible times cycleDuration (.e. (times modulo cycleDuration) - (dates modulo cycleDuration) needs constant). IMPORTANT: Cycles within CETA comprises \"internal\" \"external\" ecological states (see output function extractCycles). distinction solution call \"December--January segment problem\". Taking example monthly resolved multi-annual time series, way make cycles take set ecological states representing months January December year. However, omits segment linking December year Y January year Y+1. However, including segments means two January months cycle. proposed solution CETA (case specific example) set January month year Y+1 \"external\". \"external\" ecological states need specific handling operation ETA, namely: Centering external ecological states must excluded computation included nonetheless procedure. handled automatically function centerTrajectories. Trajectory internal variability, external ecological states must excluded. handled directly trajectoryInternalVariation function. Visualization principal coordinate analysis cycles. dedicated function cyclePCoA must preferred trajectoryPCoA. general rule outputs extractCycles used inputs , non-CETA function (e.g. trajectoryDistances). three important exceptions rule: functions cycleConvexity, cycleShifts cycleMetrics. Instead, inputs three functions parallel inputs extractCycles given analysis. cycleConvexity, convexity uses angles obtained whole cyclical trajectory, cycles. cycleShifts, cyclical shifts obtained respect particular set cycles. cycleMetrics, calls cycleConvexity. function instead compute adapted set cycles obtain metric. Note: Function cycleShifts computation intensive large data sets, may execute immediately. information detailed examples use CETA functions can found associated vignette.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclical.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Functions for Cyclical Ecological Trajectory Analysis — trajectoryCyclical","text":"Djeghri et al. (preparation) Going round cycles, going somewhere: Ecological Trajectory Analysis tool decipher seasonality cyclical dynamics.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclical.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functions for Cyclical Ecological Trajectory Analysis — trajectoryCyclical","text":"Nicolas Djeghri, UBO Miquel De Cáceres, CREAF","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclical.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions for Cyclical Ecological Trajectory Analysis — trajectoryCyclical","text":"","code":"#First build a toy dataset with: #The sampling times of the time series timesToy <- 0:30   #The duration of the cycles (i.e. the periodicity of the time series) cycleDurationToy <- 10   #The sites sampled (only one named \"A\") sitesToy <- rep(c(\"A\"),length(timesToy))   #And prepare a trend term trend <- 0.05  #Build cyclical data (note that we apply the trend only to x): x <- sin((timesToy*2*pi)/cycleDurationToy)+trend*timesToy y <- cos((timesToy*2*pi)/cycleDurationToy) matToy <- cbind(x,y)  #And express it as distances: dToy <- dist(matToy)  #Make it an object of class trajectory: cyclicalTrajToy <- defineTrajectories(d = dToy,                                       sites = sitesToy,                                       times = timesToy)  #At this stage, cycles and / or fixed date trajectories are not isolated. #This done with the two CETA \"extract\" functions: cyclesToy <- extractCycles(x = cyclicalTrajToy,                            cycleDuration = cycleDurationToy) fdTrajToy <- extractFixedDateTrajectories(x = cyclicalTrajToy,                                           cycleDuration = cycleDurationToy)  #The output of these functions can be used as input #for other ETA functions to get metrics of interest #such as trajectory length: trajectoryLengths(x = cyclesToy) #>             S1        S2        S3       S4        S5        S6       S7 #> A_C1 0.6657661 0.6486857 0.6200532 0.590033 0.5706904 0.5706904 0.590033 #> A_C2 0.6657661 0.6486857 0.6200532 0.590033 0.5706904 0.5706904 0.590033 #> A_C3 0.6657661 0.6486857 0.6200532 0.590033 0.5706904 0.5706904 0.590033 #>             S8        S9       S10     Path #> A_C1 0.6200532 0.6486857 0.6657661 6.190457 #> A_C2 0.6200532 0.6486857 0.6657661 6.190457 #> A_C3 0.6200532 0.6486857 0.6657661 6.190457 trajectoryLengths(x = fdTrajToy) #>          S1  S2  S3 Path #> A_fdT_0 0.5 0.5 0.5  1.5 #> A_fdT_1 0.5 0.5  NA  1.0 #> A_fdT_2 0.5 0.5  NA  1.0 #> A_fdT_3 0.5 0.5  NA  1.0 #> A_fdT_4 0.5 0.5  NA  1.0 #> A_fdT_5 0.5 0.5  NA  1.0 #> A_fdT_6 0.5 0.5  NA  1.0 #> A_fdT_7 0.5 0.5  NA  1.0 #> A_fdT_8 0.5 0.5  NA  1.0 #> A_fdT_9 0.5 0.5  NA  1.0  #or distances between trajectories: trajectoryDistances(x = cyclesToy) #>           A_C1      A_C2 #> A_C2 0.4602096           #> A_C3 0.8276663 0.4602096 trajectoryDistances(x = fdTrajToy) #>           A_fdT_0   A_fdT_1   A_fdT_2   A_fdT_3   A_fdT_4   A_fdT_5   A_fdT_6 #> A_fdT_1 0.3072093                                                             #> A_fdT_2 0.8665898 0.5780759                                                   #> A_fdT_3 1.4323048 1.1644260 0.6200532                                         #> A_fdT_4 1.8510122 1.6249720 1.1457171 0.5618814                               #> A_fdT_5 2.0155644 1.8313038 1.4389310 0.9356465 0.3826877                     #> A_fdT_6 1.8510122 1.7685615 1.5710039 1.2479634 0.8255705 0.3826877           #> A_fdT_7 1.4323048 1.5044289 1.5356710 1.4521130 1.2479634 0.9356465 0.5618814 #> A_fdT_8 0.8665898 1.0704423 1.3521130 1.5356710 1.5710039 1.4389310 1.1457171 #> A_fdT_9 0.3072093 0.5255705 1.0704423 1.5044289 1.7685615 1.8313038 1.6249720 #>           A_fdT_7   A_fdT_8 #> A_fdT_1                     #> A_fdT_2                     #> A_fdT_3                     #> A_fdT_4                     #> A_fdT_5                     #> A_fdT_6                     #> A_fdT_7                     #> A_fdT_8 0.6200532           #> A_fdT_9 1.1644260 0.5780759  #In addition CETA adds two additional specific metrics. #that require the same inputs as function extractCycles(): cycleConvexity(x = cyclicalTrajToy,                cycleDuration = cycleDurationToy) #> A_C1 A_C2 A_C3  #>   NA    1    1  #The NA with the first cycle, is expected: #Cycle convexity cannot be computed right at the boundary of the time series cycleShifts(x = cyclicalTrajToy,             cycleDuration = cycleDurationToy) #>    sites dateCS timeCS timeRef timeScale cyclicalShift #> 1      A      0     20      10        10  0.000000e+00 #> 2      A      1     21      11        10  0.000000e+00 #> 3      A      2     22      12        10 -1.776357e-15 #> 4      A      3     23      13        10  0.000000e+00 #> 5      A      4     24      14        10  0.000000e+00 #> 6      A      5     15       5        10 -1.776357e-15 #> 7      A      5     25       5        20  0.000000e+00 #> 8      A      5     25      15        10  0.000000e+00 #> 9      A      6     16       6        10  0.000000e+00 #> 10     A      7     17       7        10 -8.881784e-16 #> 11     A      8     18       8        10  0.000000e+00 #> 12     A      9     19       9        10  0.000000e+00 #Note that because our cycles are perfectly regular here, the cyclicalShift #computed are all 0 (or close because of R's computing approximations)  #Subsetting cycles and fixed date trajectories: subsetTrajectories(cyclesToy,                    subtrajectory_selection = \"A_C1\")  #> $d #>            1         2         3         4         5         6         7 #> 2  0.6657661                                                             #> 3  1.2578463 0.6486857                                                   #> 4  1.7105119 1.2102150 0.6200532                                         #> 5  1.9731062 1.6249720 1.1486130 0.5900330                               #> 6  2.0155644 1.8501135 1.5346716 1.0962457 0.5706904                     #> 7  1.8317650 1.8640587 1.7442756 1.4761035 1.0755705 0.5706904           #> 8  1.4404147 1.6687507 1.7639284 1.7021130 1.4761035 1.0962457 0.5900330 #> 9  0.8838104 1.2897072 1.6021130 1.7639284 1.7442756 1.5346716 1.1486130 #> 10 0.2354979 0.7755705 1.2897072 1.6687507 1.8640587 1.8501135 1.6249720 #> 11 0.5000000 0.2354979 0.8838104 1.4404147 1.8317650 2.0155644 1.9731062 #>            8         9        10 #> 2                                #> 3                                #> 4                                #> 5                                #> 6                                #> 7                                #> 8                                #> 9  0.6200532                     #> 10 1.2102150 0.6486857           #> 11 1.7105119 1.2578463 0.6657661 #>  #> $metadata #>    sites cycles surveys times dates internal #> 1      A   A_C1       1     0     0     TRUE #> 2      A   A_C1       2     1     1     TRUE #> 3      A   A_C1       3     2     2     TRUE #> 4      A   A_C1       4     3     3     TRUE #> 5      A   A_C1       5     4     4     TRUE #> 6      A   A_C1       6     5     5     TRUE #> 7      A   A_C1       7     6     6     TRUE #> 8      A   A_C1       8     7     7     TRUE #> 9      A   A_C1       9     8     8     TRUE #> 10     A   A_C1      10     9     9     TRUE #> 11     A   A_C1      11    10     0    FALSE #>  #> attr(,\"class\") #> [1] \"cycles\"       \"trajectories\" \"list\"         subsetTrajectories(fdTrajToy,                    subtrajectory_selection = c(\"A_fdT_2\",\"A_fdT_4\")) #> $d #>          1        2        3        4        5 #> 2 1.148613                                     #> 3 0.500000 1.353729                            #> 4 1.142821 0.500000 1.148613                   #> 5 1.000000 1.686966 0.500000 1.353729          #> 6 1.338943 1.000000 1.142821 0.500000 1.148613 #>  #> $metadata #>   sites     fdT surveys times dates #> 1     A A_fdT_2       1     2     2 #> 2     A A_fdT_4       1     4     4 #> 3     A A_fdT_2       2    12     2 #> 4     A A_fdT_4       2    14     4 #> 5     A A_fdT_2       3    22     2 #> 6     A A_fdT_4       3    24     4 #>  #> attr(,\"class\") #> [1] \"fd.trajectories\" \"trajectories\"    \"list\"                             #General metrics describing the geometry of cycles: cycleMetrics(x = cyclicalTrajToy,              cycleDuration = cycleDurationToy) #>   cycle site  n t_start t_end   length mean_speed mean_angle convexity #> 1  A_C1    A 10       0    10 6.190457  0.6190457         NA        NA #> 2  A_C2    A 10      10    20 6.190457  0.6190457         36         1 #> 3  A_C3    A 10      20    30 6.190457  0.6190457         36         1 #>   internal_ss internal_variance #> 1    8.667408         0.9630454 #> 2    8.667408         0.9630454 #> 3    8.667408         0.9630454"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclicalPlots.html","id":null,"dir":"Reference","previous_headings":"","what":"Cyclical trajectory plots — trajectoryCyclicalPlots","title":"Cyclical trajectory plots — trajectoryCyclicalPlots","text":"Plotting functions Cyclical Ecological Trajectory Analysis: Function cyclePCoA removes unwanted points (see details) performs principal coordinates analysis (cmdscale) draws cycles ordination scatterplot. Function fixedDateTrajectoryPCoA performs principal coordinates analysis (cmdscale) draws fixed date trajectories ordination scatterplot.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclicalPlots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cyclical trajectory plots — trajectoryCyclicalPlots","text":"","code":"cyclePCoA(   x,   centered = FALSE,   sites.colors = NULL,   cycles.colors = NULL,   print.names = FALSE,   print.init.points = FALSE,   cex.init.points = 1,   axes = c(1, 2),   ... )  fixedDateTrajectoryPCoA(   x,   fixedDates.colors = NULL,   sites.lty = NULL,   print.names = FALSE,   add.cyclicalTrajectory = TRUE,   axes = c(1, 2),   ... )"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclicalPlots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cyclical trajectory plots — trajectoryCyclicalPlots","text":"x full output function extractCycles extractFixedDateTrajectories appropriate, object class cycles fd.trajectories. centered Boolean. cycles centered? Default FALSE. sites.colors colors applied different sites. cycles distinguished (old recent) increasingly lighter tones provided colors. cycles.colors colors applied different cycles. compatible sites.colors. print.names boolean flag indicate whether names cycles fixed-date trajectories printed. print.init.points boolean flag indicate whether initial point start cycles printed (useful spot start cycles graphs containing many trajectories). cex.init.points size initial points. axes pair principal coordinates plotted. ... Additional parameters function arrows. fixedDates.colors colors applied different fixed dates trajectories. Defaults simple RGB circular color palette. sites.lty line type different sites (see par, \"lty\"). add.cyclicalTrajectory boolean flag indicate whether original cyclical trajectory also drawn background.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclicalPlots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cyclical trajectory plots — trajectoryCyclicalPlots","text":"Functions cyclePCoA fixedDateTrajectoryPCoA return results calling cmdscale.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclicalPlots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cyclical trajectory plots — trajectoryCyclicalPlots","text":"functions cyclePCoA fixedDateTrajectoryPCoA give adapted graphical representation cycles fixed-date trajectories using principal coordinate analysis (PCoA, see cmdscale). Function cyclePCoA handles external potential interpolated ecological states correctly taken account PCoA (.e. avoiding duplication, reducing influence interpolated ecological states much possible). case centered cycles, influence ecological states grow correspond duplications anymore. case centered cycles, intended use set parameter centered TRUE.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclicalPlots.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Cyclical trajectory plots — trajectoryCyclicalPlots","text":"Djeghri et al. (preparation) Going round cycles, going somewhere: Ecological Trajectory Analysis tool decipher seasonality cyclical dynamics.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclicalPlots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cyclical trajectory plots — trajectoryCyclicalPlots","text":"Nicolas Djeghri, UBO Miquel De Cáceres, CREAF","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryCyclicalPlots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cyclical trajectory plots — trajectoryCyclicalPlots","text":"","code":"#First build a toy dataset with: #The sampling times of the time series timesToy <- 0:30   #The duration of the cycles (i.e. the periodicity of the time series) cycleDurationToy <- 10   #The sites sampled (only one named \"A\") sitesToy <- rep(c(\"A\"),length(timesToy))   #And prepare a trend term trend <- 0.05  #Build cyclical data (note that we apply the trend only to x): x <- sin((timesToy*2*pi)/cycleDurationToy)+trend*timesToy y <- cos((timesToy*2*pi)/cycleDurationToy) matToy <- cbind(x,y)  #And express it as distances: dToy <- dist(matToy)  #Make it an object of class trajectory: cyclicalTrajToy <- defineTrajectories(d = dToy,                                       sites = sitesToy,                                       times = timesToy)  #And extract the cycles and fixed date trajectories: cyclesToy <- extractCycles(x = cyclicalTrajToy,                            cycleDuration = cycleDurationToy) fdTrajToy <- extractFixedDateTrajectories(x = cyclicalTrajToy,                                           cycleDuration = cycleDurationToy)  #CETA plotting functions: cyclePCoA(cyclesToy)  fixedDateTrajectoryPCoA(fdTrajToy)   #After centering of cycles, set  parameter centered to TRUE in cyclePCoA(): cent_cyclesToy <- centerTrajectories(cyclesToy) cyclePCoA(cent_cyclesToy, centered = TRUE)"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryMetrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Trajectory metrics — trajectoryMetrics","title":"Trajectory metrics — trajectoryMetrics","text":"Set functions estimate metrics describing individual trajectories. Given input trajectory data, set functions provide ETA metrics : Function trajectoryLengths calculates lengths directed segments total path lengths trajectories. Function trajectoryLengths2D calculates lengths directed segments total path lengths trajectories 2D coordinates given input. Function trajectorySpeeds calculates speeds directed segments total path speed trajectories. Function trajectorySpeeds2D calculates speeds directed segments total path speed trajectories 2D coordinates given input. Function trajectoryAngles calculates angle consecutive pairs directed segments segments ordered triplets points. Function trajectoryAngles2D calculates angle consecutive pairs directed segments segments ordered triplets points. Function trajectoryDirectionality calculates (trajectory) statistic measures directionality whole trajectory. Function trajectoryInternalVariation calculates (trajectory) statistic measures variability states included trajectory. Function trajectoryMetrics evaluates several trajectory metrics . Function trajectoryWindowMetrics evaluates several trajectory metrics subtrajectories defined using moving windows.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryMetrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trajectory metrics — trajectoryMetrics","text":"","code":"trajectoryLengths(x, relativeToInitial = FALSE, all = FALSE)  trajectoryLengths2D(   xy,   sites,   surveys = NULL,   relativeToInitial = FALSE,   all = FALSE )  trajectorySpeeds(x)  trajectorySpeeds2D(xy, sites, surveys = NULL, times = NULL)  trajectoryAngles(   x,   all = FALSE,   relativeToInitial = FALSE,   stats = TRUE,   add = TRUE )  trajectoryAngles2D(   xy,   sites,   surveys,   relativeToInitial = FALSE,   betweenSegments = TRUE )  trajectoryDirectionality(x, add = TRUE, nperm = NA)  trajectoryInternalVariation(x, relativeContributions = FALSE)  trajectoryMetrics(x, add = TRUE)  trajectoryWindowMetrics(x, bandwidth, type = \"surveys\", add = TRUE)"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryMetrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trajectory metrics — trajectoryMetrics","text":"x object class trajectories. relativeToInitial Flag indicate lengths angles calculated respect initial survey. flag indicate angles desired triangles (.e. pairs segments) trajectory. FALSE, angles calculated consecutive segments . xy Matrix 2D coordinates Cartesian space (typically ordination ecological states). sites vector indicating site corresponding ecological state. surveys vector indicating survey corresponding ecological state (necessary surveys order). times numeric vector indicating time corresponding ecosystem state. stats flag indicate circular statistics desired (mean, standard deviation mean resultant length, .e. rho) add Flag indicate constant values added (local transformation) correct triplets distance values fulfill triangle inequality. betweenSegments Flag indicate angles calculated trajectory segments respect X axis. nperm number permutations used directionality test. relativeContributions logical flag indicate contributions individual observations temporal variability expressed relative terms, .e. ratio sum squares observation divided overall sum squares (otherwise, absolute sum squares returned). bandwidth Bandwidth moving windows (units surveys times, depending type) type string, either \"surveys\" \"times\", indicating windows defined.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryMetrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trajectory metrics — trajectoryMetrics","text":"Functions trajectoryLengths  trajectoryLengths2D return data frame length segment trajectory total length trajectories. relativeToInitial = TRUE lengths calculated initial survey surveys. = TRUE lengths calculated segments. Functions trajectorySpeeds trajectorySpeeds2D return data frame speed segment trajectory total speeds trajectories. Units depend units distance matrix units times input trajectory data. Function trajectoryAngles returns data frame angle values trajectory. stats=TRUE, mean, standard deviation mean resultant length angles also returned. Function trajectoryAngles2D returns data frame angle values trajectory. betweenSegments=TRUE, angles calculated trajectory segments, alternatively, betweenSegments=FALSE, angles calculated considering Y axis North (0°). Function trajectoryDirectionality returns vector directionality values (one per trajectory). nperm missing, function returns data frame column directional values column p-values corresponding result permutational test. Function trajectoryInternalVariation returns data.frame many rows trajectories, different columns: (1) contribution individual state internal sum squares (absolute relative terms); (2) overall sum squares internal variability; (3) unbiased estimator overall internal variance. Function trajectoryMetrics returns data frame rows trajectories columns different trajectory metrics. Function trajectoryWindowMetrics returns data frame rows midpoints trajectories columns correspond different trajectory metrics.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryMetrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trajectory metrics — trajectoryMetrics","text":"Ecological Trajectory Analysis (ETA) framework analyze dynamics ecological entities described trajectories chosen space multivariate resemblance (De Cáceres et al. 2019). ETA takes trajectories objects analyzed compared geometrically. input distance matrix d ideally metric. , subsets distance triplets fulfill triangle inequality (see utility function .metric). ETA functions require metricity include parameter 'add', default TRUE, meaning whenever triangle inequality broken minimum constant required fulfill added three distances. local (hence, inconsistent across triplets) corrections desired, users find another way modify d achieve metricity, PCoA, metric MDS non-metric MDS (see vignette 'Introduction Ecological Trajectory Analysis'). parameter 'add' set FALSE problems triangle inequality exist, ETA functions may provide missing values cases . Function trajectoryAngles calculates angles consecutive segments degrees. pair segments, angle two defined plane contains two segments, measures change direction (degrees) one segment . Angles always positive, zero values indicating segments straight line, values equal 180 degrees segments opposite directions. = TRUE angles calculated segments corresponding ordered triplets. Alternatively, relativeToInitial = TRUE angles calculated segment respect initial survey. Function trajectoryAngles2D calculates angles consecutive segments degrees 2D coordinates given input. pair segments, angle two defined plane contains two segments, measures change direction (degrees) one segment . Angles always positive (O 360), zero values indicating segments straight line, values equal 180 degrees segments opposite directions. = TRUE angles calculated segments corresponding ordered triplets. Alternatively, relativeToInitial = TRUE angles calculated segment respect initial survey. betweenSegments = TRUE angles calculated segments trajectory, otherwise, betweenSegments = FALSE, angles calculated considering Y axis North (0°). Function trajectoryDirectionality evaluates directionality metric proposed De Cáceres et al (2019). nperm supplied, function performs permutational test evaluate significance directionality, null hypothesis entails random order surveys within trajectory. p-value corresponds proportion permutations directional value equal larger observed.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryMetrics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Trajectory metrics — trajectoryMetrics","text":"De Cáceres M, Coll L, Legendre P, Allen RB, Wiser SK, Fortin MJ, Condit R & Hubbell S. (2019). Trajectory analysis community ecology. Ecological Monographs 89, e01350.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryMetrics.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trajectory metrics — trajectoryMetrics","text":"Miquel De Cáceres, CREAF Anthony Sturbois, Vivarmor nature, Réserve Naturelle nationale de la Baie de Saint-Brieuc Nicolas Djeghri, UBO","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryMetrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trajectory metrics — trajectoryMetrics","text":"","code":"#Description of entities (sites) and surveys entities <- c(\"1\",\"1\",\"1\",\"2\",\"2\",\"2\") surveys <- c(1, 2, 3, 1, 2, 3) times <- c(0, 1.5, 3, 0, 1.5, 3)    #Raw data table xy <- matrix(0, nrow=6, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4:6,1] <- 0.5 xy[4:6,2] <- xy[1:3,2] xy[6,1]<-1    #Draw trajectories trajectoryPlot(xy, entities, surveys,                  traj.colors = c(\"black\",\"red\"), lwd = 2)   #Distance matrix d <- dist(xy) d #>          1        2        3        4        5 #> 2 1.000000                                     #> 3 2.000000 1.000000                            #> 4 0.500000 1.118034 2.061553                   #> 5 1.118034 0.500000 1.118034 1.000000          #> 6 2.236068 1.414214 1.000000 2.061553 1.118034    #Trajectory data x <- defineTrajectories(d, entities, surveys, times)  #Trajectory lengths trajectoryLengths(x) #>   S1       S2     Path #> 1  1 1.000000 2.000000 #> 2  1 1.118034 2.118034 trajectoryLengths2D(xy, entities, surveys) #>   S1       S2     Path #> 1  1 1.000000 2.000000 #> 2  1 1.118034 2.118034  #Trajectory speeds trajectorySpeeds(x) #>          S1        S2      Path #> 1 0.6666667 0.6666667 0.6666667 #> 2 0.6666667 0.7453560 0.7060113 trajectorySpeeds2D(xy, entities, surveys, times) #>          S1        S2      Path #> 1 0.6666667 0.6666667 0.6666667 #> 2 0.6666667 0.7453560 0.7060113  #Trajectory angles trajectoryAngles(x) #>      S1-S2     mean           sd rho #> 1  0.00000  0.00000 0.000000e+00   1 #> 2 26.56505 26.56505 1.490116e-08   1 trajectoryAngles2D(xy, entities, surveys, betweenSegments = TRUE) #>             t1-t2 #> 1               0 #> 2 26.565051177078 trajectoryAngles2D(xy, entities, surveys, betweenSegments = FALSE) #>   Axis2-t1 Axis2-t2 #> 1        0  0.00000 #> 2        0 26.56505  #Several metrics at once trajectoryMetrics(x)   #>   trajectory n t_start t_end duration   length mean_speed mean_angle #> 1          1 3       0     3        3 2.000000  0.6666667    0.00000 #> 2          2 3       0     3        3 2.118034  0.7060113   26.56505 #>   directionality internal_ss internal_variance #> 1      1.0000000    2.000000          1.000000 #> 2      0.8524164    2.166667          1.083333"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Trajectory plots — trajectoryPlot","title":"Trajectory plots — trajectoryPlot","text":"Set plotting functions Ecological Trajectory Analysis:","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trajectory plots — trajectoryPlot","text":"","code":"trajectoryPCoA(   x,   traj.colors = NULL,   axes = c(1, 2),   survey.labels = FALSE,   time.labels = FALSE,   ... )  trajectoryPlot(   coords,   sites,   surveys = NULL,   times = NULL,   traj.colors = NULL,   axes = c(1, 2),   survey.labels = FALSE,   time.labels = FALSE,   ... )"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trajectory plots — trajectoryPlot","text":"x object class trajectories. traj.colors vector colors (one per site). selection != NULL length color vector equal number sites selected. axes pair principal coordinates plotted. survey.labels boolean flag indicate whether surveys added text next arrow endpoints time.labels boolean flag indicate whether times added text next arrow endpoints ... Additional parameters function arrows. coords data.frame matrix rows ecological states columns coordinates arbitrary space sites vector indicating site corresponding ecological state. surveys vector indicating survey corresponding ecological state (necessary surveys order). times numeric vector indicating survey times.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trajectory plots — trajectoryPlot","text":"Function trajectoryPCoA returns result calling cmdscale.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trajectory plots — trajectoryPlot","text":"Function trajectoryPCoA performs principal coordinates analysis (cmdscale) draws trajectories ordination scatterplot. Function trajectoryPlot draws trajectories scatter plot corresponding input coordinates.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryPlot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Trajectory plots — trajectoryPlot","text":"De Cáceres M, Coll L, Legendre P, Allen RB, Wiser SK, Fortin MJ, Condit R & Hubbell S. (2019). Trajectory analysis community ecology. Ecological Monographs 89, e01350.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryPlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trajectory plots — trajectoryPlot","text":"Miquel De Cáceres, CREAF Anthony Sturbois, Vivarmor nature, Réserve Naturelle nationale de la Baie de Saint-Brieuc","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trajectory plots — trajectoryPlot","text":"","code":"#Description of sites and surveys sites <- c(\"1\",\"1\",\"1\",\"2\",\"2\",\"2\") surveys <- c(1,2,3,1,2,3)    #Raw data table xy<-matrix(0, nrow=6, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4:6,1] <- 0.5 xy[4:6,2] <- xy[1:3,2] xy[6,1]<-1  #Define trajectory data x <- defineTrajectories(dist(xy), sites, surveys)    #Draw trajectories using original coordinates trajectoryPlot(xy, sites, surveys,                 traj.colors = c(\"black\",\"red\"), lwd = 2)   #Draw trajectories in a PCoA trajectoryPCoA(x,                 traj.colors = c(\"black\",\"red\"), lwd = 2)        #Should give the same results if surveys are not in order  #(here we switch surveys for site 2) temp <- xy[5,] xy[5,] <- xy[6,] xy[6,] <- temp surveys[5] <- 3 surveys[6] <- 2    trajectoryPlot(xy, sites, surveys,                 traj.colors = c(\"black\",\"red\"), lwd = 2)       x <- defineTrajectories(dist(xy), sites, surveys) trajectoryPCoA(x,                 traj.colors = c(\"black\",\"red\"), lwd = 2)"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryProjection.html","id":null,"dir":"Reference","previous_headings":"","what":"Trajectory projection — trajectoryProjection","title":"Trajectory projection — trajectoryProjection","text":"Performs projection set target points onto specified trajectory returns distance trajectory (.e. rejection) relative position projection point within trajectory.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryProjection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trajectory projection — trajectoryProjection","text":"","code":"trajectoryProjection(   d,   target,   trajectory,   tol = 1e-06,   add = TRUE,   force = TRUE )"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryProjection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trajectory projection — trajectoryProjection","text":"d symmetric matrix object class dist containing distance values pairs ecological states (see details). target integer vector ecological states projected. trajectory integer vector ecological states conforming trajectory onto target states projected. tol Numerical tolerance value determine projection point lies within trajectory. add Flag indicate constant values added (local transformation) correct triplets distance values fulfill triangle inequality. force Flag indicate projection falls reference trajectory given, closest point trajectory used.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryProjection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trajectory projection — trajectoryProjection","text":"data frame following columns: distanceToTrajectory: Distances trajectory, .e. rejection. orthogonal projection distance corresponds minimum distance trajectory. segment: Segment includes projected point closest state. relativeSegmentPosition: Relative position projected point within segment, .e. values 0 1 0 representing start segment 1 representing end. relativeTrajectoryPosition: Relative position projected point within trajectory, .e. values 0 1 0 representing start trajectory 1 representing end.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectoryProjection.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Trajectory projection — trajectoryProjection","text":"Miquel De Cáceres, CREAF","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectorySections.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions for building Trajectory Sections — trajectorySections","title":"Functions for building Trajectory Sections — trajectorySections","text":"Trajectory sections flexible way cut longer trajectories. presently used chiefly building cycles cyclical ecological trajectory analysis (CETA) might applications.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectorySections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions for building Trajectory Sections — trajectorySections","text":"","code":"extractTrajectorySections(   x,   Traj,   tstart,   tend,   BCstart,   BCend,   namesTS = 1:length(Traj) )"},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectorySections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions for building Trajectory Sections — trajectorySections","text":"x object class trajectories describing cyclical trajectory. Traj vector length equal number desired trajectory sections indicating trajectories trajectory sections must build (see details). tstart vector start times desired trajectory sections (see details). tend vector end times desired trajectory sections (see details). BCstart vector start boundary conditions (either \"internal\" \"external\") desired trajectory sections (see details). BCend vector end boundary conditions (either \"internal\" \"external\") desired trajectory sections (see details). namesTS optional vector giving name desired trajectory sections (default trajectory sections simply numbered).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectorySections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions for building Trajectory Sections — trajectorySections","text":"Function extractTrajectorySections returns base information needed describe trajectory sections. outputs meant used inputs ETA functions order obtain desired metrics. Importantly, within trajectory sections, ecological states can considered \"internal\" \"external\" may necessitate special treatment (see details). Function extractTrajectorySections returns object class sections containing: d: object class dist, new distance matrix describing trajectory sections. Ecological states may duplicated matrix trajectory sections overlap. compared input matrix, d may also present deletions ecological states belong trajectory sections. metadata: object class data.frame describing ecological states d columns: sites: sites associated ecological states. sections: names trajectory sections ecological states belongs . surveys: renumbering surveys describe individual trajectory sections. times: times associated ecological states. internal: boolean vector TRUE indicating \"internal\" ecological states whereas FALSE indicates \"external\" ecological states. important implications use extractTrajectorySections outputs (see details). interpolationInfo: output appear ecological states interpolated. used internally plotting functions (see cyclePCoA) intended interest end user. Function interpolateEcolStates returns object class dist including desired interpolated ecological states.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectorySections.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Functions for building Trajectory Sections — trajectorySections","text":"Trajectory sections functions: Function extractTrajectorySections reformats object class trajectories describing one trajectories another object class trajectories describing specified trajectory sections. Trajectory sections represent way subset trajectories flexibly. Cycles (see extractCycles) particular case trajectory sections. Function interpolateEcolStates compute interpolated ecological states new distance matrix associated (used extractTrajectorySections). Trajectory sections can obtained using extractTrajectorySections. Trajectory sections allow cut longer trajectory parts analyses. Cycles specical case trajectory sections. trajectory section TS(Traj,(tstart, BCstart),(tend, BCend)) defined trajectory (Traj) obtained , start end times (tstart tend) start end boundary conditions (BCstart, BCend). function extractTrajectorySections builds trajectory sections function arguments Traj, tstart, tend, BCstart, BCend. Function interpolateEcolStates called within extractTrajectorySections interpolate ecological states tstart tend associated measured ecological state within matrix d. IMPORTANT: Trajectory sections comprises \"internal\" \"external\" ecological states (indicated vector internal, see output function extractTrajectorySections). \"external\" ecological states need specific treatment calculations operations within ETA, namely: Centering, external ecological states must excluded computation included nonetheless procedure. automatically handled function centerTrajectories. Trajectory variability, internal ecological states must taken account. handled automatically function trajectoryInternalVariation. Special care must also taken processing data principal coordinate analysis external ecological states effectively duplicated interpolated output extractTrajectorySections.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectorySections.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Functions for building Trajectory Sections — trajectorySections","text":"Nicolas Djeghri, UBO Miquel De Cáceres, CREAF","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/trajectorySections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions for building Trajectory Sections — trajectorySections","text":"","code":"#Description of sites and surveys sites <- c(\"1\",\"1\",\"1\",\"2\",\"2\",\"2\") surveys <- c(1, 2, 3, 1, 2, 3) times <- c(0, 1.5, 3, 0, 1.5, 3)    #Raw data table xy <- matrix(0, nrow=6, ncol=2) xy[2,2]<-1 xy[3,2]<-2 xy[4:6,1] <- 0.5 xy[4:6,2] <- xy[1:3,2] xy[6,1]<-1  #Draw trajectories trajectoryPlot(xy, sites, surveys,                  traj.colors = c(\"black\",\"red\"), lwd = 2)                  #Distance matrix d <- dist(xy) d #>          1        2        3        4        5 #> 2 1.000000                                     #> 3 2.000000 1.000000                            #> 4 0.500000 1.118034 2.061553                   #> 5 1.118034 0.500000 1.118034 1.000000          #> 6 2.236068 1.414214 1.000000 2.061553 1.118034    #Trajectory data x <- defineTrajectories(d, sites, surveys, times)  #Cutting some trajectory sections in those trajectories TrajSec <- extractTrajectorySections(x,                                      Traj = c(\"1\",\"1\",\"2\"),                                      tstart = c(0,1,0.7),                                      tend = c(1.2,2.5,2),                                      BCstart = rep(\"internal\",3),                                      BCend = rep(\"internal\",3)) #extractTrajectorySections() works from distances,  #so for representation using trajectoryPlot(),we must first perform a PCoA: Newxy <- cmdscale(TrajSec$d) trajectoryPlot(Newxy,                sites = TrajSec$metadata$sections,                surveys = TrajSec$metadata$surveys,                traj.colors = c(\"black\",\"grey\",\"red\"),lwd = 2)"},{"path":"https://emf-creaf.github.io/ecotraj/reference/transformTrajectories.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform trajectories — transformTrajectories","title":"Transform trajectories — transformTrajectories","text":"following functions provided transform trajectories: Function smoothTrajectories performs multivariate smoothing trajectory data using Gaussian kernel. Function centerTrajectories shifts trajectories center multivariate space returns modified distance matrix. Function interpolateTrajectories relocates trajectory ecological states corresponding input times, via interpolation.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/transformTrajectories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform trajectories — transformTrajectories","text":"","code":"smoothTrajectories(   x,   survey_times = NULL,   kernel_scale = 1,   fixed_endpoints = TRUE )  centerTrajectories(x, exclude = integer(0))  interpolateTrajectories(x, times)"},{"path":"https://emf-creaf.github.io/ecotraj/reference/transformTrajectories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform trajectories — transformTrajectories","text":"x object class trajectories. survey_times vector indicating survey time surveys (NULL, time consecutive surveys considered one) kernel_scale Scale Gaussian kernel, related survey times fixed_endpoints logical flag force keeping location trajectory endpoints unmodified exclude integer vector indicating sites excluded trajectory centroid computation. Note: objects class cycles, external excluded default. times numeric vector indicating new observation times trajectories. Values comprised time limits original trajectories.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/transformTrajectories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform trajectories — transformTrajectories","text":"modified object class trajectories, distance matrix transformed. calling interpolateTrajectories, also number observations metadata likely affected.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/transformTrajectories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform trajectories — transformTrajectories","text":"Details calculations given De Cáceres et al (2019). Function centerTrajectories performs centering trajectories using matrix algebra explained Anderson (2017).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/reference/transformTrajectories.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Transform trajectories — transformTrajectories","text":"De Cáceres M, Coll L, Legendre P, Allen RB, Wiser SK, Fortin MJ, Condit R & Hubbell S. (2019). Trajectory analysis community ecology. Ecological Monographs 89, e01350. Anderson (2017). Permutational Multivariate Analysis Variance (PERMANOVA). Wiley StatsRef: Statistics Reference Online. 1-15. Article ID: stat07841.","code":""},{"path":[]},{"path":"https://emf-creaf.github.io/ecotraj/reference/transformTrajectories.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Transform trajectories — transformTrajectories","text":"Miquel De Cáceres, CREAF Nicolas Djeghri, UBO","code":""},{"path":"https://emf-creaf.github.io/ecotraj/news/index.html","id":"ecotraj-111","dir":"Changelog","previous_headings":"","what":"ecotraj 1.1.1","title":"ecotraj 1.1.1","text":"Trajectory subsetting according time window limits Bug correction trajectory definition (missing surveys existing times) Bug correction trajectory asymmetric tests (done symmetric previously)","code":""},{"path":"https://emf-creaf.github.io/ecotraj/news/index.html","id":"ecotraj-110","dir":"Changelog","previous_headings":"","what":"ecotraj 1.1.0","title":"ecotraj 1.1.0","text":"CRAN release: 2025-05-05 New functions .metric() .synchronous(). Update function trajectoryInternalVariation() (former trajectoryVariability()). New function dynamicVariation(). New function variationDecomposition() synchronous trajectories. New function interpolateTrajectories() interpolation given times. Function trajectoryConvergence() modified allow global convergence test (type = “multiple”).","code":""},{"path":"https://emf-creaf.github.io/ecotraj/news/index.html","id":"ecotraj-100","dir":"Changelog","previous_headings":"","what":"ecotraj 1.0.0","title":"ecotraj 1.0.0","text":"CRAN release: 2025-04-17 Trajectory data structures introduced. New functions cyclical trajectory analysis (Djeghri et al, prep.). New ETA metrics trajectoryVariability() trajectorySpeeds(). Permutational test added trajectoryDirectionality(). New function trajectoryMetrics() evaluation multiple metrics. New function trajectoryWindowMetrics() metrics evaluated moving windows. New function trajectoryShifts() compare trajectories similar shape differ speed. New dissimilarity metric trajectories, taking account differences time.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/news/index.html","id":"ecotraj-021","dir":"Changelog","previous_headings":"","what":"ecotraj 0.2.1","title":"ecotraj 0.2.1","text":"Update function ‘centerTrajectories’ add flexibility trajectory centroid definition. New vignette illustrate centering. Improvement trajectoryProjection() return relative position within selected segments, also orthogonal projection exist.","code":""},{"path":"https://emf-creaf.github.io/ecotraj/news/index.html","id":"ecotraj-020","dir":"Changelog","previous_headings":"","what":"ecotraj 0.2.0","title":"ecotraj 0.2.0","text":"New function ‘smoothTrajectories’ added. Update vignette ‘Introduction Ecological Trajectory Analysis (ETA)’. Correction squared distances centroid (GitHub issue #3). EQA individual states dynamic envelopes (experimental).","code":""}]
